
	Trainsimulator - Utility "TSUtil"


Version       : 3.6.03
Programmstand : 01.10.2011
Dokumentation : 01.10.2011

Bedienungsanleitung:

Das vorliegene Utility soll die Wartung und Modifikation von Strecken erleichtern bzw.
ermoeglichen. Es vereint verschiedene Funktionen, die im folgenden beschrieben werden.

Einleitung:
Zur Ausfuehrung dieses Utilities wird lediglich eine "Java-Runtime-Umgebung" vorausgesetzt.
Nach der Installation (siehe: Installation des ...) kann das Utility sofort verwendet werden.
Der Aufruf erfolgt GRUNDSAETZLICH und unabhaengig von der Funktion, als Java-Applikation aus
einem DOS-Fenster. Durch den Verzicht auf eine grafische Oberflaeche ist die Aktivierung
der einzelnen Funktion zwar etwas "kryptisch" und die Ausgaben (Fehler und Meldungen)
erfolgen in das DOS-Fenster aber die Ausfuehrung ist relativ effektiv.
Wenn man die Standard - Pufferwerte des DOS-Fensters veraendert (z.B.400 Zeilen) kann man
alle Ausgabezeilen - unabhaengig von einer LOG-Datei - einfach pruefen. Dennoch ist es
sinnvoll eine LOG-Datei schreiben zu lassen, da diese weitere Informationen enthaelt.
3.4.01: Es wurde eine grafische Oberflaeche hinzugefuegt, um die Eingabe der Optionen, Funktionen und
	Dateireferenzen zu vereinfachen.

WICHTIG:
  Bei der Eingabe der Befehle muss grundsaetzlich auf Gross-Kleinschreibung geachtet werden.
  Das Programm reagiert zwar nicht immer sensitiv auf die Art der Eingabe, doch wenn man immer
  auf Gross-Kleinschreibung achtet, werden manche Fehler vermieden.

WICHTIG:
  Immer eine Datensicherung herstellen, bevor das Utility benutzt wird.

SEHR WICHTIG:
  Mit der Version 3 wurde die Vorgehensweise bei ALLEN Funktionen (soweit nicht anders angegeben)
  in der Weise geaendert, dass nicht mehr ALLE Dateien eines Verzeichnisses bearbeitet werden,
  sondern nur die Dateien, die sich auf BESIEDELTE Strukturquadrate beziehen. Ggf. ist damit eine
  Korrektur der Strecke durch den Streckengeometrie-Editor notwendig.

Hintergrund zu den World-Dateien (Formatdefinitionen):
  Um World-Dateien veraendern zu koennen, muessen diese in der "unkomprimierten Textform"(UT) vorliegen:
  Die World-Dateien (.w) koennen insgesamt in VIER verschiedenen Versionen vorliegen:
	- [UT] unkomprimierte Text - Datei (Unicode, Kennung beginnt mit: "SIMISA@@")
	- [KT] komprimierte Text - Datei (Unicode, Kennung beginnt mit: "SIMISA@F")
	- [UB] unkomprimierte Binaer - Datei (ASCII, Kennung beginnt mit: "SIMISA@@")
	- [KB] komprimierte Binaer - Datei (ASCII, Kennung beginnt mit: "SIMISA@F")
  Bemerkung: Folgende Namenskonventionen werden von mir benutzt:
	Das 'unkomprimierte Text'-Format wird auch als 'Erweitertes Format' bezeichnet, waehrend
	das 'unkomprimierte Binaer'-Format auch als 'Reduziertes Format' bezeichnet wird.
	Beide Formate koennen zusaetzlich durch den Z-Lib-Algorithmus komprimiert werden.
  Mit Hilfe des vom TS mitgelieferten Utilities "ffeditc_unicode" koennen die World - Dateien zwischen
  den verschiedenen Formen umgewandelt werden. Ein Aufruf wandelt dabei um:
	a) Option /u :	UT->UB; UB->UT; KT->UB; KB->UT
	b) Option /c :	UT->KB; UB->KT; KT->KB; KB->KT
  Es ist somit ggf. notwendig eine World - Datei mehrfach zu konvertieren (Option /u), um sie in der
  Form UT vorliegen zu haben.(KT->UB->UT) Die UT-Form ist die einzige Version, die mit Hilfe eines
  Editors veraendert werden kann. Um zu entscheiden welche Form vorliegt, koennen die ersten Zeichen
  jeder Datei gelesen werden und mit den Kennungen verglichen werden. Dabei muss die Datei erst als
  ASCII Datei gelesen werden um zu pruefen, ob eine binaere Form vorliegt. Nur wenn dabei Unsinn
  gelesen wird, kann ein zweiter Versuch mit dem Lesen von Unicode-Daten erfolgen. Das Lesen einer
  binaeren Datei als Unicode-Datei erzeugt einen Lese - Fehler, da ungueltige Unicode - Zeichen
  erkannt werden.
  Die Umwandlung von "ffeditc_unicode" erfolgt nicht fehlerfrei. Schon eine Umwandlung bewirkt, dass
  verschiedene Objekte nicht immer sichtbar und nicht mehr manipulierbar sind. Der Streckeneditor ist
  jedoch in der Lage jeden Quadranten korrekt in die Text - Form [UT] umzuwandeln. Ein Vergleich der
  Ergebnisse zeigt, dass im Bereich der "ViewDbSphere" - Eintraege erhebliche Struktur - Unterschiede
  auftraten. Bei der Umwandlung mit Hilfe von "ffeditc_unicode" wird eine erheblich tiefere Schachtelung
  dieser Elemente und damit eine groessere Satzlaenge erzeugt.
  Um einen Quadranten fehlerfrei in die UT - Form umzuwandeln ist es deshalb notwendig, den Streckeneditor
  zu nutzen.

  Auch mit dem neuen Programm-Modul von Okrasa Ghia kann eine effektive Komprimierung/Dekomprimierung/
  Expandierung/Reduzierung durchgeführt werden. Dieses Modul wird auch von Route-Riter ab Version 6 verwendet.
  Es zeichnet sich durch eine hohe Performance aus und basiert ebenfalls auf den Algorithmen von 
  Martyn Griffin. Auch für dieses Modul ist ein Stand-alone-programm verfügbar. (Zipper/tk_utils)
  ACHTUNG: Dieses Modul benötigt die 'framwork.net'-Umgebung von Microsoft.

  Auf Grund der Zusammenarbeit mit Mike Simpson (Route-Riter) ist ab der Version 3.0.140 auch eine
  Komprimierung-/Dekomprimierungsroutine in TSUtil implementiert. Diese ist in der Lage beim Lesen einer
  World-, Tile- oder Shape-Datei, diese implizit zu dekomprimieren und beim Schreiben wieder zu komprimieren.
  Damit entfaellt die Vorraussetzung, dass eine TSUtil-Funktion eine dekomprimierte Datei fordert.
  Beginnend mit der Version 7 von Route-Riter wird auch dort die TSUtil-Routine zur Komprimierung/
  Dekomprimierung eingesetzt.

  Bemerkung: Die Schienendatenbank liegt IMMER in einer Form vor, die direkt bearbeitet werden kann.



Eine kompakte Zusammenfassung(Hilfe) erhaelt man mit dem Aufruf:
	C>java TSUtil ?

Beim Aufruf von TSUtil koennen 'Systemoptionen' eingefuegt werden, die das Java-Runtimesystem steuern.
Diese sind von der Version dieses 'Environments' abhaengig. So kann z.B. durch die Option '-Xmx256m'
der verfuegbare Speicher auf 256MB vergroessert werden (Default=64MB):
	"java -Xmx256m TSUtil ...."

Bemerkung: Seit der Java-Runtime-Version 1.5 ist die Default-Beschraenkung auf 64MB NICHT mehr gueltig.

Seit Version 3.4.10 kann TSUtil dazu genutzt werden, um die aktuell verwendete Version zu verifizieren. Mit dem Aufruf
	'java TSUtil "=x.x.xxy" ',
wobei 'x.x.xx' die geforderte Versionsnummer beschreibt und der OPTIONALE Wert 'y' die Buchstabenkennung einer
Unterversion angibt, kann geprueft werden, ob die aktuelle Version von TSUtil MINDESTENS der geforderten Version
entspricht. Falls dies der Fall ist, wird TSUtil mit der Endekennung 0 beendet. Andernfalls wird eine Endekennung von 1 oder
2 zurueckgegeben, je nachdem ob NUR die aktuelle Unterversion nicht passt(2) oder die Version selbst(1).

Eine Endekennung (ERRORLEVEL) von 5 oder groesser beschreibt grundsaetzlich einen Fehler innerhalb von TSUtil.

Vor den einzelnen Funktionspezifikationen, koennen jeweils GLOBALE OPTIONEN angegeben werden. Diese sind 
immer ohne Syntaxfehler angebbar, auch wenn eine einzelne Funktion diese Option nicht unterstuetzt.
Welche globale Option jeweils verwendet wird, ist in der Aufruf-Beschreibung der einzelnen Funktionen
angegeben. Folgende globale Optionen sind moeglich:

 -e		: Diese globale Option bewirkt, dass die Ausgabe von 'Hinweisen' und 'Warnungen' sowohl
			in der Log-Datei als auch auf dem Bildschirm unterdrueckt wird
 -j<sl1>[:<sl2>]
		: Diese globale Option spezifiziert, den/die 'StaticDetailLevel', der/die bei einer Korrektur
			eines 'SectionIDX'-Wertes verwendet werden soll(en). Wenn mit Hilfe des 'Joker'-
			Wertes fuer SectionIDX-Definitionen (4294967280) der korrekte SectionIDX-Wertes
			eines Track-Objektes restauriert wird, wird der StaticDetailLevel eines solchen
			World-Objektes normalerweise NICHT veraendert, es sei denn diese Option wurde
			spezifiziert. Dann wird der StaticdetailLevel eines restaurierten Track-Objektes
			auf den als 'sl1' spezifizierten Wert (1..9) geaendert und damit kann mit Hilfe einer
			lokalen Option eine Rueckwandlung vorgesehen werden.
			Wenn waehrend der Restauration eines Track-Objektes auch ein Pfad entfernt wird,
			wird statt 'sl1' die Angabe 'sl2' (1..9) fuer den StaticDetailLevel benutzt,
			falls diese angegeben ist. Ansonsten kommt ebenfalls der Wert 'sl1' zur Anwendung.
 -k		: Mit Hilfe dieser Option koennen die Kennungen der einzelnen Meldungen angezeigt werden.
			Sie bewirkt, dass bei der Ausgabe einer Meldung in die Log-Datei, dieser Meldung die
			Meldungskennung in geschweiften Klammern vorangestellt wird.
 -l[<logdat>]	: Mit dieser Option wird die Ausgabe der Verlaufs- und Fehlermeldungen auf eine
			LOG-Datei aktiviert. Wird optional der Name der LOG-Datei (<logdat>) NICHT
			angegeben oder ist ungueltig, so erfolgt die Ausgabe auf eine Datei mit dem FESTEN Namen
			"TSUtil.log", die im aktuellen Verzeichnis angelegt/ueberschrieben wird.
			Falls diese Option (erfolgreich) spezifiziert wird, hat die zusaetzliche Angabe einer
			Log-Datei (soweit moeglich) innerhalb des Funktionsaufrufs keine Wirkung.
			Funktionen, bei denen dies PRINZIPIELL noch moeglich ist, sind in der Funktionsliste
			(s.u.) mit '+' gekennzeichnet.
			Erfolgt die Angabe dieser Option mit einem GROSSEN Buchstaben ('-L') und ist die
			spezifizierte Log-Datei bereits vorhandenen, so wird die Ausgabe an diese Datei
			angehaengt. Ansonsten wird eine eventuell vorhandene Log-Datei geloescht.
 -m<id>		: Mit dieser Option kann die Ausgabe einzelner Meldungen sowohl in der Log-Datei als auch
			auf dem Bildschirm unterdrueckt werden. <id> ist dabei die Kennung der Meldung, deren
			Ausgabe unterdrueckt werden soll. Diese Kennung kann aus der aktuellen Datei
			"TSErrMsg_xx.properties" entnommen werden. Diese globale Option kann mehrmals angegeben
			werden.
			ACHTUNG: Bei der Angabe der Meldungskennung muss auf Gross-/Klein-Schreibung
				geachtet werden.
 -p<p>:<pfad>	: Mit Hilfe dieser Option werden Pfadangaben spezifiziert, die sowohl bei Umwandlung von
			Schienenobjekte in 'Hidewire'-Objekte als auch bei der Modifikation der Dateinamen
			von Schienenobjekte benutzt werden. "p" kann einen Wert zwischen '2' und '9' annehmen
			und spezifiziert die Nummer des Dateipfades, wie er in der lokalen Option referenziert
			wird.
			Die Pfadangabe zur Suche der Datenobjekte, die auf die Kennummer folgt, kann Platzhalter
			verwenden, die bei der Pruefung durch konkrete Werte ersetzt werden. Es gilt:
				%0 - <aktueller Routenname>
				%1 - "../../Routes/" (fester Wert)
				%2 - "../../Routes/<aktueller Routenname>/"
			ACHTUNG: Die Pfadangabe MUSS laenger als 8 Zeichen sein, damit sie akzeptiert wird.
				3.4.01: Wenn ein Pfad kuerzer als 8 Zeichen ist und unbedingt benutzt werden muss,
					kann er mit GENAU 8 vorangestellten '%'-Zeichen verlaengert werden. Eine
					solche Kennung wird ggf. entfernt.
			Zusaetzlich sind folgende Pfadangaben standardmaessig definiert:
				0: ../../Routes/<route>/Shapes/
				1: <route>/		(ergibt Suchpfad 'global/shapes/<route>')
			Diese Option kann mehrmals angegeben werden, um mehrere Dateipfade zu spezifizieren.
			Wird eine Kennnummer <p> mehrfach angegeben, so ueberschreibt der neue Pfad den fuer
			diese Kennnummer festgelegten Dateipfad.
			Beispiel: '-p4:../Basis/' definiert Zugriffspfad Nr. 4 als '<System>/Global/Basis/'
 -q<n>:<dref>	: Mit dieser Option wird die Zuordnung von Dateinummern zu konkreten Dateien spezifiziert,
			wie sie bei verschieden lokalen Optionen benoetigt werden. Dabei kann es sich bei dieser
			Dateireferenz auch um ein Verzeichnis handeln, je nachdem welche lokale Option diese
			Zuordnung verwendet. Welche lokale Optionen diese Zuordnung benutzen, wird in der
			betroffenen Option beschrieben.
			"n" kann einen Wert zwischen '0' und '9' annehmen und spezifiziert die Nummer der Datei/
			des Verzeichnisses, wie sie in der lokalen Option referenziert wird.
			"dref" spezifiziert den Dateipfad der Datei/des Verzeichnisses, das dieser Nummer zugeordnet
			werden soll. Die Angabe kann 'absolut' oder 'relativ' sein, je nachdem ob ein
			Laufwerksbuchstabe im Pfad spezifiziert wird oder nicht.
			Diese Option kann mehrmals angegeben werden, um mehrere Dateireferenzen zu spezifizieren.
			Wird eine Kennnummer <n> mehrfach angegeben, so ueberschreibt der neue Pfad den fuer
			diese Kennnummer festgelegten Dateipfad.
			Achtung: Wenn die Datei-/Verzeichnisangabe 'relativ' ist (kein Laufwerksbuchstabe) wird
				dieser Pfad als 'relativ zum TSUtil-Arbeitsverzeichnis' interpretiert.
			Beispiel: '-q4:Basis' definiert Verzeichnis Nr. 4 als '<TSUtil-Arbeitsverzeichnis>/Basis'
 -w		: Diese globale Option bewirkt, dass die Ausgabe von 'Hinweisen' sowohl in der Log-Datei
			als auch auf dem Bildschirm unterdrueckt wird.
 -y<h>		: Diese Option kann dazu benutzt werden, um die Hoehe der Oberleitung zu modifizieren. Wenn diese
			Option angegeben wird. ersetzt der Wert <h> den Wert fuer die Hoehe der Oberleitung, der
			in der Strecken-Steuerungsdatei ('*.trk') spezifiziert ist.
			Erfolgt die Angabe dieser Option mit einem GROSSEN Buchstaben ('-Y'), so wird der Wert <h> auf
			den spezifizierten Wert ADDIERT, anstatt ihn zu ersetzen.
			Falls in der Strecken-Steuerungsdatei ('*.trk') kein Wert fuer die Oberleitungshoehe
			verwendet wird, hat diese Option keine Wirkung.
			Achtung: Damit der neue Wert fuer die Hoehe auch aktiv wird, muss die verwendete Funktion die
				Strecken-Steuerungsdatei neu erstellen (schreiben). Dies ist NICHT bei allen 
				Funktionen der Fall.

Weiterhing gibt es 'erweiterte' globale optionen, die durch ein vorangestelltes '$' gekennzeichnet sind und die sich
in weiteren Version wieder aendern koennen. Diese sind:

 -$B		: Diese Option aktiviert den Batch-Modus, der alle Abfragen des Nutzers unterdrueckt.
 -$C<txt>	: Diese Option fuegt den Text "<txt>" in die Log-Datei ein. Damit kann z.B. eine benutzte Prozedur
			in der Log-Datei gekennzeichnet werden.
 -$D<XMask>:<YMask>	: Diese Option wird zusammen mit dem 'Correction-Mode' von TSUtil benutzt. Weitere
				Erklaerungen koennen im Anhang A nachgelesen werden.
 -$E[<fnme>]	: Diese Option veranlasst die Ausgabe von Java-Systemfehlermeldungen auf die Datei "<fnme>". Falls
			die Datei nicht angegeben wird, wird 'TSUtil.err' benutzt.
 -$F<val>	: Diese Option specifiziert den Wert, der zum Erstellen der E-/A-Puffer benutzt wird. Dieser Wert muss
			ein vielfaches von 4096 sein. Falls nicht wird er aufgegundet.
 -$I<nr>	: Diese Option specifiziert die maximale Anzahl von Iterationen die zur Ein- oder Ausgabe von Shape,
			Tile oder World-Dateien benutzt wird. Falls innerhalb einer solchen Datei die Objekte tiefer
			als 30-fach (Default-Wert) geschachtelt sind, sollte dieser Wert erhoeht werden.
			(normalerweise NICHT notwendig)
 -$S		: Falls diese Option spezifiziert wird, erfolgt die Ausgabe der Schienendatenbank formatiert in einer
			besser lesbaren Form. Dazu wird zwischen jede Section-Definiton ein Zeilenumbruch eingefuegt.
 -$T		: Wenn diese Option angegeben ist, wird VOR und NACH der Aufuehrung der selektierten Funktion ein
			Zeitstempel (timestamp) auf der Konsole und in der LOG-Datei ausgegeben.
 -$X		: Diese Option schaltet die Ausgabe von zusaetzlich Meldungen ein, die normalerweise nur zu
			Testzwecken verwendet werden.
 -$Z		: Diese Option unterdrueckt die Ausfuehrung der spezifizierten Funktion. Nach der Pruefung der
			spezifizierten Parameter wird TSUtil wieder beendet. 
 -$$PTol(<nr>)	: Diese Option modifiziert der Wert, der als 'Pfad-Tollernz' aktiv ist (normalerweise 0.5). Dieser
			wird benutzt um die Zuordnung von Pfad-Knoten zu den Knoten der Schienendatenbank zu pruefen.
 -$$PrMsk(<hv>)	: Diese hexadezimale Maske wird benutzt um zu entscheiden, welche internen Tabellen von TSUtil
			- falls durch eine lokale Option gefordert - in die LOG-Datei aufgenommen werden sollen.
			Der Default-Wert ist 'FFFFFFFF', wodurch ALLE Systemtabellen betroffen sind.
 -$$Dist(<nr>)	: Diese Option ueberschreibt den Schwellwert, der zur Pruefung von Weichen-Abstaenden der Funktion
			'ichk' benutzt wird. (Default: 0.99)


Damit sieht der Aufruf von TSUtil insgesamt wie folgt aus:
	java [<system-optionen>] TSUtil [<globale-optionen>] <funktionsname> [<lokale-optionen>] ...

Seit Version 3.4.01 ist auch eine grafische Oberflaeche verfuegbar. Diese wird mit dem Aufruf
	java [<system-optionen>] TSUtilDlg
aktiviert. Auf dieser Oberflaeche kann die Funktion ausgewaehlt und die Eingabeparameter fuer diese Funktion
zusammengestellt werden.

Hinweis: Ab sofort ist das Utility auch in Form einer jar-Datei verfuegbar. Derjenige, der sich
	damit auskennt, kann die einzelnen Funktionen auch aus dieser jar-Datei aktivieren. Damit
	ist zum Aufruf auch eine Verknuepfung erstellbar.
	z.B: "javaw -jar [<system-optionen>] TSUtil.jar ..."
	     "java -jar [<system-optionen>] TSUtil.jar ..."


Folgende Funktionen sind in der aktuellen Version verfuegbar (Nummer der Beschreibung in Klammern):
+	- adjh    : Anpassen der Hoehendefinitionen einer Strecke (16)
$	- chgdb   : Modifizieren der Schienendatenbank "*.tdb" (6)
	- chgsig  : Austauschen/Modifizieren der Signaldefinitionen einer Route (25)
+	- chkup   : Pruefen zweier globaler 'tsection.dat'-Dateien auf Kompatibilitaet (15)
+	- clrdb   : Bereinigen der Resourcendefinitionen einer Strecke (20)
	- cmkr    : Erstellen einer Marker-Datei (4)
+	- cmp     : Komprimieren/Reduzieren von Dateien (S,T,W) in das binaer-Format (17)
$+	- cmpw    : Komprimieren der World-Dateien durch das Programm "Comp" von Martyn Griffin (10)
+*	- cvrt    : Konvertieren und Anpassen einer Streckendefinition (5)
	- dcpy    : Selektives Kopieren von Dateien (7)
	- filter  : Pruefen und Korrigieren der Geometrie-Definition einer Strecke (9)
	- fcpy    : Kopieren und Modifizieren von Dateien-/Dateigruppen (S,T,W) (29)
	- fmgr    : Komprimiern/Dekomprimieren/Reduzieren/Expandieren von Dateigruppen (S,T,W) (24)
+*	- ichk    : Integritaetspruefung einer Streckendefinition (12)
+	- merge   : Mischen einer Streckendefinition in eine andere (19)
+*	- move    : Verschieben einer Streckendefinition (14)
*	- mveobj  : Selektives Verschieben von Streckenobjekten ueber Quadrantengrenzen (27)
+	- rendb   : Neunumerierung der Schienen-/Strassendatenbank (13)
	- shftdyn : Verschieben der dynamischen Definitionen aus der lokalen 'tsection.dat' (22)
	- shift   : Verschieben von Shape/Section-Bereichen in der globalen 'tsection.dat' (8)
	- srchsig : Protokollieren der Positionen aller Signaldefinitionen (26)
	- testsig : Pruefen einer Signaldefinition unabhaengig von einer Strecke (30)
*	- tsconv  : Umwandeln ALLER Strecken in einer TS-Instanz (11)
+	- unc     : Dekomprimieren/Expandieren von Dateien (S,T,W) (18)
	- version : Anzeigen/Ausgeben der Versionsidentifikationen der TSUtil-Klassen (23)
$	- wcmp    : Komprimieren der World-Dateien in das binaer-Format (2)
$	- wcmpo   : Komprimieren der World-Dateien in das binaer-Format (only) (3)
	- world   : Aufteilen und Zusammenfuegen von World-Dateien (28)
$	- wunc    : Dekomprimieren der World-Dateien (1)
	- zusi    : Aufbereiten einer Streckendefinition fuer den Import nach ZUSI (21)

* - Diese Funktionen bilden den Hauptteil des vorliegenden Utilities.
$ - Diese Funktionen sind nur aus Kompatibilitaetsgruenden weiter vorhanden. Bitte nicht mehr verwenden.

Sofern nicht anderweitig beschrieben, werden die Ergebnisse der einzelnen Funktionen als Kopie in
einem neuen Verzeichnis ('\newRoute') abgelegt. Die Dateistruktur einer Streckendefinition wird dabei
beibehalten und die Unterverzeichnisse werden entsprechend erzeugt. Alle Funktionen so so designed, dass
ein TDB-Rebuild vermieden werden kann.

Es gilt jedoch: NUR wenn TSUtil KEINE Fehler meldet, die an dem Vorlauf "--->" erkennbar sind, ist
garantiert, dass alle notwendigen Aenderungen in den neu erzeugten Daten auch durchgefuehrt wurden.
Es ist jedoch moeglich, dass trotz Fehlermeldungen die Funktion korrekte Ergebnisse geliefert hat.

Begriffsbestimmungen:
  Nebenbahnschiene
	Eine Nebenbahnschiene ist ein Schienenobjekt('TrkObkj'), das in der World-Datei als statisches
	Objekt ('Static') definiert wird. Es enthaelt aber weiterhin ALLE Eigenschaften eines
	Schienenobjektes und ist auch in der Schienendatenbank eingetragen. Eine Nebenbahnschiene zeigt
	KEINE Oberleitung auch wenn die Strecke elektrifiziert ist.
	Ein solches Objekt wird - in Anlehnung an das Tool, das diese Objekte zuerst erstellt hat - auch
	'Hidewire-Objekt' genannt (insbesonders in den Meldungen).

1) Dekomprimieren der World-Dateien
  **** FUNKTION BITTE NICHT MEHR VERWENDEN ****
  Mit der Funktion "wunc" kann man veranlassen, dass ALLE World-Dateien in die
  "unkomprimierte Textform" (UT-Form) d.h. in die Form, die man mit dem Editor direkt
  bearbeiten kann, umgewandelt werden.
  Dazu erstellt das Programm intern eine Liste der World-Dateien, prueft in welcher Form
  diese vorliegen und konvertiert sie ggf. durch einen oder mehrere Aufrufe von
  "ffedic_unicode" in die richtige Form.

  Der Aufruf sieht folgendermassen aus:
	C>java TSUtil [{-e|-w}] [-k] [-l[<logdat>]] [-m<id>] [-p<p>:<pfad>] [-q<n>:<dref>] wunc <verz>
  Hierbei gilt:
	"verz" ist der Dateipfad auf die Streckendefinition, die die World-Dateien enthaelt
	Bezueglich der globalen Optionen vergleiche 'Einleitung'

  z.B. fuer ProTrain 1: "java TSUtil -lC:\Logdat.log wunc C:\TRSim\routes\ProTrain_Rheintal"

  Einsatz der erzeugten Daten:
	- Dateien im Verzeichnis 'world' der Strecke mit den Dateien aus dem Verzeichnis
		'newRoute/world' ueberschreiben.

2) Komprimieren der World-Dateien in das binaer-Format
  **** FUNKTION BITTE NICHT MEHR VERWENDEN ****
  Mit der Funktion "wcmp" kann man veranlassen, dass ALLE World-Dateien in die
  "komprimierte Binaerform" (KB-Form) d.h. in eine Form, die die Ladezeiten optimiert,
  umgewandelt werden.
  Dazu erstellt das Programm intern eine Liste der World-Dateien, prueft in welcher Form
  diese vorliegen und konvertiert sie ggf. durch einen oder mehrere Aufrufe von
  "ffeditc_unicode" in die richtige Form. Hierzu werden die Dateien ERST in die UT-Form (vgl. 1)
  umgewandelt um danach durch einen zusaetzlichen Aufruf von "ffeditc_unicode" in die KB-Form
  komprimiert zu werden.

  Der Aufruf sieht folgendermassen aus:
	C>java TSUtil [{-e|-w}] [-k] [-l[<logdat>]] [-m<id>] [-p<p>:<pfad>] [-q<n>:<dref>] wcmp <verz>
  Hierbei gilt:
	"verz" ist der Dateipfad auf die Streckendefinition, die die World-Dateien enthaelt
	Bezueglich der globalen Optionen vergleiche 'Einleitung'

  z.B. fuer ProTrain 1: "java TSUtil -lC:\Logdat.log wcmp C:\TRSim\routes\ProTrain_Rheintal"

  Einsatz der erzeugten Daten:
	- Dateien im Verzeichnis 'world' der Strecke mit den Dateien aus dem Verzeichnis
		'newRoute/world' ueberschreiben.

3) Komprimieren der World-Dateien in das binaer-Format (only)
  **** FUNKTION BITTE NICHT MEHR VERWENDEN ****
  Mit der Funktion "wcmpo" werden - wie in der vorangehenden Funktion - die World-Dateien
  in die "komprimierte Binaerform" (KB-Form) umgewandelt. Im Gegensatz zur vorangehenden 
  Funktion (vgl. 2) werden jedoch NUR die World-Dateien durch einen Aufruf von
  "ffeditc_unicode" umgewandelt, die in der UT-Form (vgl. 1) vorliegen. ALLE anderen World-
  Dateien werden NICHT veraendert.

  Der Aufruf sieht folgendermassen aus:
	C>java TSUtil [{-e|-w}] [-k] [-l[<logdat>]] [-m<id>] [-p<p>:<pfad>] [-q<n>:<dref>] wcmpo <verz>
  Hierbei gilt:
	"verz" ist der Dateipfad auf die Streckendefinition, die die World-Dateien enthaelt
	Bezueglich der globalen Optionen vergleiche 'Einleitung'

  z.B. fuer ProTrain 1: "java TSUtil -lC:\Logdat.log wcmpo C:\TRSim\routes\ProTrain_Rheintal"

  Einsatz der erzeugten Daten:
	- Dateien im Verzeichnis 'world' der Strecke mit den Dateien aus dem Verzeichnis
		'newRoute/world' ueberschreiben.

4) Erstellen einer Marker-Datei
  Bei Verwendung der Kartenserie "TOP50" ist es moeglich einzelne Koordinaten in eine
  Datei abzuspeichern. Die dort erzeugte Datei erhaelt die Endung ".coo".
  Mit dieser Funktion ist es moeglich, diese Datei in eine Marker-Datei umzuwandeln.

  Der Aufruf sieht folgendermassen aus:
	C>java TSUtil [-m<id>] cmkr [-4] <datei>
  Hierbei gilt:
	"datei" ist der Dateiname mit Pfad und OHNE Endung der Datei, die die
		Koordinatendefinitionen enthaelt
        Die Option '-4' spezifizert, dass die Ausgangsdatei '*.coo' vom Top50-Programm der
		Version 4 erzeugt wurde. Ist diese Option NICHT angegeben, so wird davon
		ausgegengen, dass die Datenzeilen vom Top50-Programm der Version 3 erzeugt wurden
		und damit keine Hoehendaten (ausser ggf. im Kommentar) enthalten sind.
	Bezueglich der globalen Optionen vergleiche 'Einleitung'

  z.B. : "java TSUtil cmkr C:\koord"
	Hier wird die Datei "C:\koord.coo" in die Markerdatei "C:\koord.mkr" umgewandelt.

  Hinweis: Fuer die Umwandlung wird ausschliesslich Markertyp "2" benutzt.

  Einsatz der erzeugten Daten:
	- Datei ggf. umbenennen und in das Hauptverzeichnis der Strecke verschieben

5) Konvertieren und Anpassen einer Streckendefinition 
  Mit dieser Funktion("cvrt") ist es moeglich, verschienden Aenderungen und Anpassungen an einer
  Streckendefinition durchzufuehren. Dies schliesst auch eine Aenderung durch einen Austausch der
  globalen Datei "tsection.dat" ein. Weiterhin kann auch z.B. eine Neu-Numerierung der
  UiD-Kennungen erfolgen. Weitere Aenderungen werden durch entsprechende Optionen dieser Funktion
  ausgeloest die wie folgt lauten:
	'-a'/'-A'	Automatisches Erstellen statischer Objekte (Schienenbegleitobjekte)
	'-b'		Anpassung der Strecke an eine neue globale 'tsection.dat'-Datei
	'-c'		Schreiben der Zieldateien im komprimierten Format [CB]
	'-f'/'-F'	Unterdruecken des Fahrdrahtes nach dem SectionIDX-Verfahren
	'-g'/'-G'	Konvertieren von statischen Ojekten in Objekte das Typs 'Gantry'
	'-h'/'-H'	Unterdruecken des Fahrdrahtes nach dem Hidewire-Verfahren
	'-k'		Verwenden des Korrekturmodus
	'-l'/'-L'	Modifizieren des aktuellen 'StaticDetailLevel's
	'-m'/'-M'	Modifizieren des Dateinamens von Schienen-/Strassenobjekten
	'-n'/'-N'	Unterdrueckung saemtlicher Modifikationen von Schienen-/Strassenobjekten
	'-o'/'-O'	Veraendern des aktuellen 'StaticFlag'-Wertes
	'-r'		Neues Numerieren der Objekte innerhalb der World-Dateien
	'-s'		Pruefen der Existenz der verwendeten Schienen-/Strassenobjekte
	'-u'		Schreiben der Zieldateien im unkomprimierten Format [UT]
	'-v'		Zuordnung von Objekten innerhalb der 'tsection.dat'-Versionen
	'-w'		Generieren von fehlenden World-Dateien
	'-z'		Erweiterte ERKENNUNG von modifizierten Schienen-/Strassenobjekten

  Falls eine Aenderung der globalen '"tsection.dat" korrigiert werden soll, sind folgende 
  Voraussetzungen notwendig, damit diese Funktion korrekt laeuft:
	- Die originale globale "tsection.dat", mit der die betroffene Strecke definiert
		und bearbeitet wurde, muss noch verfuegbar sein.
	- Die neue modifizierte globale "tsection.dat" muss sich im Verzeichnis
		"global" befinden und damit aktiv sein.
  Diese Funktion erkennt auch reine Veraenderungen wie den Austausch von Shape-Definitionen
  und korrigiert automatisch die Referenzen. Um eine Zuordnung (alt-neu) jedoch einwandfrei
  feststellen zu koennen ist es notwendig, dass INNERHALB der Shape-Definitionen keine
  Veraenderung der Reihenfolge der Suboptionen(z.B. SectionIdx) erfolgt ist. Falls eine
  Zuordnung im Einzelfall nicht moeglich ist (z.B. wegen Fehlerkorrektur), kann diese mit
  Hilfe der Option '-v' auch manuell erfolgen. 

  Diese Funktion modifiziert sowohl die besiedelten World-Dateien als auch die Schienendatenbank
  und die Strassendatenbank und erstellt sie neu. Ausserdem wird im gleichen Verzeichnis eine neue
  "lokale" tsection.dat-Datei erzeugt. Damit ist es NICHT notwendig, die Schienendatenbank neu
  aufbauen zu lassen.

  Wenn keine Aenderungen an der globalen "tsection.dat" erfolgt sind, kann die Referenz
  (-b-Option) weggelassen werden. Damit sind nur Aktionen wie Neu-Numerierung der
  UiD-Kennungen und Beseitigung von Luecken in der lokalen tsection.dat aktiv. Eine
  Umnumerierung der dynamischen Track-Definitionen erfolgt nicht mehr.

  Der Aufruf sieht folgendermassen aus:
	C>java TSUtil [{-e|-w}] [-k] [-l[<logdat>]] [-m<id>] [-p<p>:<pfad>] [-q<n>:<dref>] cvrt [-@<idat>]
		[{-A|-a}<sl1>:<s1>:<sl2>:[p2]:[<sl3>]:<s2>[:[<s3>][:<s4>]]] [-b<datei>] [{-c|-u}]
		[{{-n|-N} | {-f|-F}{1|2|3}:<shnr>[:[<p2>]:<s1>:[<s2>]]
			  | {-h|-H}{1|2|3}[:[<p1>][:[<p2>]:<s1>:[<s2>]]]}] [{-g|-G}<s>] [-k]
		[-{l|L}<m>:<s>:<sll>:<sl>]]
		[-{m|M}[<sl>:[<p2>]:<s1>:[<s2>]]] [-{o|O}<m1>:<s>:<m2>[:<m3>]]
		[-r] [-s] [-v<nr1>:<nr2>] [-w] [-z{1|2|3}[:<s1>:[<s2>]]] <verz>
  Hierbei gilt:
	"verz" ist der Dateipfad auf die Streckendefinition
	"datei" ist der Dateiname (mit Pfad) der ALTEN "tsection.dat"-Datei. Diese Datei muss nicht
		zwingenderweise als 'tsection.dat' benannt sein.
	"idat" ist der Dateiname (mit Pfad) einer Textdatei, die weitere Optionen enthaelt. Der gesamte Inhalt
		dieser Datei wird dadurch Teil der Kommandozeile zur Aufruf der Funktion. Die lokalen Optionen,
		die in der Optionendatei gespeichert sind, haben die gleiche Form als wenn sie in der Kommandozeile
		stuenden(d.h.: '-' wird immer benoetigt). Die Optionen koennen in der Datei auf mehrere Zeilen
		aufgeteilt werden.
	Option '-a'/'-A' kann verwendet werden, um automatisch statische Objekte zu erstellen. Unter Verwendung
		einer statischen Schienendefinition als Vorlage, koennen bis zu 3 statische Objekte an der GLEICHEN
		Position und mit GLEICHER Richtung erzeugt werden. Die so verwendeten Schienendefinitionen
		werden mit einem waehlbaren 'StaticDetailLevel' gekennzeichnet. Weiterhin wird mit Hilfe der
		Attribute 'Dieses Objekt animieren' und 'Kollision mit Objekten' die Anzahl der zu generierenden
		statischen Objekte selektiert.
		Auf die Option '-a'/'-A' folgt eine Zahl ("sl1"), die den geforderten 'StaticDetailLevel' des
		Schienenelementes angibt. Es sind hier alle Werte zwischen '0' und '9' erlaubt. Damit die
		Spezifikation zutrifft, ist es weiterhin notwendig, dass der Dateinamen der Schienendefinition
		der Vorgabe entspricht, die als Datenkette "s1" angegeben wird. Dabei wird die Gross-/Klein-
		Schreibung NICHT beachtet. Im Fall '-a' ist dies der Fall, wenn der Dateinamen mit der
		Zeichenkette aus "s1" BEGINNT. Im Fall '-A' enthaelt "s1" einen 'regulaeren Ausdruck' (vgl. Anhang B),
		der fuer den gesamten Dateinamen zutreffen muss (match).
		Wenn diese Vorraussetzungen erfuellt sind, wird dieses Schienenobjekt zu Erzeugung von statischen
		Objekten benutzt und der 'StaticDetailLevel' auf den Wert zurueckgesetzt, der mit "sl2" angegeben
		wird. Sind diese Bedingungen NICHT erfuellt, so wird mit der naechsten '-a'/-A'-Option
		weiterversucht.
		Die Angabe "s2" wird benutzt, um den Dateinamen des zu erzeugenden statischen Objektes zu erstellen.
		Im Fall '-a' wird der Teil "s1" des Dateinamens aus der Vorlage entfernt und durch "s2" ersetzt.
		Im Fall '-A' wird der Dateiname aus der Vorlage gemaess den Angaben aus "s2" erstellt, wobei
		Rueckverweise auf den Originalnamen moeglich sind(Capture-Group).
		Der Dateiname des erstellten statischen Objektes, kann OPTIONAL mit einem Zugriffspfad versehen
		werden.	"p2" gibt die Pfadnummer eines solchen Pfades an, der mit Hilfe der GLOBALEN Option '-p'
		definiert wurde. Weiterhin erhaelt das statische Objekt den 'StaticDetailLevel', der als "sl3"
		angegeben wird. Ist dieser NICHT spezifiziert, wird der 'StaticdetailLevel' der Vorlage benutzt.

		Ist eines der o.g. Attribute der Vorlage aktiviert, wird versucht, weitere statische Objekte
		zu erzeugen. Dabei wird zur Bildung des Dateinamens statt der Zeichenkette "s2", die Zeichenkette
		"s3" bzw. "s4" verwendet. Diese muessen dann spezifiziert sein. Falls nicht, wird ein Fehler
		erzeugt.
		Das Objekt, das unter Verwendung der Zeichenkette "s4" erstellt wird, enthaelt jedoch eine
		Besonderheit. Dieses Objekt wird NICHT unter Verwendung der Originalkoordinaten/Richtung des
		Ausgangsobjektes erstellt, sondern Richtung und Position werden auf das ENDE der Vorlage
		umgerechnet. d.h.: dieses Objekt wird an das Ende der Schiene positioniert.

		Alle drei Zeichenketten "s2","s3" und"s4" koennen mit einer Kennung versehen werden, die die
		Installation aller Dateien, deren Dateiname mit dieser Anweisung erzeugt wird, veranlasst. Dazu wird
		dieser Zeichenkette eine Ziffer zwischen 0 und 9, direkt gefolgt von "=" vorangestellt. Diese
		Ziffer selektiert eines der, mit der globalen Option '-q' spezifizierten, Quellverzeichnisse und kopiert
		die entsprechende Shape-Datei aus diesem Verzeichniss nach '<route>/shapes'.
		Die Kennung wird aus der Zeichenkette entfernt, bevor sie, wie oben angegeben, verwendet wird.
		Achtung: Eventuell benoetigte Textur-Definitionen werden NICHT automatisch installiert.

		Option '-a'/'-A' kann mehrfach angegeben werden, auch wenn der gleiche 'StaticDetailLevel' benutzt
		wird.

		Beispiel: '-a4:A1:0:::NR_Ramp1' - Statische Schienendefinitionen, die einen 'StaticDetailLevel'
			von 4 haben, und deren Dateiname mit 'A1' beginnt, werden als Vorlage zur Erzeugung
			von statischen Objekten benutzt. In diesem Fall wird ein Objekt erzeugt, dessen Dateiname
			mit 'NR_Ramp1' beginnt. ('A1t10mStrt.s' ergibt 'NR_Ramp1t10mStrt.s')
			Der StaticdetailLevel der Vorlage wird auf '0' gesetzt.
		Beispiel: '-A4:^A(\d)(.*)\.s$:0::3:NR_Emb$1$2_lft.s:NR_Emb$1t_Start.s' - Wie oben; jedoch die
			erzeugten Objekte erhalten einen 'StaticDetailLevel' von 3. Falls fuer die Schiene das
			Attribut 'Dieses Objekt animieren' gesetzt ist, werden zwei Objekte generiert.
			('A2t10mStrt.s' ergibt 'NR_Emb2t10mStrt_lft.s' und (ggf.) 'NR_Emb2t_Start.s')
			('A3t10mStrt.s' ergibt 'NR_Emb3t10mStrt_lft.s' und (ggf.) 'NR_Emb3t_Start.s')
		Erlaeuterung: 'A2t10mStrt.s' ->	'2' ist die erste capture-group (\d), referenziert durch $1
						't10mStrt' ist die zweite capture-group (.*) (ref=$2)
						==> 'NR_Emb'+'2'+'t10mStrt'+'_lft.s' = 'NR_Emb2t10mStrt_lft.s'
			      'A3t10mStrt.s' ->	'3' ist die erste capture-group
						't10mStrt' ist die zweite capture-group
						==> 'NR_Emb'+'3'+'t10mStrt'+'_lft.s' = 'NR_Emb3t10mStrt_lft.s'
		Beispiel: '-A4:^A(\d)(.*)\.s$:0::3:0=NR_Emb$1$2_lft.s:0=NR_Emb$1t_Start.s'
			Dieses Beispiel entspricht von der Wirkung her exakt dem vorangehenden Beispiel. Zusaetzlich
			werden jedoch alle benutzten Shapes aus dem Installationsverzeichnis mit der Kennnummer '0'
			(vgl. globale Option '-q') installiert.
	Wenn die Option '-c' angegeben wird, werden die World-Dateien (*.w) auf jeden Fall in
		der komprimierten Binaer-Version [KB] geschrieben. Normalerweise, werden World-Dateien
		im selben Format geschrieben, wie sie auch gelesen wurden. Diese Option wird durch
		die Angabe von '-u' ggf wieder zurueckgesetzt.
	Wenn die Option '-u' angegeben wird, werden die World-Dateien (*.w) auf jeden Fall in
		der unkomprimierten Text-Version [UT] geschrieben. Normalerweise, werden World-Dateien
		im selben Format geschrieben, wie sie auch gelesen wurden. Diese Option wird durch
		die Angabe von '-c' ggf wieder zurueckgesetzt.
	Die Option '-n' (oder '-N') (von 'normalize') wird verwendet, um die Umwandlung von Schienendefinitionen in
		statische Objekte, den Nebenbahnschienen, zu unterdruecken. (vgl. auch 'Hidewire')
		Normalerweise werden alle Objekte, die bereits als Nebenbahnschiene definiert waren und zur
		Prüfung in ein 'TrackObj' zurueckgewandelt wurden, wieder in eine Nebenbahnschiene konvertiert.
		Wenn die Option '-n' angegeben wird, wird die Rueckwandlung unterdrueckt und das Objekt
		wird - je nach Verfahren - als 'TrkObj- oder 'DynTrack'-Definition ('-h'/'-H') oder als KORREKTE
		'TrkObj- / 'DynTrack'-Definition ('-f'/'-F') in die World-Datei eingetragen. Eventuelle Modifikationen
		des Dateinamens gehen verloren und der Fahrdraht wird wieder angezeigt. In diesem Fall kann WEDER die
		Option '-h'/'-H' NOCH die Option '-f'/'-F' zusaetzlich angegeben werden.
		Die Option '-n' enthaelt keine weiteren Angaben.
		Die Verwendung von Option '-n' impliziert die Aktivierung von Option '-m' (ohne Argumente), um
		eine eventuelle Modifikation der Dateinamen zurueckzunehmen.

	Die Option '-g'/'-G' kann dazu benutzt werden, um statische Objekte in Objekte des Typs 'Gantry' zu konvertieren.
		Dazu wird eine Datenkette "s" spezifiziert, die mit den Dateinamen der statischen Objekte 
		verglichen wird und so geprueft wird, ob dieses Objekt konvertiert werden soll. Im Fall '-g'
		ist dies der Fall, wenn der Dateiname mit der Zeichenkette aus "s" BEGINNT. Im Fall '-H' enthaelt
		"s" einen 'regulaeren Ausdruck'(vgl. Anhang B), der fuer den gesamten Dateinamen zutreffen muss (match).
		In beiden Fällen wird bei der Pruefung des Dateinamens die Gross-/Klein-Schreibung NICHT beachtet.

		Fall diese Pruefung positiv ist, wird das statische Objekt in ein 'Gantry'-Objekt umgewandelt, das die
		gleiche Position und die gleiche Richtung wie das Originalobjekt hat.

	Die Option '-h'/'-H' wird verwendet, um Schienendefinitionen in statische Objekte, den Nebenbahnschienen,
		umzuwandeln. (vgl. auch 'Hidewire')
		Normalerweise werden alle Objekte, fuer die (durch TSUtil) der Fahrdraht bereits unterdrueckt wurde,
		zur Prüfung in ein KORREKTES 'TrackObj'-/'DynTrack'-Objekt zurueckgewandelt und dannach wird diese
		Korrektur wieder zurueckgenommen.
		Die Option '-h'/'-H' spezifiziert, dass weitere 'TrkObj'-Definitionen in eine statische
		Schienenrepraesentation (Hidewire-Objekt) gewandelt werden sollen. In dieser Option wird in
		Folge eine Zahl(1,2,3) angegeben, die den 'StaticDetailLevel' einer 'TrackObj'-Definition,
		die in eine Nebenbahnschiene konvertiert werden soll, selektiert. Nur Schienenobjekte
		('TrackObj'), die den angegeben Level haben, werden in eine solche (statische) Definition
		konvertiert. Dann, und nur dann, ist auch die Modifikation des Dateinamens dieses Objektes
		moeglich. Damit diese Aenderung des Namens erfolgt, ist es notwendig, dass eine Datenkette "s1"
		angegeben wird und der Dateinamen dieser Spezifikation entspricht. Im Fall '-h' ist dies der Fall,
		wenn der Dateinamen mit der Zeichenkette aus "s1" BEGINNT. Dann und nur dann wird dieser Teil des
		Dateinamens durch die Datenkette "s2" ersetzt. Falls "s2" nicht angegeben ist, wird eine Nullkette
		("") verwendet. Im Fall '-H' enthaelt "s1" einen 'regulaeren Ausdruck'(vgl. Anhang B), der fuer den
		gesamten Dateinamen zutreffen muss (match). Dann wird der Dateiname gemaess den Angaben aus "s2"
		modifiziert, wobei Rueckverweise auf den Originalnamen moeglich sind(Capture-Group). "s2" MUSS
		angeben werden, falls '-H' verwendet wird.
		In beiden Fällen wird bei der Pruefung des Dateinamens die Gross-/Klein-Schreibung NICHT beachtet.

		Fuer jeden moeglichen 'StaticdetailLevel'(1,2,3) kann genau eine Option '-h'/'-H' oder '-f'/'-F'
		angegeben werden. Falls '-h'/'-H' spezifiziert wird, kann '-N'/'-n' nicht mehr verwendet werden.
		Der Dateiname eines umgewandelten Objektes, kann OPTIONAL mit einem Zugriffspfad versehen werden.
		"p1" und "p2" geben die Pfadnummer eines solchen Pfades an, der mit Hilfe der GLOBALEN Option
		'-p' definiert wurde. "p1" wird dabei dem Dateinamen des Objektes hinzugefuegt, wenn eine
		Umwandlung in eine statische Schienenrepraesentation stattfindet. "p2" wird GENAU DANN dem
		Dateinamen hinzugefuegt, wenn eine Modifikation des Dateinamens stattfindet UND "p1" NICHT
		angegeben wurde.

		Beispiel: '-h1::0:A:Xt' - Alle Schienenobjekte, die einen 'StaticDetailLevel' von 1 haben,
			werden in eine Nebenbahnschiene umgewandelt. Falls der Dateiname dieser Definition
			mit 'A' beginnt, wird dieses 'A' durch 'Xt' ersetzt. (A1t10mstrt.s -> Xt1t10mstrt.s)
			Weiterhin wird genau dann der Zugriffspfad 0 = "../../Routes/<route>/Shapes/" hinzugefuegt.
			(Dateiname= '../../Routes/<route>/Shapes/Xt1t10mstrt.s')
		Achtung: Falls das Veraendern des Dateinamens aktiv ist, wird der originale Dateiname mit
			dem Schluesselwort 'TreeTexture' zusaetzlich in das World-Objekt eingefuegt. Dieses
			Schluesselwort wird bei statischen Objekten ignoriert und wird verwendet, um die
			Aenderung des Dateinamens wieder rueckgaengig machen zu koennen.
	Die Option '-f'/'-F' wird verwendet, um bei Schienendefinitionen die Ausgabe des Fahrdrahtes zu
		unterdruecken. Dazu wird ein Verfahren verwendet, das von der Fa. BSI eingefuehrt
		wurde und das die Veraenderung des SectionIDX-Wertes in der World-Definition auf den Wert einer
		Strassendefinition zur Unterdrueckung des Fahrdrahtes ausnutzt. (Strassen haben KEINEN
                Fahrdraht. Dieses Verfahren kann sowohl auf 'TrkObj'- als auch auf 'DynTrack'-Definitionen angewendet
		werden.
		Normalerweise werden alle Objekte, fuer die (durch TSUtil) der Fahrdraht bereits unterdrueckt wurde,
		zur Prüfung in ein KORREKTES 'TrackObj'-/'DynTrack'-Objekt zurueckgewandelt und dannach wird diese
		Korrektur wieder zurueckgenommen.
		Die Option '-f'/'-F' spezifiziert, dass weitere 'TrkObj'- / 'DynTrack'-Definitionen mit einer
		veraenderten SectionIDX-Kennung versehen werden und damit der Fahrdraht unterdrueckt werden soll.
		In dieser Option wird in Folge eine Zahl(1,2,3) angegeben, die den 'StaticDetailLevel' einer
		'TrackObj'-Definition selektiert, fuer die der SectionIDX-Eintrag veraendert werden soll.
		Nur Schienenobjekte ('TrackObj'/DynTrack'), die den angegeben Level haben, werden modifiziert
		und damit der Fahrdraht unterdrueckt. Dann, und nur dann, ist auch die Modifikation des
		Dateinamens dieses Objektes moeglich. Damit diese Korrektur des Namens erfolgt, ist es notwendig,
		dass eine Datenkette "s1" angegeben wird und der Dateinamen dieser Spezifikation entspricht. Im Fall
		'-f' ist dies der Fall, wenn der Dateinamen mit der Zeichenkette aus "s1" BEGINNT. Dann und nur dann
		wird dieser Teil des Dateinamens durch die Datenkette "s2" ersetzt. Falls "s2" nicht angegeben ist,
		wird eine Nullkette ("") verwendet. Im Fall '-F' enthaelt "s1" einen 'regulaeren Ausdruck'
		(vgl. Anhang B), der fuer den gesamten Dateinamen zutreffen muss (match). Dann wird der Dateiname
		gemaess den Angaben aus "s2" modifiziert, wobei Rueckverweise auf den Originalnamen moeglich sind
		(Capture-Group). "s2" MUSS angeben werden, falls '-F' verwendet wird.
		In beiden Fällen wird bei der Pruefung des Dateinamens die Gross-/Klein-Schreibung NICHT beachtet.

		Fuer jeden moeglichen 'StaticdetailLevel'(1,2,3) kann genau eine Option '-f'/'-F' oder '-h'/'-H'
		angegeben werden. Falls '-f'/'-F' spezifiziert wird, kann '-n'/'-N' nicht mehr verwendet werden.
		Der Dateiname eines umgewandelten Objektes, kann OPTIONAL mit einem Zugriffspfad versehen werden.
		"p2" gibt die Pfadnummer eines solchen Pfades an, der mit Hilfe der GLOBALEN Option '-p' definiert
		wurde. "p2" ist ein 'bedingter Zugriffspfad' und wird GENAU DANN dem Dateinamen hinzugefuegt, wenn
		eine Modifikation des Dateinamens stattfindet.

		Beispiel: '-f2:151:0:A:Xt' - Alle Schienenobjekte die einen 'StaticDetailLevel' von 2 haben,
			werden mit einem modifizierten SectionIDX-Wert versehen. Dazu wird die Shape-Nummer
			151 verwendet, die auf eine Strassendefinition verweisen muss. Falls der Dateiname dieser
			Definition mit 'A' beginnt, wird dieses 'A' durch 'Xt' ersetzt.
			(A1t10mstrt.s -> Xt1t10mstrt.s)
			Weiterhin wird genau dann der Zugriffspfad 0 = "../../Routes/<route>/Shapes/" hinzugefuegt.
			(Dateiname= '../../Routes/<route>/Shapes/Xt1t10mstrt.s')
		Achtung: Falls das Veraendern des Dateinamens aktiv ist, wird der originale Dateiname mit
			dem Schluesselwort 'TreeTexture' zusaetzlich in das World-Objekt eingefuegt. Dieses
			Schluesselwort wird bei statischen Objekten ignoriert und wird verwendet, um die
			Aenderung des Dateinamens wieder rueckgaengig machen zu koennen.
			Weiterhin wird der originale SectionIDX-Wert der World-Definition mit Hilfe des
			Schluesselwortes 'Config' in diese Definition eingetragen.
	Option '-k' schaltet den Korrekturmodus für World-Dateien ein. Wenn diese Option aktiv ist,
		gelten fuer die Pruefung der Objekt-Definitionen zusaetzlich folgende Regeln:
		+ Doppelte Definitionszeilen bewirken NICHT mehr, dass die gesamte Objekt-Definition
			ungueltig ist. Stattdessen wird eine Meldung erzeugt und die zweite Zeile
			ignoriert.
		+ Fehlende Definitionszeilen werden - falls moeglich - mit Default-Werten hinzugefuegt.
	Mit der Option '-l'/'-L' kann der Wert des 'StaticDetailLevel's fuer Objekte veraendert werden. Die Selektion
		der betroffenen Objekte wird durch den Objekt-Typ, den Dateinamen (falls vorhanden) und den AKTUELLEN
		Wert des 'StaticDetailLevel's gesteuert. Dazu muss eine Typmaske "m", eine Dateikennung "s" und eine
		Liste von 'StaticDetailLevel' spezifiziert werden. Die Typmaske entspricht der Korrekturmaske X aus
		Anhang A und selektiert - wie dort beschrieben - die Typen der Objekte, die einbezogen werden sollen. Damit
		eine Modifikation stattfindet, muss auch der Dateiname des Objektes mit der Spezifikation "s" uebereinstimmen.
		Dies ist im Fall '-l' korrekt, wenn der Dateiname mit "s" beginnt. Im Fall '-L' gibt "s" einen regulaeren
		Ausdruck an, der auf den Dateinamen zutreffen muss (match). Besitzt das Objekt keinen Dateinamen
		(z.B. "Platform") so wird diese Pruefung uebergangen. Als letztes muss der aktuelle 'StaticDetailLevel'
		des Objektes in der Liste der 'StaticDetailLevel' vorhanden sein, die als "sll" spezifiziert werden muss.
		Eine solche Liste kann einzelne Werte('<nr>'), einen Bereich von Werten ('<nr>-<nr>') oder eine Aufzaehlung
		von Werten ('<nr>,<nr>') enthalten. Diese koennen auch gemischt verwendet werden ('<nr>,<nr>-<nr>'), jedoch
		kann jeder 'StaticdetailLevel' (0..9) nur einmal spezifiziert werden.
		Sind alle Pruefungen erfolgreich, so wird der aktuelle 'StaticDetailLevel' des Objektes durch den mit "sl"
		spezifizierten Wert ersetzt und das Objekt neu in die World-Datei einsortiert.
		Option '-l'/'-L' kann mehr als einmal spezifiziert werden.
	Option '-m'/'-M' kann verwendet werden, um den Dateinamen von Schienen-/Strassen-objekten zu modifizieren
		und damit das Aussehen dieser Objekte zu beeinflussen. Option '-m'/'-M' wandelt im Gegensatz zur
		Option '-h' die Schienenelemente NICHT in Hidewire-Objekte um und veraendert auch NICHT
		den aktuellen 'SectionIDX'-Wert der Definition.
		Wird die Option '-m'/'-M' OHNE weitere Angaben genutzt, werden ALLE Modifikationen der Dateinamen
		permanent zurueckgenommen. Normalerweise werden einmal durchgefuehrte Veraenderungen des
		Dateinamens beibehalten.
		Wenn auf die Option '-m'/'-M' eine Zahl folgt, gibt diese den geforderten 'StaticDetailLevel' des
		Schienenelementes an, damit die Modifikation erfolgen kann. Es sind hier die Werte '0' sowie
		'3' bis '9' erlaubt. Damit eine Korrektur des Namens erfolgt, ist es weiterhin notwendig, dass
		der Dateinamen der Spezifikation entspricht, die als Datenkette "s1" angegeben wird. Dabei wird
		die Gross-/Klein-Schreibung NICHT beachtet. Im Fall '-m' ist dies der Fall, wenn der Dateinamen
		mit der Zeichenkette aus "s1" BEGINNT. Dann und nur dann wird dieser Teil des Dateinamens durch
		die Datenkette "s2" ersetzt. Falls "s2" nicht angegeben ist, wird eine Nullkette ("") verwendet.
		Im Fall '-M' enthaelt "s1" einen 'regulaeren Ausdruck'(vgl. Anhang B), der fuer den gesamten Dateinamen
		zutreffen muss (match). Dann wird der Dateiname gemaess den Angaben aus "s2" modifiziert, wobei
		Rueckverweise auf den Originalnamen moeglich sind(Capture-Group). "s2" MUSS angeben werden, falls
		'-M' verwendet wird.
		Es wird pro Objekt versucht, die Modifikation in der Reihenfolge der Spezifizierung durchzufuehren.
		Sobald eine Angabe erfolgreich angewendet werden konnte, werden die restlichen '-m'/'-M'-Optionen
		nicht mehr beachtet. Die Reihenfolge der Spezifikationen ist somit wichtig, insbesonders wenn nur
		Teile des Dateinamens zur Selektion benutzt werden. 

		Der Dateiname eines modifizierten Objektes, kann OPTIONAL mit einem Zugriffspfad versehen werden.
		"p2" gibt die Pfadnummer eines solchen Pfades an, der mit Hilfe der GLOBALEN Option '-p' definiert
		wurde. "p2" ist ein 'bedingter Zugriffspfad' und wird GENAU DANN dem Dateinamen hinzugefuegt, wenn
		eine Modifikation des Dateinamens stattfindet.
		Option '-m'/'-M' kann mehrfach angegeben werden, auch wenn der gleiche 'StaticDetailLevel' benutzt
		wird.

		ACHTUNG: Der StaticDetailLevel '3' kann NUR benutzt werden, wenn er nicht schon mit Option 'f' oder
			'-h' verwendet wird.
		ACHTUNG: Wenn fuer ein Schienen-/Strassen-Objekt der aktuelle 'StaticDetailLevel' mit dem
			spezifizierten uebereinstimmt, wird eine eventuelle Modifikation des Dateinamens
			zurueckgenommen, bevor versucht wird, den Dateinamen erneut zu modifizieren. Wenn also
			der Dateinamen mit KEINEM der angegebenen "s1"-Datenketten beginnt, geht eine
			voherige Modifikation verloren.
		Beispiel: '-m4::A:Xt' - (vergleiche auch Option '-h'/'-f')
		Beispiel: '-M5::A(.*)\.s:Xt$1_lft.s' - Alle Schienenobjekte, die einen 'StaticDetailLevel' von 5 haben,
			werden in eine Nebenbahnschiene umgewandelt. Falls der Dateiname dieser Definition ein 'A'
			sowie, weiter hinten, '.s' enthaelt, wird dieses 'A' durch 'Xt' ersetzt und die Konstante
			'_lft' vor '.s' eingefuegt. '$1' (erste 'capture-group', im 'regulaeren Ausdruck' mit
			Klammern gekennzeichnet) verweist dabei auf den Teil des Dateinamens, der zwischen 'A' und
			'.s' liegt. (A1t10mstrt.s -> Xt1t10mstrt_lft.s)
			Der Dateiname muss gemaess regulaerem Ausdruck nicht unbedingt mit 'A' beginnen oder mit '.s'
			enden, damit er zutrifft. Falls dies gefordert ist, muss der Ausdruck '^A(.*)\.s$' lauten.
		Achtung: Falls das Veraendern des Dateinamens erfolgt, wird der originale Dateiname mit
			dem Schluesselwort 'TreeTexture' zusaetzlich in das World-Objekt eingefuegt. Dieses
			Schluesselwort wird bei Schienenobjekten ignoriert und wird verwendet, um die
			Aenderung des Dateinamens wieder rueckgaengig machen zu koennen.
	Mit der Option '-o'/'-O' koennen die 'StaticFlags'-Definitionen von Objekten modifiziert werden. Die Selektion
		der betroffenen Objekte wird durch den Objekt-Typ und den Dateinamen (falls vorhanden) gesteuert. Dazu
		muss eine Typmaske "m1" und eine Dateikennung "s" spezifiziert werden. Die Typmaske entspricht der
		Korrekturmaske X aus Anhang A und selektiert - wie dort beschrieben - die Typen der Objekte, die einbezogen
		werden sollen. Damit eine Modifikation stattfindet, muss zusaetzlich der Dateiname des Objektes mit der
		Spezifikation "s" uebereinstimmen. Dies ist im Fall '-o' korrekt, wenn der Dateiname mit "s" beginnt. Im
		Fall '-O' gibt "s" einen regulaeren Ausdruck an, der auf den Dateinamen zutreffen muss (match). Besitzt das
		Objekt keinen Dateinamen (z.B. "Platform") so wird diese Pruefung uebergangen.
		Wenn im Erfolgsfall die 'StaticFlags' auch noch explizit definiert sind, werden diese modifiziert, indem sie
		mit der Maske "m2" 'LOGISCH ODER' verknuepft werden. Falls weiterhin die Maske "m3" spezifiziert wurde,
		erfolgt auch noch eine 'LOGISCH UND'-Verknuepfung des Ergebnisses mit dieser Maske. Das Gesamtergebnis
		ersetzt dann die 'StaticFlags'-Definition des Objektes.
		Die Masken "m2" und "m3" werden NICHT auf Plausibilitaet geprueft und koennen einen beliebigen Inhalt besitzen.
	Wenn die Option '-r' spezifiziert wird, wird eine neue Numerierung der
		UiD-Kennungen innerhalb jeder World-Datei veranlasst. Sollte dies auf
		Grund von Fehlern in einzelnen Dateien nicht moeglich sein, so wird eine
		Fehlermeldung ausgegeben und die neue Numerierung unterdrueckt.
	Wenn die Option '-s' spezifiziert wird, wird geprueft, ob alle in der NEUEN
		'tsection.dat' referenzierten Shape-Dateien auch vorhanden sind.
        Die Zuordnung von SHAPE-Definitionen aus der ALTEN zu der NEUEN 'tsection.dat' (-b) kann
		auf Grund von Aenderungen in der Definition des Shapes nicht moeglich sein.
		Mit der Option '-v' kann MANUELL eine Zuordnung definiert werden. 'nr1' gibt
		dabei eine Shape-Kennung aus der ALTEN 'tsection.dat' an und 'nr2' beschreibt
		den zugeordneten Shape aus der NEUEN 'tsection.dat'. Die manuelle Zuordnung
		wird NUR dann aktiv, wenn keine andere Zuordnung moeglich war.
		Die Option '-v' kann MEHRFACH angegeben werden.
		Bemerkung: Wenn eine Konvertierung der 'originalen' zu den 'XTrack' Definitionen stattfindet,
			sollte die Angabe '-v99:99' verwendet werden. 
	Um fehlende World-Dateien generieren zu lassen wird die Option '-w' verwendet. Wenn diese ange-
		geben wird, generiert TSUtil fuer jeden Quadranten einer Tile-Definition, der keine
		World-Datei hat, eine LEERE 'Dummy-World-Datei' ohne Eintraege.
	Option '-z' wird verwendet um statische Objekte, die Schienendefinitionen darstellen und als solche nicht
		mehr zu erkennen sind, in ein 'TrackObj' zurueckzuwandeln. (vgl. auch '-h'-Option)
		Die dieser Option folgende Zahl(1,2,3) gibt dabei an, welchen 'StaticDetailLevel' das 
		erzeugte 'TrackObj' unabhaengig von seinem aktuellen Level erhalten soll.
		Um zu entscheiden, ob ein Objekt gewandelt werden muss, wird der Dateiname des statischen
		Objektes mit allen 'Shape'-Namen der 'tsection.dat' verglichen. Ist dieser identisch, wird
		das statische Objekt in das entsprechende 'TrackObj'-Objekt gewandelt und die fehlenden
		Definitionszeilen erzeugt.
		Falls in der Option angegeben (Datenkette "s1"), wird VOR dem Vergleich des Dateinamens eine
		(lokale) Modifikation vorgenommen. Dazu wird der Anfang des Dateinamens mit dieser Datenkette
		verglichen und falls er uebereinstimmt, (Gross-/Kleinschreibung wird NICHT beachtet) wird dieser
		Teil des Dateinamens durch den zweiten angegebenen Namen ("s2")(falls vorhanden, sonst '') ersetzt.
		VOR der Pruefung des Dateinamens wird weiterhin dieser mit ALLEN definierten Zugriffspfaden
		(GLOBALE Option '-p') verglichen. Sollte der Dateinamen mit einem solchen Zugriffspfad beginnen,
		wird dieser Pfad voher entfernt.

		Die Option '-z' kann beliebig oft angegeben werden.
		Achtung: Alle Aenderungen werden durchgefuehrt BEVOR die Integritaet eines Objektes geprueft wird.
		Beispiel: '-z1:Xt:A' - Die Dateinamen aller statischen Objekte werden (nach einer eventuellen
			Entfernung eines Zugriffspfades) geprueft, ob sie mit 'Xt' beginnen. Ist das NICHT der Fall,
			trifft diese Option NICHT zu und das Objekt bleibt ggf. unveraendert. Im anderen Fall, wird
			im Dateinamen 'Xt' durch 'A' ersetzt und geprueft, ob es in der aktuellen globalen 'tsection.dat'
			eine Shape-Definition mit diesem Namen gibt. Wenn dieses der Fall ist, wird ein entsprechendes
			TrackObj erzeugt. Dieses erhaelt einen 'StaticDetailLevel' von 1.
			(Xt1t10mstrt.s -> At1t10mstrt.s)
		Achtung: Falls das Veraendern des Dateinamens aktiv ist und das statische Objekt in ein
			TrackObj'-Objekt gewandelt wird, wird der gefundene originale Dateiname ebenfalls
			gespeichert, sodass er beim rueckwandeln dieses Objektes in ein 'Hidewire'-Objekt
			(Option '-H'/'-F' NICHT spezifiziert) als Ziel-Dateiname genutzt werden kann.
	Bezueglich der globalen Optionen vergleiche 'Einleitung'

  z.B. fuer ProTrain 1: "java TSUtil -lC:\Logdat.log cvrt -bC:\tsection.dat C:\TRSim\routes\ProTrain_Rheintal"

  Einsatz der erzeugten Daten:
	- Verzeichnis 'world' der Strecke loeschen und mit dem Verzeichnis 'world' aus 'newRoute'
		ersetzen.
	- Verzeichnis 'Paths' der Strecke loeschen und mit dem Verzeichnis 'Paths' aus 'newRoute'
		ersetzen.
	- Verzeichnis 'Services' der Strecke loeschen und mit dem Verzeichnis 'Services' aus 'newRoute'
		ersetzen.
	- Verzeichnis 'Traffic' der Strecke loeschen und mit dem Verzeichnis 'Traffic' aus 'newRoute'
		ersetzen.
	- Verzeichnis 'Activities' der Strecke loeschen und mit dem Verzeichnis 'Activities' aus 'newRoute'
		ersetzen.
	- Dateien aus dem Verzeichnis 'newRoute' in das Hauptverzeichnis der Strecke verschieben
		und vorhandene Dateien ueberschreiben.
		Hinweis: Diese Funktion schreibt auch die '*.trk'-Datei. Ggf. ist jedoch eine Verwendung dieser
			Datei nicht notwendig und die Datei muss nicht kopiert werden.

6) Modifizieren der Schienendatenbank ".tdb"
  **** FUNKTION BITTE NICHT MEHR VERWENDEN ****
  Mit dieser Funktion ist es moeglich, die Schienendatenbank an eine Aenderung der
  globalen Datei "tsection.dat" anzupassen. Diese Funktion ist dann sinnvoll, wenn
  der Aufbau der Schienendatenbank (gemaess 'Erweiterter Option') nicht funktioniert.
  Eine Anpassung von weiteren Dateien wird NICHT vorgenommen.

  Diese Funktion analysiert die spezifizierte Schienendatenbank, modifiziert alle Referenzen
  auf Shapes und Sections auf Grund der angegebenen neuen Eckwerte und erstellt im Originalverzeichnis
  eine Kopie mit der Endung ".tdb$/.rdb$".

  Der Aufruf sieht folgendermassen aus:
	C>java TSUtil chgdb <datei> [<shn> <scn> [<sha> <sca>]]
  Hierbei gilt:
	"datei" ist der Dateiname (mit Pfad) der Schienendatenbank (.tdb/.rdb)
        "sha" ist der aktuell benutzte Eckwert fuer Shapes (Default=263)
        "sca" ist der aktuell benutzte Eckwert fuer Sections (Default=376)
        "shn" ist der neu zu benutzende Eckwert fuer Shapes (Default=40000)
        "scn" ist der neu zu benutzende Eckwert fuer Sections (Default=40000)

  z.B. fuer ProTrain 1: "java TSUtil chgdb
	C:\TRSim\routes\ProTrain_Rheintal\ProTrain_Rheintal.tdb 40000 40000"

  HINWEIS: Diese Funktion arbeitet - im Gegensatz zu 5) - auf reiner Satz-Basis. Damit ist
  	es moeglich, dass je nach Angabe der Werte "sha", "sca", "shn" und "scn" die maximale
  	Satzlaenge der Schienendatenbank anwaechst(z.B. Sectionnummer 6-stellig statt 3-stellig).
  	Da die maximal NUTZBARE Satzlaenge der Schienendatenbank nicht bekannt ist, liegt hier
  	ein moeglicher Fehler.

  Einsatz der erzeugten Daten:
	- Datei *.tdb loeschen und Datei *.tdb$ in *.tdb umbenennen. ODER
	- Datei *.rdb loeschen und Datei *.rdb$ in *.rdb umbenennen.

7) Selektives Kopieren von Dateien
  Ein Aufruf der Funktion "dcpy" vergleicht die Dateistruktur basierend auf Verzeichnis 1
  Datei fuer Datei mit der Verzeichnisstruktur basierend auf Verzeichnis 2. Jede
  Datei/Verzeichnis aus der Verzeichnisstruktur 1, die nicht in der Verzeichnisstruktur 2
  vorhanden ist oder ein neueres Datum besitzt, wird an die entsprechende Stelle der
  Verzeichnisstruktur basierend auf Verzeichnis 3 kopiert. Dabei werden eventuell fehlende
  Zwischenverzeichnisse automatisch erstellt.

  Der Aufruf sieht folgendermassen aus:
	C>java TSUtil [{-e|-w}] [-k] [-l[<logdat>]] [-m<id>] [-p<p>:<pfad>] [-q<n>:<dref>] dcpy
		[-a] [-o] <verz1> <verz2> <verz3>
  Hierbei gilt:
	"verz1" ist der Dateipfad auf die Basis-Streckendefinition
	"verz2" ist der Dateipfad auf die Vergleichs-Streckendefinition
	"verz3" ist der Dateipfad auf die Ziel-Streckendefinition
	Wenn die Option '-a' spezifiziert wird, werden auch die Dateien mit
		Endung ".bk" beachtet. Im anderen Fall werden diese Dateien weder
		geprueft noch kopiert.
	Die Option '-o' bewirkt, dass Dateien aus der Verzeichnisstruktur 1 NUR dann in die 
		Verzeichhnisstruktur 2 kopiert werden, wenn die Datei sowohl in der Verzeichnis-
		struktur 2 vorhanden ist als auch ein neueres Datum besitzt.
	Bezueglich der globalen Optionen vergleiche 'Einleitung'

  z.B. fuer ProTrain 1: "java TSUtil -lC:\Logdat.log dcpy C:\TRSim\routes\ProTrain_Rheintal
			C:\TRSimV\routes\ProTrain_Rheintal C:\TRSimN\routes\ProTrain_Rheintal"

  Einsatz der erzeugten Daten:
	- der Verzeichnisbaum, der bei Verzeichnis <verz3> beginnt erhaelt die kopierten Dateien.

8) Verschieben von Shape/Section-Bereichen in der globalen 'tsection.dat'
  Die Funktion "shift" verschiebt ShapeId- und/oder SectionId-Bereiche in der
  angegebenen GLOBALEN "tsection.dat" und erstellt eine Kopie unter einem neuen Namen, der
  durch Anhaengen von '$' an den alten Namen gebildet wird.
  Dabei werden nur die Id's und die Referenzen auf diese Id's veraendert indem der
  Verschiebungswert addiert wird. Eine neue Sortierung der Eintraege findet NICHT
  statt.
  Um einen Bereich (Shapes ODER Sections) NICHT zu verschieben, wird als Verschiebungswert
  "0" angegeben. Die Werte der Grenzen sind in diesem Fall irrelevant, muessen aber
  korrekt eingegeben werden.
  Der Verschiebungswert kann sowohl positiv als auch negativ sein. Die Bereiche - 
  und das betrifft sowohl Quell- als auch Ziel-Bereich - muessen aber innerhalb der
  definierten Grenzen (0,maxShape/maxSection) liegen.

  Der Aufruf sieht folgendermassen aus:
	C>java TSUtil [{-e|-w}] [-k] [-l[<logdat>]] [-m<id>] [-p<p>:<pfad>] [-q<n>:<dref>] shift
		<datei> <shl> <shh> <shd> <scl> <sch> <scd>
  Hierbei gilt:
	"datei" ist der Dateiname (mit Pfad) der globalen "tsection.dat"-Datei
	"shl" ist die untere Grenze des ShapeId-Bereiches (inklusive)
	"shh" ist die obere Grenze des ShapeId-Bereiches (exklusive)
	"shd" ist der Verschiebungswert fuer die ShapeId's
	"scl" ist die untere Grenze des SectionId-Bereiches (inklusive)
	"sch" ist die obere Grenze des SectionId-Bereiches (exklusive)
	"scd" ist der Verschiebungswert fuer die SectionId's
	Bezueglich der globalen Optionen vergleiche 'Einleitung'

  z.B.: "java TSUtil -lC:\Logdat.log shift C:\TRSim\Routes\tsection.dat 0 400 2000 0 400 2000"
  	Hier werden die Definitionen zwischen 0 und 400 an die Stelle 2000 verschoben.

  RESTRIKTION: Damit diese Funktion korrekt laeuft duerfen innerhalb eines KOMMENTARS
  	die Worte "TrackSections", "TrackShapes", TrackSection" und "TrackShape"
  	NICHT vorkommen. Ein solcher Kommentar muss aus der globalen "tsection.dat"
  	vorher entfernt werden. Nach der Verschiebung kann er wieder hinzugefuegt werden.

  Einsatz der erzeugten Daten:
	- die Eintraege der Datei 'tsection.dat' (global) so sortieren, dass die Indices aufsteigend
		vorliegen. Dann kann die Datei eingesetzt werden. Eventuell muessen die Strecken
		mit 'cvrt' an die neue Datei angepasst werden.

9) Pruefen und Korrigieren der Geometrie-Definition einer Strecke
  Die Funktion 'filter' prueft die Geometrie-Daten einer Strecke auf Vollstaendigkeit. Jede
  Tile-Definition, die keine Tile-Daten (*.t, *_y.raw) besitzt wird dabei entfernt, d.h die Markierung
  als 'besiedelt' wird fuer diesen Tile geloescht. Durch die Option '-w' kann diese Pruefung noch
  verschaerft werden. Wenn diese Option aktiv ist, wird die Markierung als 'besiedelt' auch
  dann zurueckgenommen, wenn ein Tile KEINE World-Datei besitzt.
  Es werden sowohl die Tile- als auch die LO_Tile-Definitionen ueberprueft.

  Der Aufruf sieht folgendermassen aus:
	C>java TSUtil [{-e|-w}] [-k] [-l[<logdat>]] [-m<id>] [-p<p>:<pfad>] [-q<n>:<dref>] filter
		[-c] [-w] <verz>
  Hierbei gilt:
	"verz" ist der Dateipfad auf die Streckendefinition, die die World-Dateien enthaelt
	Die Option '-c' impliziert die Option '-w' und bewirkt, dass falls auf Grund einer
		fehlenden World-Datei die Markierung einer Tile-Definition geloescht wird,
		zusaetzlich auch die Tile-Definition selbst (*.t) geloescht wird.
		Falls eine *.t-Datei geloescht wird, werden auch die Pufferdateien entfernt.
	Wenn die Option '-w' spezifiziert wird, werden auch die World-Dateien als
		Fehlerkriterium benutzt. Die Markierung einer Tile-Definition, die in diesem
		Fall keine World-Definition besitzt, wird geloescht.
	Bezueglich der globalen Optionen vergleiche 'Einleitung'

  z.B. fuer ProTrain 1: "java TSUtil -lC:\Logdat.log filter C:\TRSim\routes\ProTrain_Rheintal"

  Einsatz der erzeugten Daten:
	- Verzeichnis 'TD' der Strecke loeschen und mit dem Verzeichnis 'TD' aus 'newRoute' ersetzen.

10) Komprimieren der World-Dateien durch das Programm "Comp" von Martyn Griffin
  **** FUNKTION BITTE NICHT MEHR VERWENDEN ****
  Mit der Funktion "cmpw" werden die World-Dateien in eine komprimierte Form umgewandelt.
  Im Gegensatz zu den oben beschrieben Funktionen wird dazu das Programm "Comp" von
  Martyn Griffin verwendet, das unter dem Namen "recmp119" im Internet verfuegbar ist. Dies
  enthaelt NICHT die Fehler von "ffeditc_unicode". Damit der Aufruf dieses Programms korrekt
  erfolgt, muss es im Unterverzeichnis "utils/comp" der TS-Instanz installiert sein.

  World-Dateien, die in der UB-Form vorliegen werden vor Aufruf des Comp-Programms in die
  UT-Form umgewandelt. Komprimierte Dateien (KB-Form,KT-Form) werden NICHT veraendert.

  Der Aufruf sieht folgendermassen aus:
	C>java TSUtil [{-e|-w}] [-k] [-l[<logdat>]] [-m<id>] [-p<p>:<pfad>] [-q<n>:<dref>] cmpw <verz>
  Hierbei gilt:
	"verz" ist der Dateipfad auf die Streckendefinition, die die World-Dateien enthaelt
	Bezueglich der globalen Optionen vergleiche 'Einleitung'

  z.B. fuer ProTrain 1: "java TSUtil -lC:\Logdat.log cmpw C:\TRSim\routes\ProTrain_Rheintal"

  Einsatz der erzeugten Daten:
	- Dateien im Verzeichnis 'world' der Strecke mit den Dateien aus dem Verzeichnis
		'newRoute/world' ueberschreiben.

11) Umwandeln ALLER Strecken in einer TS-Instanz
  Durch die Funktion "tsconv" werden ALLE Streckendefinitionen einer TS-Instanz an eine neue
  globale "tsection.dat"-Definition angepasst. Die einzelnen Streckendefinitionen werden
  mit der Aenderung ueberschrieben. Es werden dabei fuer jede Streckendefinition der TS-Instanz
  das "Umwandeln der Streckendefinition mit der Funktion 'cvrt'" ausgeloest.

  Die originale "tsection.dat", von der ausgehend ALLE Strecken an die neue Version angepasst
  werden sollen, muss in das Verzeichnis "routes" der TS-Instanz eingestellt werden.
  Falls eine der zu modifizierenden Streckendefinition eine andere "tsection.dat" als
  Ausgangsbasis hat, kann alternativ die fuer diese Streckendefinition zutreffende "tsection.dat"
  unter dem Namen "$tsection.dat" in das Streckenverzeichnis kopiert werden. Diese wird bei
  der Anpassung dann der allgemeinen Definition (in 'routes') vorgezogen.

  Der Aufruf sieht folgendermassen aus:
	C>java TSUtil [{-e|-w}] [-k] [-l[<logdat>]] [-m<id>] [-p<p>:<pfad>] [-q<n>:<dref>] tsconv
		[-s] [-u] [-v<nr1>:<nr2>] <verz>
  Hierbei gilt:
	"verz" ist der Dateipfad auf TS-Instanz
	Wenn die Option '-s' spezifiziert wird, wird geprueft, ob alle in der NEUEN
		'tsection.dat' referenzierten Shape-Dateien auch vorhanden sind.
	Die Angabe der Option '-u' bewirkt, dass die World-Dateien immer im UT-Format geschrieben
		werden. Normalerweise werden die Dateien im selben Format wieder geschrieben,
		in dem sie auch gelesen wurden.
        Die Zuordnung von SHAPE-Definitionen aus der ALTEN zu der NEUEN 'tsection.dat' kann
		auf Grund von Aenderungen in der Definition des Shapes nicht moeglich sein.
		Mit der Option '-v' kann MANUELL eine Zuordnung definiert werden. 'nr1' gibt
		dabei eine Shape-Kennung aus der ALTEN 'tsection.dat' an und 'nr2' beschreibt
		den zugeordneten Shape aus der NEUEN 'tsection.dat'. Die manuelle Zuordnung
		wird NUR dann aktiv, wenn keine andere Zuordnung moeglich war.
		Die Option '-v' kann MEHRFACH angegeben werden.
	Bezueglich der globalen Optionen vergleiche 'Einleitung'

  z.B. : "java TSUtil -lC:\Logdat.log tsconv C:\TRSim\"

  Einsatz der erzeugten Daten:
	Es sind KEINE Aktionen notwendig. Die Streckendefinitionen werden DIREKT veraendert.

12) Integritaetspruefung einer Streckendefinition
  Mit der Funktion("ichk") wird die interne Integritaet einer Streckendefinition geprueft.
  Es wird untersucht, ob die globale und lokale 'tsection.dat' - Datei syntaktisch korrekt sind
  und ob die Referenzen zwischen Schienen-/Strassendatenbank und World - Dateien stimmen. Es
  wird auf doppelt vergebene UiD-Kennungen untersucht und ob diese ggf. angepasst werden koennen.
  Es werden KEINE Veraenderungen in der Streckendefinition vorgenommen!

  Der Aufruf sieht folgendermassen aus:
	C>java TSUtil [{-e|-w}] [-k] [-l[<logdat>]] [-m<id>] [-p<p>:<pfad>] [-q<n>:<dref>] ichk
		[-k] [{-s|-S}] [-z{1|2|3}[:<s1>:[<s2>]]] <verz>
  Hierbei gilt:
	"verz" ist der Dateipfad auf die Streckendefinition
	Wenn die Option '-s' spezifiziert wird, wird geprueft, ob alle in der
		'tsection.dat' referenzierten Shape-Dateien auch vorhanden sind. Wird die Option 
		als '-S' spezifiziert, wird zusaetzlich geprueft, ob alle, in der Strecke
		referenzierten Shape-Dateien ebenfalls vorhanden sind. Das betrifft auch die Textur-
		Dateien dieser Shape-Definitionen die im Textur-Verzeichnis existieren muessen.
		Falls eine geforderte Datei nicht existiert, wird eine Meldung ausgegeben aber sonst
		keine weiteren Aktionen veranlasst.
	Option '-k' schaltet den Pruefungsmodus für World-Dateien um. Wenn diese Option aktiv ist,
		werden die Objekt-Definitionen auf die gleiche Weise geprüft, als ob der 
		Korrekturmodus aktiv ist (vergl. Funktion 'cvrt' (5)).
	Option '-z' wird verwendet um statische Objekte, die Schienendefinitionen darstellen und als solche nicht
		mehr zu erkennen sind, zur Pruefung in ein 'TrackObj' zurueckzuwandeln. (vgl. auch 'cvrt')
		Die dieser Option folgende Zahl(1,2,3) gibt dabei an, welchen 'StaticDetailLevel' das 
		erzeugte 'TrackObj' unabhaengig von seinem aktuellen Level erhalten soll.
		Um zu entscheiden, ob ein Objekt gewandelt werden muss, wird der Dateiname des statischen
		Objektes mit allen 'Shape'-Namen der 'tsection.dat' verglichen. Ist dieser identisch, wird
		das statische Objekt in das entsprechende 'TrackObj'-Objekt gewandelt und die fehlenden
		Definitionszeilen erzeugt.
		Falls in der Option angegeben (Datenkette "s1"), wird VOR dem Vergleich des Dateinamens eine
		(lokale) Modifikation vorgenommen. Dazu wird der Anfang des Dateinamens mit dieser Datenkette
		verglichen und falls er uebereinstimmt, (Gross-/Kleinschreibung wird NICHT beachtet) wird dieser
		Teil des Dateinamens durch den zweiten angegebenen Namen ("s2")(falls vorhanden, sonst '') ersetzt.
		VOR der Pruefung des Dateinamens wird weiterhin dieser mit ALLEN definierten Zugriffspfaden
		(GLOBALE Option '-p') verglichen. Sollte der Dateinamen mit einem solchen Zugriffspfad beginnen,
		wird dieser Pfad voher entfernt.

		Die Option '-z' kann beliebig oft angegeben werden.
		Achtung: Alle Aenderungen werden durchgefuehrt BEVOR die Integritaet eines Objektes geprueft wird.
		Beispiel: '-z1:Xt:A' - Die Dateinamen aller statischen Objekte werden (nach einer eventuellen
			Entfernung eines Zugriffspfades) geprueft, ob sie mit 'Xt' beginnen. Ist das NICHT der Fall,
			trifft diese Option NICHT zu und das Objekt bleibt ggf. unveraendert. Im anderen Fall, wird
			im Dateinamen 'Xt' durch 'A' ersetzt und geprueft, ob es in der aktuellen globalen 'tsection.dat'
			eine Shape-Definition mit diesem Namen gibt. Wenn dieses der Fall ist, wird ein entsprechendes
			TrackObj erzeugt. Dieses erhaelt einen 'StaticDetailLevel' von 1.
			(../../Routes/<route>/Shapes/Xt1t10mstrt.s -> At1t10mstrt.s)
		Bezueglich der globalen Optionen vergleiche 'Einleitung'

  z.B. fuer ProTrain 1: "java TSUtil -lC:\Logdat.log ichk C:\TRSim\routes\ProTrain_Rheintal"

  Einsatz der erzeugten Daten:
	Diese Funktion erzeugt KEINE neuen Dateien! (ausser Log)

13) Neunumerierung der Schienen-/Strassendatenbank
  Nach dem manuellen Loeschen von Track-Nodes aus der Schienen-/Strassendatenbank *.tdb/*.rdb ist
  diese Funktion ("rendb") in der Lage die Verkettungen und Abhaengigkeiten innerhalb der
  Datenbank zu reparieren. Die vorhandenen Nodes werden 'zusammengeschoben' und die Verkettungen
  neu hergestellt. Dabei wird geprueft, ob offene d.h. nicht mehr herstellbare Verkettungen
  existieren. Diese werden im 'Log' protokolliert und durch die Referenz '0' ersetzt.
  Auch die Numerierung im TrItem-Teil der Datenbank wird neu vorgenommen, und damit Luecken
  in den TrItem-Definitionen geschlossen. Auch hier werden die Verkettungen untereinander 
  und zu Track-Nodes aktualisiert. 
  Weiterhin wird eine logische Pruefung der GESAMTEN Datenbank durchgefuehrt. Wenn die Option
  '-o' angegeben wird, ist diese jedoch mit Vorsicht zu behandeln, da die Abhaengigkeiten zu den
  World-Dateien dann nicht geprueft werden. Entsprechende Fehlermeldungen koennen ignoriert werden.

  Diese Funktionen erstellt AUCH die Datenbanken *.tit und *.rit neu. Damit diese Funktion jedoch
  korrekt ausgefuehrt werden kann, muessen in diesen Datenbanken die gleichen Aenderungen
  vorgenommen worden sein(z.B Eintraege geloescht,...), wie in der entsprechenden Datenbank
  des Typs *.tdb/*.rdb. 
 
  ACHTUNG: Bevor die erzeugten Datenbanken eingesetzt werden, sollte man sich ueberzeugen, dass
	es in den World-Dateien KEINE offenen Referenzen auf 'versehentlich' geloeschte
	TrItem-Definitionen gibt. Dazu kann - falls erzeugt - das Protokoll genutzt werden.

  Der Aufruf sieht folgendermassen aus:
	C>java TSUtil [{-e|-w}] [-k] [-l[<logdat>]] [-m<id>] [-p<p>:<pfad>] [-q<n>:<dref>] rendb
		[-a] [{-c|-u}] [-o] [-r] [-w[ -m]] <verz>
  Hierbei gilt:
	"verz" ist der Dateipfad auf die Streckendefinition
	Die Option '-o' wird benutzt, um NUR den TrackDB-Anteil der Datenbank zu reorganisieren.
		Im TrItem-Anteil der Schienen-/Strassendatenbank duerfen in diesem Fall keine
		Veraenderungen oder Loeschungen vorgenommen werden.
	Wenn die LOKALE Option '-w' angegeben wird, werden die Datenbanken auch dann neu erstellt,
		wenn bei der logischen Pruefung Fehler erkannt wurden.
	Wenn die Option '-a' angegeben wird, werden zusaetzlich alle NICHT REFERENZIEREN TrItem-
		Eintraege entfernt. Diese brauchen nicht explizit in den Dateien (*.tdb,*.tit,*.rdb,
		*.rit) geloescht zu werden. Die Option hat keine Wirkung, wenn '-o' angegeben ist.
	Wenn die Option '-r' benutzt wird, werden alle Refenzen der TrItem-Eintraege auf die Schienendatenbank
		entfernt. Dies betrifft jedoch NUR TrItem-Definitionen, die KEINE Referenzen aus den
		World-Dateien besitzen. Die Option hat keine Wirkung, wenn '-o' angegeben ist und ist NUR dann
		sinnvoll, wenn auch die Option '-a' spezifiziert wird.
	Die Option '-m' bewirkt die Markierung von fehlerhaften UID-Eintraegen in der Datenbank.
		Wenn die Schienendatenbank mit Hilfe der Option '-w' auch bei fehlerhaften Werten
		neu erstellt wird, werden alle fehlerhaften Werte unveraendert uebernommen.
		Wenn die Option '-m' aktiv ist, werden statt dessen fehlerhafte UID-Werte durch
		'?' ersetzt.
		Diese Option wirkt nur, wenn die Option '-w' auch spezifiziert ist und muss
		NACH dieser Option angegebenen werden.
	Wenn die Option '-c' angegeben wird, werden die World-Dateien (*.w) auf jeden Fall in
		der komprimierten Binaer-Version [KB] geschrieben. Normalerweise, werden World-Dateien
		im selben Format geschrieben, wie sie auch gelesen wurden. Diese Option wird durch
		die Angabe von '-u' ggf wieder zurueckgesetzt. Die Option hat ausserdem keine Wirkung
		wenn '-o' angegeben ist.
	Wenn die Option '-u' angegeben wird, werden die World-Dateien (*.w) auf jeden Fall in
		der unkomprimierten Text-Version [UT] geschrieben. Normalerweise, werden World-Dateien
		im selben Format geschrieben, wie sie auch gelesen wurden. Diese Option wird durch
		die Angabe von '-c' ggf wieder zurueckgesetzt. Die Option hat ausserdem keine Wirkung
		wenn '-o' angegeben ist.
	Bezueglich der globalen Optionen vergleiche 'Einleitung'

  z.B. fuer ProTrain 1: "java TSUtil -lC:\Logdat.log rendb C:\TRSim\routes\ProTrain_Rheintal"

  Einsatz der erzeugten Daten:
	- Dateien aus dem Verzeichnis 'newRoute' in das Hauptverzeichnis der Strecke verschieben
		und vorhandene Dateien ueberschreiben.
	- Wenn Option '-o' NICHT spezifiziert wurde:
	 + Verzeichnis 'world' der Strecke loeschen und mit dem Verzeichnis 'world' aus 'newRoute'
		ersetzen.
	 + Wenn das Verzeichnis 'Paths' in 'newRoute' vorhanden ist, das Verzeichnis 'Paths' der Strecke
		loeschen und mit diesem Verzeichnis ersetzen.
	 + Wenn das Verzeichnis 'Services' in 'newRoute' vorhanden ist, das Verzeichnis 'Services' der
		Strecke loeschen und mit diesem Verzeichnis ersetzen.
	 + Wenn das Verzeichnis 'Traffic' in 'newRoute' vorhanden ist, das Verzeichnis 'Traffic' der
		Strecke loeschen und mit diesem Verzeichnis ersetzen.
	 + Wenn das Verzeichnis 'Activities' in 'newRoute' vorhanden ist, das Verzeichnis 'Activities'
		der Strecke loeschen und mit diesem Verzeichnis ersetzen.

14) Verschieben einer Streckendefinition
  Diese Funktion ('move') verschiebt eine Streckendefinition um eine bestimmte, angebbare Anzahl
  von Streckenquadraten in X- und/oder Z-Richtung. Alle Definitionen (Tile-Dateien,
  World-Dateien. TD-Definitionen, ...) werden entsprechend angepasst und neu erstellt. Die neuen
  Dateien werden im Verzeichnis '/newRoute' abgelegt, das in der Streckendefinition eingerichtet
  wird.
  Zur genauen Vorgehensweise vergleiche auch das Gesamtbeispiel unten.
  Das Verschieben kann NUR in einer Schrittweite erfolgen, die der groessten Kantenlaenge der
  definierten Tiles in der Strecke entspricht. Wenn LO-Tiles verwendet werden, ist dies meist
  der Wert '8'.

  Waehrend des Verschiebens wird eine Konsolidierung der Quadratstruktur vorgenommen. Alle
  Streckenquadrate, die nicht 'besiedelt' sind, werden nach Moeglichkeit zusammengefasst.
  Neben den Dateien der Streckendefinition, werden auch ALLE Dateien der Activities verschoben
  und angepasst, da auch sie Referenzen auf die Streckendefinition enthalten.
 
  ACHTUNG: Es werden nur DIE Streckenquadrate verschoben, die im Streckengeometrie-Editor als
	'besiedelt' gekennzeichnet sind. Alle anderen Quadrate werden nicht uebernommen. Dies
	betrifft auch die zugeordneten World- und Tile-Dateien. Ggf. ist damit eine Korrektur
	der Strecke im Streckengeometrie-Editor notwendig.

  Der Aufruf sieht folgendermassen aus:
	C>java TSUtil [{-e|-w}] [-k] [-l[<logdat>]] [-m<id>] [-p<p>:<pfad>] [-q<n>:<dref>] move
		[-c] [-p] <verz> <dx> <dz>
  Hierbei gilt:
	"verz" ist der Dateipfad auf die Streckendefinition
	"dx" ist die Anzahl der Streckenquadrate, um die die Strecke in X-Richtung (Ost(+)/West(-))
		verschoben werden soll. Der Wert muss ein Vielfaches der groessten Tile-Kantenlaenge
		sein.
	"dz" ist die Anzahl der Streckenquadrate, um die die Strecke in Z-Richtung (Nord(+)/Sued(-))
		verschoben werden soll. Der Wert muss ein Vielfaches der groessten Tile-Kantenlaenge
		sein.
	Wenn die Option '-c' angegeben wird, werden die Tile-Dateien (*.t) auf jeden Fall in der
		reduzierten Version geschrieben. Normalerweise, werden Tile-Dateien im selben
		Format geschrieben, wie sie auch gelesen wurden.
	Die Option '-p' bewirkt, dass neben den Tile-Dateien (*.t) und den Tile-Daten-Dateien
		(*_y.raw, *_f.raw) auch die Pufferdateien (*_e.raw, *_n.raw) unter der
		entsprechenden Namensaenderung kopiert werden. Damit muss der TS diese nicht neu
		erstellen.
	Bezueglich der globalen Optionen vergleiche 'Einleitung'

  z.B. fuer ProTrain 1: "java TSUtil -lC:\Logdat.log move C:\TRSim\routes\ProTrain_Rheintal -5120 -496"

  Einsatz der erzeugten Daten:
	- Verzeichnis 'world' der Strecke loeschen und mit dem Verzeichnis 'world' aus 'newRoute'
		ersetzen.
	- Verzeichnis 'TD' der Strecke loeschen und mit dem Verzeichnis 'TD' aus 'newRoute' ersetzen.
	- Verzeichnis 'Tiles' der Strecke loeschen und mit dem Verzeichnis 'Tiles' aus 'newRoute'
		ersetzen.
	- Verzeichnis 'LO_Tiles' der Strecke loeschen und mit dem Verzeichnis 'LO_Tiles' aus 'newRoute'
		ersetzen.
	- Wenn das Verzeichnis 'Paths' in 'newRoute' vorhanden ist, das Verzeichnis 'Paths' der Strecke
		loeschen und mit diesem Verzeichnis ersetzen.
	- Wenn das Verzeichnis 'Services' in 'newRoute' vorhanden ist, das Verzeichnis 'Services' der
		Strecke loeschen und mit diesem Verzeichnis ersetzen.
	- Wenn das Verzeichnis 'Traffic' in 'newRoute' vorhanden ist, das Verzeichnis 'Traffic' der
		Strecke loeschen und mit diesem Verzeichnis ersetzen.
	- Wenn das Verzeichnis 'Activities' in 'newRoute' vorhanden ist, das Verzeichnis 'Activities'
		der Strecke loeschen und mit diesem Verzeichnis ersetzen.
	- Dateien aus dem Verzeichnis 'newRoute' in das Hauptverzeichnis der Strecke verschieben
		und vorhandene Dateien ueberschreiben.

15) Pruefen zweier globaler 'tsection.dat'-Dateien auf Kompatibilitaet
  Mit der Funktion 'chkup' kann man die Kompatibilitaet zwischen zwei Dateien des Typs der 
  globalen 'tsection.dat' ueberpruefen. Eine alte Version ist zu einer neuen kompatibel, wenn alle
  Schienen- und Strassendefinitionen der ALTEN 'tsection.dat' auch in der neuen 'tsection.dat vorhanden
  sind. Dabei koennen sich jedoch die internen Nummern geaendert haben.
  Die alte globale 'tsection.dat' wird spezifiziert, waehrend die neue globale 'tsection.dat' im
  SELBEN Verzeichnis wie die alte Version unter dem Namen 'tsection.dat' existieren muss. Damit ist
  es moeglich, eine reine Syntaxpruefung zu veranlassen, indem man die neue 'tsection.dat-Datei als
  alte Version spezifiziert.

  Diese Funktion erkennt und prueft auch reine Veraenderungen wie den Austausch von Shape-Definitionen.
  Um eine Zuordnung (alt-neu) jedoch einwandfrei feststellen zu koennen ist es notwendig, dass
  INNERHALB der Shape-Definitionen keine Veraenderung der REIHENFOLGE der Suboptionen
  (z.B. SectionIdx) erfolgt ist. Auch muss eine gewisse  allgemeine Reihenfolge eingehalten
  werden, die jedoch normalerweise gegeben ist. (z.B. 'NumPath' vor 'SectionIdx'). Falls eine
  Zuordnung im Einzelfall nicht moeglich ist (z.B. wegen Fehlerkorrektur), kann diese mit Hilfe
  der Option '-v' auch manuell erfolgen. 

  Die Funktion 'chkup' nimmt keinerlei Korrekturen vor.

  Hinweis: Da diese Funktion auch einen Teil der Streckenkonvertierung darstellt, ist die Nutzung
	als Vorstufe zu einer Streckenkonvertierung sinnvoll.

  Der Aufruf sieht folgendermassen aus:
	C>java TSUtil [{-e|-w}] [-k] [-l[<logdat>]] [-m<id>] [-p<p>:<pfad>] [-q<n>:<dref>] chkup
		[-v<nr1>:<nr2>] <datei>
  Hierbei gilt:
	"datei" ist der Dateiname (mit Pfad) der ALTEN "tsection.dat" -Datei
        Die Zuordnung von SHAPE-Definitionen aus der ALTEN zu der NEUEN 'tsection.dat' kann
		auf Grund von Aenderungen in der Definition des Shapes nicht moeglich sein.
		Mit der Option '-v' kann MANUELL eine Zuordnung definiert werden. 'nr1' gibt
		dabei eine Shape-Kennung aus der ALTEN 'tsection.dat' an und 'nr2' beschreibt
		den zugeordneten Shape aus der NEUEN 'tsection.dat'. Die manuelle Zuordnung
		wird NUR dann aktiv, wenn keine andere Zuordnung moeglich war.
		Die Option '-v' kann MEHRFACH angegeben werden.
	Bezueglich der globalen Optionen vergleiche 'Einleitung'

  z.B. fuer '$tsection.dat': "java TSUtil -lC:\Logdat.log chkup -v99:99 C:\TRSim\global\$tsection.dat"

  Einsatz der erzeugten Daten:
	Diese Funktion erzeugt KEINE neuen Dateien! (ausser Log)

16) Anpassen der Hoehendefinitionen einer Strecke
  Die Funktion 'adjh' verschiebt eine gesamte Streckendefinition senkrecht, indem sie alle Hoehenwerte
  veraendert. Dazu wird ein fester Betrag, der angegeben wird, auf alle Hoehenwerte innerhalb der
  Strecke addiert. Es sind sowohl die Objekte als auch die Tile-Definitionen betroffen.

  Alle Dateien (*.t,*.w,...) werden im selben Format wieder geschrieben, in dem sie auch gelesen
  wurden. Lediglich die Tile-Dateien koennen mit Hilfe der Option '-c' beim Schreiben automatisch in
  das 'reduzierte Format' konvertiert werden.
  Bemerkung: *-t-Dateien sind NICHT komprimiert. (UB-Format)

  Der Aufruf sieht folgendermassen aus:
	C>java TSUtil [{-e|-w}] [-k] [-l[<logdat>]] [-m<id>] [-p<p>:<pfad>] [-q<n>:<dref>] adjh
		[-c] <verz> <dh>
  Hierbei gilt:
	"verz" ist der Dateipfad auf die Streckendefinition
	"dh" bestimmt den Differenzwert, der auf ALLE Hoehenwerte addiert werden soll
	Wenn die Option '-c' angegeben wird, werden die Tile-Dateien (*.t) auf jeden Fall in der
		reduzierten Version geschrieben. Normalerweise, werden Tile-Dateien im selben
		Format geschrieben, wie sie auch gelesen wurden.
	Bezueglich der globalen Optionen vergleiche 'Einleitung'

  z.B. fuer ProTrain 1: "java TSUtil -lC:\Logdat.log adjh C:\TRSim\routes\ProTrain_Rheintal 15.5"

  Einsatz der erzeugten Daten:
	- Verzeichnis 'world' der Strecke loeschen und mit dem Verzeichnis 'world' aus 'newRoute'
		ersetzen.
	- Verzeichnis 'Tiles' der Strecke loeschen und mit dem Verzeichnis 'Tiles' aus 'newRoute'
		ersetzen.
	- Verzeichnis 'LO_Tiles' der Strecke loeschen und mit dem Verzeichnis 'LO_Tiles' aus 'newRoute'
		ersetzen.
	- Wenn das Verzeichnis 'Paths' in 'newRoute' vorhanden ist, das Verzeichnis 'Paths' der Strecke
		loeschen und mit diesem Verzeichnis ersetzen.
	- Dateien aus dem Verzeichnis 'newRoute' in das Hauptverzeichnis der Strecke verschieben
		und vorhandene Dateien ueberschreiben.

17) Komprimieren/Reduzieren von Dateien (S,T,W) in das binaer-Format
  Mit der Funktion 'cmp' koennen die verschieden Typen von Datendateien (S,T,W) reduziert und
  komprimiert werden. Dazu ist KEIN weiteres Tool erforderlich.
  Standardmässig werden die Dateien nur in das Token-Format (UB) reduziert. Mit einer zusaetzlichen
  Option koennen die Dateien aber auch nach dem ZLib-Verfahren komprimiert werden (KB-Format).
  Dies trifft jedoch NICHT fuer die Tile-Dateien zu, die NUR reduziert werden koennen.

  Mit jedem Aufruf kann nur EIN Dateityp selektiert werden.

  Der Aufruf sieht folgendermassen aus:
	C>java TSUtil [{-e|-w}] [-k] [-l[<logdat>]] [-m<id>] [-p<p>:<pfad>] [-q<n>:<dref>] cmp
		[-c] {-s|-t|-T|-w} [-x] <verz>
  Hierbei gilt:
	"verz" ist der Dateipfad auf die Streckendefinition
	Die Option '-s' selektiert die Shape-Dateien im Unterzeichnis 'Shapes' zur Bearbeitung.
		Alle im Verzeichnis vorhandenen *.s-Dateien werden reduziert, ggf. komprimiert
		und im Verzeichnis 'newRoute/Shapes' abgelegt.
	Die Option '-t' selektiert die Tile-Dateien im Unterzeichnis 'Tiles' zur Bearbeitung.
		Alle im Verzeichnis vorhandenen *.t-Dateien werden reduziert und im Verzeichnis
		'newRoute/Tiles' abgelegt. Die zusaetzliche Option '-c' darf in diesem Fall
		NICHT angegeben werden.
	Die Option '-T' selektiert die Lo-Tile-Dateien im Unterzeichnis 'LO_Tiles' zur Bearbeitung.
		Alle im Verzeichnis vorhandenen *.t-Dateien werden reduziert und im Verzeichnis
		'newRoute/LO_Tiles' abgelegt. Die zusaetzliche Option '-c' darf in diesem Fall
		NICHT angegeben werden.
	Die Option '-w' selektiert die World-Dateien im Unterzeichnis 'World' zur Bearbeitung.
		Alle im Verzeichnis vorhandenen *.w-Dateien werden reduziert, ggf. komprimiert
		und im Verzeichnis 'newRoute/World' abgelegt.
	Wenn die Option '-c' angegeben wird, werden die Dateien nicht nur reduziert ('UB'-Format)
		sondern auch komprimiert ('KB'-Format). Dazu ist KEIN zusaetzlich installiertes
		Tool notwendig.
	Option '-x' bewirkt das Erstellen einer vollstaendigen Kopie des Quell-Verzeichnisses.
		Alle Dateien, die NICHT bearbeitet werden muessen, werden zusaetzlich in das
		Ziel-Verzeichnis kopiert.
		Achtung: Unterverzeichnisse werden NICHT bearbeitet oder kopiert.
	Bezueglich der globalen Optionen vergleiche 'Einleitung'

  z.B. fuer ProTrain 1: "java TSUtil -lC:\Logdat.log cmp -w -c C:\TRSim\routes\ProTrain_Rheintal"

  Einsatz der erzeugten Daten:
	- Wenn Option '-x' spezifiziert: Entsprechendes Verzeichnis der Strecke loeschen und mit dem
		gleichnamigen Verzeichnis aus 'newRoute' ersetzen.
	- Sonst: Dateien im entsprechenden Verzeichnis der Strecke mit den Dateien aus dem gleichnamigen
		Verzeichnis in 'newRoute' ueberschreiben.

18) Dekomprimieren/Expandieren von Dateien (S,T,W)
  Mit der Funktion 'unc' koennen die verschieden Typen von Datendateien (S,T,W) dekomprimiert und
  expandiert werden. Dazu ist KEIN weiteres Tool erforderlich.
  Für jede Datei wird das vorliegende Format ('KB','UB','KT' (siehe oben)) analysiert und die Datei
  in das 'unkomprimierte Textformat' (UT) konvertiert. Liegt das UT-Format bereits vor, wird die
  Datei lediglich kopiert.

  Mit jedem Aufruf kann nur EIN Dateityp selektiert werden.

  Der Aufruf sieht folgendermassen aus:
	C>java TSUtil [{-e|-w}] [-k] [-l[<logdat>]] [-m<id>] [-p<p>:<pfad>] [-q<n>:<dref>] unc
		{-s|-t|-T|-w} [-x] <verz>
  Hierbei gilt:
	"verz" ist der Dateipfad auf die Streckendefinition
	Die Option '-s' selektiert die Shape-Dateien im Unterzeichnis 'Shapes' zur Bearbeitung.
		Alle im Verzeichnis vorhandenen *.s-Dateien werden ggf. dekomprimiert und expandiert
		und im Verzeichnis 'newRoute/Shapes' abgelegt.
	Die Option '-t' selektiert die Tile-Dateien im Unterzeichnis 'Tiles' zur Bearbeitung.
		Alle im Verzeichnis vorhandenen *.t-Dateien werden ggf. expandiert und im Verzeichnis
		'newRoute/Tiles' abgelegt.
	Die Option '-T' selektiert die Lo-Tile-Dateien im Unterzeichnis 'LO_Tiles' zur Bearbeitung.
		Alle im Verzeichnis vorhandenen *.t-Dateien werden ggf. expandiert und im Verzeichnis
		'newRoute/LO_Tiles' abgelegt.
	Die Option '-w' selektiert die World-Dateien im Unterzeichnis 'World' zur Bearbeitung.
		Alle im Verzeichnis vorhandenen *.w-Dateien werden ggf. dekomprimiert und expandiert
		und im Verzeichnis 'newRoute/World' abgelegt.
	Option '-x' bewirkt das Erstellen einer vollstaendigen Kopie des Quell-Verzeichnisses.
		Alle Dateien, die NICHT bearbeitet werden muessen, werden zusaetzlich in das
		Ziel-Verzeichnis kopiert.
		Achtung: Unterverzeichnisse werden NICHT bearbeitet oder kopiert.
	Bezueglich der globalen Optionen vergleiche 'Einleitung'

  z.B. fuer ProTrain 1: "java TSUtil -lC:\Logdat.log unc -w C:\TRSim\routes\ProTrain_Rheintal"

  Einsatz der erzeugten Daten:
	- Wenn Option '-x' spezifiziert: Entsprechendes Verzeichnis der Strecke loeschen und mit dem
		gleichnamigen Verzeichnis aus 'newRoute' ersetzen.
	- Sonst: Dateien im entsprechenden Verzeichnis der Strecke mit den Dateien aus dem gleichnamigen
		Verzeichnis in 'newRoute' ueberschreiben.

19) Mischen einer Streckendefinition in eine andere
  Die Funktion 'merge' mischt eine Streckendefinition in eine andere. Dazu sind folgende Voraussetzungen
  zu beachten:
	- Beide Streckendefinitionen duerfen KEINE Tile-Definition gemeinsam haben
		Wenn dennoch eine gemeinsame Tile-Definition existiert, wird der entsprechende Tile
		der einzumischenden Strecke ignoriert und nicht benutzt. Dies KANN zu Inkonsistenzen
		im Bereich der Datenbanken (*.tdb,*.rdb,...) fuehren und entsprechende Fehlermeldungen
		erzeugen.
		Dies betrifft auch LO-Tile-Definitionen!
	- Die Basis fuer dynamische Schienen muss identisch sein und der AKTUELLEN globalen 'tsection.dat'
	   entsprechen.

  Waehrend des Misch-Vorgangs werden auch Signal-Definitionen, Shapes, Texturen, Terrtex-Dateien und
  Sound-Definitionen, die fuer die Gesamtstrecke benoetigt werden und die nicht in der Basisstrecke vorhanden
  sind, uebernommen. Hier ist insbesonders auf Inkonsistenzen zu achten, da in der Basistrecke bereits andere
  Dateien unter gleichem Namen existieren koennen.

  Hinweis: Es ist sinnvoll, die erzeugte Streckendefinition mit der Funktion 'ichk' auf Integritaet zu
		pruefen. Damit koennen schon vorab eventuelle Probleme erkannt werden. 

  Der Aufruf sieht folgendermassen aus:
	C>java TSUtil [{-e|-w}] [-k] [-l[<logdat>]] [-m<id>] [-p<p>:<pfad>] [-q<n>:<dref>] merge
		[-h[{1|2|3}] [-p] [-s] <verz1> <verz2>
  Hierbei gilt:
	"verz1" ist der Dateipfad auf die Streckendefinition (Basis)
	"verz2" ist der Dateipfad auf die einzumischende Streckendefinition
	Die Option '-p' bewirkt, dass neben den Tile-Dateien (*.t) und den Tile-Daten-Dateien
		(*_y.raw, *_f.raw) auch die Pufferdateien (*_e.raw, *_n.raw) kopiert bzw. uebernommen
		werden.	Damit muss der TS diese nicht neu erstellen.
		Die Pufferdateien der 'LO_Tile'-Definitionen werden IMMER kopiert, auch wenn diese Option
		nicht aktiv ist (wegen Bug).
	Die Option '-h' wird benutzt, um den 'StaticDetailLevel' der eingemischten Schienendefinitionen
		zu modifizieren. Damit kann zusammen mit der Funktion 'cvrt' oder 'Hidewire' der
		Elektrifizierungsstatus der eingemischten Route separat behandelt werden.
		Wenn diese Option aktiv ist wird der 'StaticDetailLevel' der eingemischten
		'TrackObj'/'DynTrack'-Definitionen, deren AKTUELLER 'StaticDetailLevel' '0' ist, auf den
		Wert gesetzt, der mit '-h' spezifiziert wird.
		(Die Reihenfolge der Objekte innerhalb der World-Datei wird ebenfalls angepasst.)
	Mit Hilfe der Option '-s' kann das Mischen der Signaldefinitionen unterdrueckt werden. Falls diese
		Option angegeben wird bleibt die Signaldefinition der Basisroute unveraendert. Dies ist dann
		sinnvoll, wenn beide Strecken, die selben Signaldefinitionen nutzen.
	Bezueglich der globalen Optionen vergleiche 'Einleitung'

  z.B. fuer ProTrain 1: "java TSUtil -lC:\Logdat.log merge C:\TRSim\routes\ProTrain_Rheintal
			C:\TRSim\routes\WE8Mod"

  Einsatz der erzeugten Daten:
	- Verzeichnis 'world' der Strecke loeschen und mit dem Verzeichnis 'world' aus 'newRoute'
		ersetzen.
	- Verzeichnis 'TD' der Strecke loeschen und mit dem Verzeichnis 'TD' aus 'newRoute' ersetzen.
	- Verzeichnis 'Tiles' der Strecke loeschen und mit dem Verzeichnis 'Tiles' aus 'newRoute'
		ersetzen.
	- Verzeichnis 'LO_Tiles' der Strecke loeschen und mit dem Verzeichnis 'LO_Tiles' aus 'newRoute'
		ersetzen.
	- Wenn das Verzeichnis 'Paths' in 'newRoute' vorhanden ist, das Verzeichnis 'Paths' der Strecke
		loeschen und mit diesem Verzeichnis ersetzen.
	- Dateien im Verzeichnis 'Shapes' der Strecke mit den Dateien aus dem Verzeichnis
		'newRoute/shapes' ueberschreiben.
	- Dateien im Verzeichnis 'Textures' der Strecke mit den Dateien aus dem Verzeichnis
		'newRoute/textures' (incl. Unterverzeichnisse) ueberschreiben.
	- Dateien im Verzeichnis 'Terrtex' der Strecke mit den Dateien aus dem Verzeichnis
		'newRoute/terrtex' (incl. Unterverzeichnisse) ueberschreiben.
	- Dateien im Verzeichnis 'Sound' der Strecke mit den Dateien aus dem Verzeichnis
		'newRoute/sound' ueberschreiben.
	- Dateien aus dem Verzeichnis 'newRoute' in das Hauptverzeichnis der Strecke verschieben
		und vorhandene Dateien ueberschreiben.

20) Bereinigen der Resourcendefinitionen einer Strecke
  Die Funktion 'clrdb' analysiert die Schienen- und Strassendatenbank und entfernt alle nicht mehr
  genutzen Definitionsketten (TrEndNode - TrVectorNode/TrJunctionNode - TrEndNode). Eine Definitions-
  kette ist dann nicht mehr genutzt, wenn es KEIN gueltiges World-Objekt mehr gibt, das auf diese
  Kette verweist. Dabei ist es unerheblich, WIESO keine Referenz mehr existiert. Durch das Loeschen
  der Markierung eines Tiles als auch durch Loeschen eines Objektes in einer World-Datei, kann dies
  erfolgen.
  Zusaetzlich werden auch ALLE TrItem-Definitionen, die nicht mehr benutzt werden, aus den Datenbanken
  entfernt.
  Alle weiterhin benutzten World-/Sound-Dateien werden im Zielverzeichnis abgelegt. Damit ist es
  moeglich, nicht mehr benoetigte Dateien auszufiltern. 

  Weiterhin werden auch alle Activity-Definitionen untersucht, ob sie auf einen ungueltigen Eintrag
  verweisen. Alle dann noch gueltigen Activity-, Path-, Service- und Traffic-Dateien werden in das
  entsprechende Zielverzeichnis kopiert. Es werden dabei auch Abhaengigkeiten untereinander berueck-
  sichtigt. Eine Activity ist nur dann gueltig, wenn ALLE abhaengigen Komponenten (Pfade,...) auch
  verwendet werden.

  Der Aufruf sieht folgendermassen aus:
	C>java TSUtil [{-e|-w}] [-k] [-l[<logdat>]] [-m<id>] [-p<p>:<pfad>] [-q<n>:<dref>] clrdb
		[-t[ -p]] [-s] [-w] <verz>
  Hierbei gilt:
	"verz" ist der Dateipfad auf die Streckendefinition
	Mit der Option '-t' werden alle aktiven d.h. besiedelten Tile-Dateien (*.t) und deren Daten-
		Dateien in das entsprechende Zielverzeichnis ('newRoute/Tiles','newRoute/LO_Tiles')
		kopiert. Damit ist es moeglich eine Konsolidierung der fuer die Route benoetigten
		Dateien durchzufuehren.
	Die Option '-p' bewirkt, dass neben den Tile-Dateien (*.t) und den Tile-Daten-Dateien
		(*_y.raw, *_f.raw) auch die Pufferdateien (*_e.raw, *_n.raw) kopiert bzw. uebernommen
		werden.	Damit muss der TS diese nicht neu erstellen. Diese Option hat NUR Wirkung
		wenn auch '-t' spezifiziert wird.
	Wird die Option '-s' verwendet, werden ALLE Shape-Dateien, die sich im Verzeichnis 'Shapes' der
		Route befinden und auch (weiterhin) verwendet/referenziert werden, in das Unterverzeichnis
		'Shapes' von 'newRoute' kopiert. Das betrifft auch die Beschreibungsdateien '*.sd'.
		Weiterhin werden alle referenzierten Textur-Dateien ebenfalls nach 'newRoute' uebernommen.
		(newRoute/Textures;newRoute/Textures/Night;...)
	Um fehlende World-Dateien generieren zu lassen wird die Option '-w' verwendet. Wenn diese ange-
		geben wird, generiert TSUtil fuer jeden Quadranten einer Tile-Definition, der keine
		World-Datei hat, eine LEERE 'Dummy-World-Datei' ohne Eintraege.
	Bezueglich der globalen Optionen vergleiche 'Einleitung'

  z.B. fuer ProTrain 1: "java TSUtil -lC:\Logdat.log clrdb C:\TRSim\routes\ProTrain_Rheintal"

  Einsatz der erzeugten Daten:
	- Verzeichnis 'world' der Strecke loeschen und mit dem Verzeichnis 'world' aus 'newRoute'
		ersetzen.
	- Wenn das Verzeichnis 'Paths' in 'newRoute' vorhanden ist, das Verzeichnis 'Paths' der Strecke
		loeschen und mit diesem Verzeichnis ersetzen.
	- Wenn das Verzeichnis 'Services' in 'newRoute' vorhanden ist, das Verzeichnis 'Services' der
		Strecke loeschen und mit diesem Verzeichnis ersetzen.
	- Wenn das Verzeichnis 'Traffic' in 'newRoute' vorhanden ist, das Verzeichnis 'Traffic' der
		Strecke loeschen und mit diesem Verzeichnis ersetzen.
	- Wenn das Verzeichnis 'Activities' in 'newRoute' vorhanden ist, das Verzeichnis 'Activities'
		der Strecke loeschen und mit diesem Verzeichnis ersetzen.
	- Dateien aus dem Verzeichnis 'newRoute' in das Hauptverzeichnis der Strecke verschieben
		und vorhandene Dateien ueberschreiben.
		Hinweis: Diese Funktion schreibt auch die '*.trk'-Datei. Ggf. ist jedoch eine Verwendung dieser
			Datei nicht notwendig und die Datei muss nicht kopiert werden.
	- Wenn Option '-t' spezifiziert: Verzeichnis 'Tiles' der Strecke loeschen und mit dem
		Verzeichnis 'Tiles' aus 'newRoute' ersetzen.
	- Wenn Option '-t' spezifiziert: Verzeichnis 'LO_Tiles' der Strecke loeschen und mit dem
		Verzeichnis 'LO_Tiles' aus 'newRoute' ersetzen.
	- Wenn Option '-s' spezifiziert: Verzeichnis 'Shapes' der Strecke loeschen und mit dem
		Verzeichnis 'Shapes' aus 'newRoute' ersetzen.
	- Wenn Option '-s' spezifiziert: Verzeichnisbaum 'Textures' der Strecke loeschen und mit dem
		Verzeichnisbaum 'Textures' (Verzeichnis + alle Unterverzeichnisse) aus 'newRoute' ersetzen.

21) Aufbereiten einer Streckendefinition fuer den Import nach ZUSI
  Mit der Funktion("zusi") werden die in der Streckendefinition gespeicherten Daten in einer speziellen
  Form als .xml-Datei bereitgestellt. Damit diese Daten einen Sinn ergeben sollte die Streckendefinition
  moeglichst fehlerfrei aufgebaut sein. 

  Der Aufruf sieht folgendermassen aus:
	C>java TSUtil [{-e|-w}] [-k] [-l[<logdat>]] [-m<id>] [-p<p>:<pfad>] [-q<n>:<dref>] zusi <verz>
  Hierbei gilt:
	"verz" ist der Dateipfad auf die Streckendefinition
	Bezueglich der globalen Optionen vergleiche 'Einleitung'

  z.B. : "java TSUtil -lC:\Logdat.log zusi C:\TRSim\routes\ProTrain_Rheintal"

  Einsatz der erzeugten Daten:
	- Dateien aus dem Verzeichnis 'newRoute' fuer den Zugsimulator 'ZuSi' benutzen.

22) Verschieben der dynamischen Definitionen aus der lokalen 'tsection.dat'
  Diese Funktion ("shftdyn") verschiebt den Bereich der dynamischen Definitionen an die korrekte Position.
  Diese Position wird durch die aktuelle globale 'tsection.dat' vorgegeben. Es werden sowohl die
  besiedelten World-Dateien als auch die Schienendatenbank und die Strassendatenbank modifiziert und als
  Kopie in einem neuen Verzeichnis ('\newRoute') abgelegt. Die Dateistruktur einer Streckendefinition wird
  dabei beibehalten und die Unterverzeichnisse werden entsprechend erzeugt. Ausserdem wird im gleichen
  Verzeichnis eine neue "lokale" tsection.dat-Datei erzeugt. Damit ist es NICHT notwendig, die
  Schienendatenbank neu aufbauen zu lassen.

  Die Position des zu verschiebenden dynamischen Bereiches, wird duch die Argumente 'sha' (fuer Shapes)
  und 'sca' (fuer Sections) angegeben. Dieser Wert muss mit den Start-Indizes in der aktuellen lokalen
  'tsection.dat' uebereinstimmen. Die Laenge des Bereiches wird ebenfalls durch diese Datei vorgegeben.
  Dieser Bereich kann sich - im Gegensatz zur Funktion 'cvrt' - mit der aktuellen globalen 'tsection.dat'
  ueberlappen. 

  Um die im Aufruf spezifizierten Werte eindeutig zuordnen zu können, ist eine genaue Abfolge der Werte
  einzuhalten. Desshalb muss ggf. ein Platzhalter '+' angegeben werden.

  ACHTUNG: Obwohl die '-w'-Option aktiv ist, kann es vorkommen, dass einzelne 'DynTrack'-Objekte NICHT
		erzeugt werden. Auf Grund von fehlenden Informationen oder Fehlern in der Schienendatenbank
		kann es nicht sichergestellt werden, dass ALLE fehlenden Objekte auch generiert werden.

  Der Aufruf sieht folgendermassen aus:
	C>java TSUtil [{-e|-w}] [-k] [-l[<logdat>]] [-m<id>] [-p<p>:<pfad>] [-q<n>:<dref>] shftdyn
		[{-c|-u}] [-w] <verz> [{<sha>|+} [<sca>]]
  Hierbei gilt:
	"verz" ist der Dateipfad auf die Streckendefinition
	"sha" ist der ID-Wert an dem der dynamische Bereich der Pfade beginnt. Wenn dieser Wert nicht
		angegeben ist, wird ein Default von '263' angenommen. Dieser Defaultwert wird auch
		dann benutzt, wenn der Platzhalter '+' angeben wird. Dieser ist ggf. notwendig, wenn
		weitere Werte folgen.
	"sca" ist der ID-Wert an dem der dynamische Bereich der Sections beginnt. Wenn dieser Wert nicht
		angegeben ist, wird ein Default von '376' angenommen.
	Die Option '-w' bewirkt, dass fehlende dynamische Definitionen generiert und hinzugefuegt werden.
		Wenn diese aktiv ist, wird versucht aus den Informationen der Schienendatenbank das
		fehlende World-Objekt zu generieren. Damit koennen auch Pfade an die korrekte Position
		verschoben zu denen - auf Grund eines Fehlers - kein DynTrack-Objekt existiert.
		Das erzeugte World-Objekt sollte NACH Aufruf dieser Funktion nochmals mit dem
		Streckeneditor bearbeitet werden, um alle 'berechneten' Werte ggf. nochmals zu korrigieren. 
	Wenn die Option '-c' angegeben wird, werden die World-Dateien (*.w) auf jeden Fall in
		der komprimierten Binaer-Version [KB] geschrieben. Normalerweise, werden World-Dateien
		im selben Format geschrieben, wie sie auch gelesen wurden. Diese Option wird durch
		die Angabe von '-u' ggf wieder zurueckgesetzt.
	Wenn die Option '-u' angegeben wird, werden die World-Dateien (*.w) auf jeden Fall in
		der unkomprimierten Text-Version [UT] geschrieben. Normalerweise, werden World-Dateien
		im selben Format geschrieben, wie sie auch gelesen wurden. Diese Option wird durch
		die Angabe von '-c' ggf wieder zurueckgesetzt.
	Bezueglich der globalen Optionen vergleiche 'Einleitung'

  z.B. fuer ProTrain 1: "java TSUtil -lC:\Logdat.log shftdyn C:\TRSim\routes\ProTrain_Rheintal"

  Einsatz der erzeugten Daten:
	- Verzeichnis 'world' der Strecke loeschen und mit dem Verzeichnis 'world' aus 'newRoute'
		ersetzen.
	- Dateien aus dem Verzeichnis 'newRoute' in das Hauptverzeichnis der Strecke verschieben
		und vorhandene Dateien ueberschreiben.

23) Anzeigen/Ausgeben der Versionsidentifikationen der TSUtil-Klassen
  Mit der Funktion("version") werden die internen Identifikationen der einzelnen, von TSUtil
  benutzten Java-Klassen angezeigt und ausgegeben. Damit kann ggf. geprueft werden, ob die aktuelle
  Installation auf dem neuesten Stand ist.

  Der Aufruf sieht folgendermassen aus:
	C>java TSUtil [{-e|-w}] [-k] [-l[<logdat>]] [-m<id>] [-p<p>:<pfad>] [-q<n>:<dref>] version
  Hierbei gilt:
	"logdat" ist der (optionale) Name der LOG-Datei, der die Verlaufsmeldungen
		und Fehler aufnehmen soll
	Bezueglich der globalen Optionen vergleiche 'Einleitung'

  z.B. : "java TSUtil -lC:\Logdat.log version"

  Einsatz der erzeugten Daten:
	Diese Funktion erzeugt KEINE neuen Dateien! (ausser Log)

24) Komprimiern/Dekomprimieren/Reduzieren/Expandieren von Dateigruppen (S,T,W)
  Mit der Funktion 'fmgr' koennen Dateien oder Dateigruppen der verschieden Typen von Datendateien (S,T,W)
  bearbeitet und in ein Zielformat ('KB','UB','UT' (siehe oben)) umgewandelt werden.
  Das Quell-Verzeichnis und das Ziel-Verzeichnis werden bei dieser Funktion angegeben, sodass KEINE
  Bindung an eine bestimmte Route besteht. Quell- und Ziel-Verzeichnis können das GLEICHE Verzeichnis
  spezifizieren. In diesem Fall werden die selektierten Dateien OHNE Nachfrage ueberschrieben. (Das wirkliche
  Ziel der Ausgabe ist eine temporaere Datei, die danach in das angegebene Zielverzeichnis kopiert wird.)

  Mit dem Argument '-m' kann eine Maske spezifiziert werden, die zur Auswahl der Dateien im Quell-Verzeichnis
  benutzt wird. Diese Maske ist ein 'regulaerer Ausdruck' und bietet deshalb dessen Moeglichkeiten zur
  Spezifikation von Platzhaltern. Sie ist damit KEINE Dateimaske, wie MS sie zur Spezifikation von Dateien
  benutzt. Weitere Informationen koennen im Anhang dieser Anleitung nachgelesen werden. Dort werden auch
  die wichtigsten Platzhalter aufgelistet. Wenn dieses Argument (sowie die Option '-n') nicht angegeben wird,
  wird der Defaultwert aus der Konfigurationsdatei ('TSErrMsg...') geladen. (Shape('FleMgrMS'): '.+\.s'
  Tile('FleMgrMT'): '.+\.t' World('FleMgrMW'): '.+\.w')
  Mit der Option '-n' kann eine Selektionsmaske im 'Windows'-Stil angegeben werden. Diese wird zur Nutzung in einen
  regulaeren Ausdruck umgewandelt. Dabei werden als Platzhalter nur die Zeichen '?' und '*' unterstuetzt.

  Für diese Funktion ist KEIN weiteres Tool erforderlich. Sie basiert auf dem Konvertierungsalgorithmus von
  Martyn Griffin.
  Das vorliegende Format jeder selektierten Datei des Quell-Verzeichnisses wird analysiert und die Datei
  in das Zielformat konvertiert. Liegt das entsprechende Zielformat bereits vor, wird die Datei lediglich kopiert.

  Achtung: Diese Funktion ist NICHT besonders effektiv, da die Daten vor der Konvertierung in das
	Zielformat satzweise immer in das Format 'UT' umgewandelt werden. Lediglich, wenn das
	Zielformat bereits vorliegt, wird die Datei nicht bearbeitet sondern lediglich kopiert.

  Mit jedem Aufruf kann nur EIN Dateityp selektiert werden.

  Der Aufruf sieht folgendermassen aus:
	C>java TSUtil [{-e|-w}] [-k] [-l[<logdat>]] [-m<id>] [-p<p>:<pfad>] [-q<n>:<dref>] fmgr
		{-c|-e|-r} {-s|-t|-w} [{-m<msk>|-n<dmsk>}] [-o] <verz1> <verz2>
  Hierbei gilt:
	"verz1" ist der Dateipfad auf das Quell-Verzeichnis der Dateien
	"verz2" ist der Dateipfad auf das Ziel-Verzeichnis der Dateien
	"msk" spezifiziert das 'Sektionspattern' fuer die Dateiauswahl als regulaeren Ausdruck. Die Optionen '-m'
		und '-n' schliessen sich gegenseitig aus. Die LETZTE Angabe einer dieser Optionen wird benutzt.
		Wenn kein Pattern angegeben wird, werden ALLE Dateien des korrekten Typs bearbeitet.
	"dmsk" spezifiziert das 'Sektionspattern' fuer die Dateiauswahl im 'Windows'-Stil. Die Optionen '-n' und
		'-m' schliessen sich gegenseitig aus. Die LETZTE Angabe einer dieser Optionen wird benutzt. Wenn
		kein Pattern angegeben wird, werden ALLE Dateien des korrekten Typs bearbeitet.
		ACHTUNG: In der Dateimaske werden ausser den Zeichen '?' und '*' KEINE WEITEREN Platzhalter
			 unterstuetzt.
	Die Option '-c' (compress) bewirkt, dass das Zielformat der Dateien auf 'KB' festgelegt wird. Diese
		Auswahl ist nicht erlaubt, wenn die Option '-t' verwendet wird.
	Die Option '-e' (expand) bewirkt, dass das Zielformat der Dateien auf 'UT' festgelegt wird.
	Die Option '-r' (reduce) bewirkt, dass das Zielformat der Dateien auf 'UB' festgelegt wird.
	Die Option '-s' selektiert den Typ der zu bearbeitenden Datei(en) als 'Shape-Datei'. Nur
		Dateien dieses Typs werden bearbeitet. Alle Dateien eines anderen Typs werden abgewiesen.
	Die Option '-t' selektiert den Typ der zu bearbeitenden Datei(en) als 'Tile-Datei'. Nur
		Dateien dieses Typs werden bearbeitet. Alle Dateien eines anderen Typs werden abgewiesen.
	Die Option '-w' selektiert den Typ der zu bearbeitenden Datei(en) als 'World-Datei'. Nur
		Dateien dieses Typs werden bearbeitet. Alle Dateien eines anderen Typs werden abgewiesen.
	Wenn die Option '-o' aktiv ist, werden fehlende Unterverzeichnisse des Zielverzeichnisses
		automatisch angelegt. Wenn die Option NICHT aktiv ist, wird der Aufuf der Funktion
		in diesem Fall mit einem Fehler abgewiesen.
	Bezueglich der globalen Optionen vergleiche 'Einleitung'

  z.B. fuer ProTrain 1: "java TSUtil -lC:\Logdat.log fmgr -e -w -o C:\TRSim\routes\ProTrain_Rheintal\world
                        C:\temp\world"

  Einsatz der erzeugten Daten:
	Alle erzeugten Dateien werden direkt im korrekten Verzeichnis erzeugt.

25) Austauschen/Modifizieren der Signaldefinitionen einer Route
  Diese Funktion ("chgsig") wird verwendet, um Signaldefinitionen einer Route auszutauschen oder zu
  modifizieren. Dazu muss fuer jeden verwendeten Signaltyp (Signalshape) eine Konvertierungsanweisung erstellt
  und in einem zusaetzlichen Verzeichnis innerhalb der Route verfuegbar gemacht werden. Die
  Konvertierungsanweisungen folgen einer festen Syntax, die im Anhang D beispielhaft beschrieben wird.
  Alle erzeugten modifizierten Dateien werden im Verzeichnis '/newRoute' abgelegt. Dies betrifft AUCH die
  neuen Zieldefinitionen der Signale, die in dieses Verzeichnis kopiert werden und damit die Originaldefinitionen
  ueberschreiben.
  Diese Funktion kann auch zum Umbenennen von Shape-Namen oder Loeschen der Signale benutzt werden (vgl. Anhang D).

  Diese Funktion ist auch in der Lage, statische Objekte, die eng mit Signaldefinitonen verbunden sind (z.B.
  Signaltafeln) durch andere, neue zu ersetzen oder zu loeschen. Naehere Informationen dazu sind im Anhang D
  aufgefuehrt.

  ACHTUNG: Da diese Funktion die TrItem-Definitionen der ALTEN Signaldefinitionen NICHT entfernt. Ist es notwendig,
	nach der Aktivierung der Aenderungen zusaetzlich AUCH die TSUtil-Funktion 'rendb' mit den Optionen '-w','-r'
	und '-a' zu verwenden.
  Bemerkung: Nach Abschluss der Aktionen, sollte mit Hilfe der 'ichk'-funktion die Integritaet der Route ueberprueft
	werden, da sich in die Konvertierungsanweisungen leicht Fehler einschleichen.

  Der Aufruf sieht folgendermassen aus:
	C>java TSUtil [{-e|-w}] [-k] [-l[<logdat>]] [-m<id>] [-p<p>:<pfad>] [-q<n>:<dref>] chgsig [-c<n>]
		[-s<datnme>] [-r] <vz> <verz>
  Hierbei gilt:
	"verz" ist der Dateipfad auf die Streckendefinition
	"vz" ist der Name eines Verzeichnisses, das folgende Dateien enthaelt:
		+ Die Signaldefinitionsdatei des Ziel-Signalsystems ('sigcfg.dat')
		+ Die Scriptdefinitionsdatei(en) des Ziel-Signalsystems (z.B. 'sigscr.dat')
			(Der aktuelle Name der Script-Definitionsdatei ist in 'sigcfg.dat' festgelegt.)
		+ Die Konvertierungsanweisungen (Default-Name: 'chgSig.dat')
		Dieses Verzeichnis wird RELATIV zur Routendefinition verwendet.
	Die Option '-c' veranlasst, das Kopieren der Shape-Dateien, die im Rahmen der Umstellung verwendet werden,
		in das Shape-Verzeichnis der Strecke. <n> spezifiziert dazu ein Quellverzeichnis, das mit Hilfe
		der globalen Option '-q' (siehe dort) naeher spezifiziert wird. Alle Signal-/Signalobjekt-Shapes
		die durch die Konvertierung neu in der Strecke benutzt werden, sowie deren *.sd-Dateien werden 
		aus dem Quellverzeichnis in das Shape-Verzeichnis kopiert. Falls eine gleichnamige Datei dort
		bereits existiert, wird diese ueberschrieben.
		In diesem Fall wird auch ein *.ref-Eintrag fuer ein solches Object in der *.ref-Datei erzeugt.
		Vorraussetzung jedoch ist, dass ein solcher *-ref-Eintrag in der Steuerdatei bereitgestellt wurde. 
	Die Option '-r' sorgt dafuer, dass die Shape-Dateien, der Objekte, die im Rahmen der Umstellung entfernt
		werden, auch aus dem Shape-Verzeichnis geloescht werden. Dies betrifft auch die *.sd-Dateien.
		Diese Aktion funktioniert jedoch nur dann, wenn weitere Voraussetzungen vorliegen, die beim
		Autor erfragt werden koennen.
		Ein fuer solche Objecte vorhandener *.ref-Eintrag wird ggf. ebenfalls aus der *.ref-Datei
		geloescht.
	Mit Hilfe der Option '-s' kann man den Namen der Datei, die die Konvertierungsanweisungen
		enthaelt, setzen und damit den Default-Namen ueberschreiben.
	Bezueglich der globalen Optionen vergleiche 'Einleitung'

  z.B. fuer ProTrain 1: "java TSUtil -lC:\Logdat.log chgsig -sSigcvrt.txt $SigCvrt
			C:\TRSim\routes\ProTrain_Rheintal"

  Einsatz der erzeugten Daten:
	- Verzeichnis 'world' der Strecke loeschen und mit dem Verzeichnis 'world' aus 'newRoute'
		ersetzen.
	- Dateien aus dem Verzeichnis 'newRoute' in das Hauptverzeichnis der Strecke verschieben
		und vorhandene Dateien ueberschreiben.
	-Ausfuehren der 'rendb'-funktion mit option '-w', '-r' und '-a'.

26) Protokollieren der Positionen aller Signaldefinitionen
  Die Funktion "srchsig" kann benutzt werden, um die Positionen ALLER Signalobjekte zu protokollieren.
  Diese Funktion erzeugt fuer jede Signaldefinition (Signal-Shape), die in der Signalkonfiguration
  definiert ist, eine Text-Datei im Verzeichnis 'newroute'. Diese Datei erhaelt fuer jeden Typ einer
  Signaldefinition innerhalb der Strecke eine Datenzeile, die die genaue Position der Signalobjekte
  gemaess World-Datei beschreibt.
  Der Dateiname dieser Text-Datei ist wie folgt aufgabaut:
	'<shape>.<xxxx>.txt'					mit
		<shape> ist der Name der Signaldefinition ohne Endung.
		<xxxx> gibt an wie viele Definitionszeilen diese Datei enthaelt. Dies beschreibt gleichzeitig,
			wie oft eine Signaldefinition innerhalb der Strecke verwendet wird.
  Mit dieser Funktion wird gleichzeitig eine Integritaetspruefung der Strecke vorgenommen.
  Es erfolgen KEINE Veraenderungen in der Streckendefinition!

  Der Aufruf sieht folgendermassen aus:
	C>java TSUtil [{-e|-w}] [-k] [-l[<logdat>]] [-m<id>] [-p<p>:<pfad>] [-q<n>:<dref>] srchsig <verz>
  Hierbei gilt:
	"verz" ist der Dateipfad auf die Streckendefinition
	Bezueglich der globalen Optionen vergleiche 'Einleitung'

  z.B. fuer ProTrain 1: "java TSUtil -lC:\Logdat.log srchsig C:\TRSim\routes\ProTrain_Rheintal"

  Einsatz der erzeugten Daten:
	Diese Funktion erzeugt lediglich Protokolldateien, die nicht eingesetzt werden!

27) Selektives Verschieben von Streckenobjekten ueber Quadrantengrenzen
  Um die Objekte einer Streckendefinition zu verschieben ohne das Terrain zu veraendern, wird die Funktion "mveobj"
  verwendet. Die Objekte koennen dabei um einen beliebigen Wert in allen drei Dimensionen verschoben werden, soweit
  nicht insgesamt der gueltige Positionsbereich verlassen wird. Die Angabe der Werte, um die verschoben werden soll,
  erfolgt in Meter, jedoch sind KEINE ganzzahligen Werte gefordert. Die Genauigkeit ist durch TS bedingt und
  betraegt ca. 1/10000 m (Postionswerte enthalten meist 5 Nachkommastellen).
  Wird als Ziel der Verschiebung von Objekten ein Quadrant erreicht, der NICHT definiert ist, kann dieser durch
  eine lokale Option mit Defaultwerten erzeugt werden, damit die Objekte dort plaziert werden koennen. Die Hoehe
  eines solchen Quadranten, dessen Terrain aus einer flachen Ebene besteht, wird durch den Verschiebungswert
  der Hoehe ("dh") bestimmt.
 
  Die verschobenen Objekte koennen mit lokalen Optionen auf Schienenobjekte und schienenverbundene Objekte
  beschraenkt werden. Wenn zusaetzlich Strassenobjekte NICHT verschoben werden, sollte darauf geachtet werden,
  ob die Relation zwischen Schienen und Strassen korrekt ist. Weiterhin ist diese Einschraenkung NICHT moeglich,
  wenn 'LevelCr'-Objekte (Bahnuebergaenge) existieren, da dort eine FESTE Beziehung zwischen Schiene und Strasse
  besteht. Dies wird jedoch durch TSUtil NICHT geprueft.

  Der Aufruf sieht folgendermassen aus:
	C>java TSUtil [{-e|-w}] [-k] [-l[<logdat>]] [-m<id>] [-p<p>:<pfad>] [-q<n>:<dref>] mveobj
		[-g] [{-t|-T}[[<om>]:<s>] [-r]] [-v] [-w] <verz> <dx> <dh> <dz>
  Hierbei gilt:
	"verz" ist der Dateipfad auf die Streckendefinition
	"dx" gibt den Wert an, um den die Objekte in X-Richtung (Ost(+)/West(-)) verschoben werden sollen (+/-)
	"dh" gibt den Wert an, um den die Hoehe der Objekte modifiziert werden soll (+/-)
	"dz" gibt den Wert an, um den die Objekte in Z-Richtung (Nord(+)/Sued(-)) verschoben werden sollen (+/-)
	Wenn ein Objekt aus einem Quadranten geschoben wird und der Zielquadrant nicht definiert ist,
		wird eine Fehlermeldung erzeugt und das Objekt NICHT verschoben. Falls jedoch die Option '-g'
		aktiv ist, wird statt dessen der Quadrant mit 'Defaultwerten' generiert und das Objekt in diesen
		verschoben. Diese Option beinhaltet auch, dass ALLE fehlenden World-Dateien ggf. als leere
		Definitionen erzeugt werden.
	   Bemerkung: Die Default-Terraindefinition eines solchen Quadranten ist in der Datei 'ErrMsg' gespeichert.
		(Schluessel='TSTF*000')
	Die Option '-t'/'-T' schraenkt die Menge der verschobenen Objekte auf Schienen- und Strassenobjekte sowie
		alle zugeordneten interaktiven Elemente (wie Bahnuebergaenge, Signale, Leitungsmasten,...) ein.

		Manchmal/meistens werden Fahrleitungsmasten innerhalb einer Route als 'Static' definiert. Damit
		sie jedoch als 'schienenverbundenes' Objekt erkannt werden, ist eine Definition als 'Gantry'-
		Objekt notwendig. (Benutzung von 'Gantry' in der Ref-Datei.)
		Um zusaetzliche explizit selektierte Objekte zu verschieben, kann die Option von einer Objektmaske "om"
		und einer Selektionsanweisung "s" gefolgt werden. "om" spezifiziert eine Objektmaske, wie sie als
		X-Maske im Anhang A beschrieben ist. Dementsprechend muss dieser Wert aus genau 4 Hexadezimalziffern
		bestehen. "s" ist eine Zeichenkette, die - wenn der Objekttyp stimmt - gegen den Dateinamen des
		einzubeziehenden Objektes geprueft wird. Im Fall '-t' ist zur Selektion ausreichend, dass der Dateiname
		des Objektes mit der Zeichenkette beginnt, die als "s" angegeben wurde. Im Fall '-T' spezifiziert "s"
		einen regulaeren Ausdruck, der zu dem gesamten Dateinamen passen muss.
		Bei der Pruefung des Dateinamens wird die Gross-/Kleinschreibung NICHT beachtet.
		Falls das Objekt KEINEN Dateinamen besitzt (z.B. Forest), wird die gesamte Namenspruefung uebergangen.
		Die Objektmaske "om" kann auch weggelassen werden, wenn NUR 'statische Objekte' zusaetzlich selektiert
		werden sollen. (Defaultwert ist '0008')
		Die Option '-t'/'-T' kann mehr als einmal angegeben werden.
		Beispiel: '-T0008:Pltf.*\.s' - Selektiere zusaetzliche statische Objekte deren Dateiname mit 'Pltf'
			beginnt und spaeter von '.s' gefolgt wird. (oder '-T:Pltf.*\.s')
	Die Option '-r' bewirkt dass zusaetzlich zu den Einschraenkungen gemaess Option '-t'/'-T' AUCH
		Strassenobjekte NICHT verschoben werden. Diese Option ist nur wirksam wenn auch '-t'/'T' spezifiziert
		ist.
	   Achtung: '-r' darf NICHT spezifiziert werden, wenn die Strecke 'LevelCr'-Objekte enthaelt.
	Die Option '-v' unterdrueckt die Korrektur der Positionswerte von Sound-Objekten. Normalerweise werden
		Soundobjekte bei dieser Funktion in den korrekten Quadranten gemaess der Positionsangabe
		verschoben. Wenn dies nicht moeglich ist, weil der Zielquadrant nicht existiert, werden
		stattdessen die Positonswerte auf einen gueltigen Wert korrigiert. Ist diese Option spezifiziert,
		erfolgt diese Korrektur NICHT und solche Soundobjekte erzeugen einen Fehler.
	Wenn beim Verschieben der Objekte Fehler erkannt werden, wird die Funktion 'mveobj' abgebrochen und KEINE
		Ausgabedaten erzeugt. Wird jedoch die Option '-w' angegeben, so werden auch in diesem Fall die
		Ausgabedaten (World-Dateien,...) im Verzeichnis 'newroute' neu erstellt. 
	Bezueglich der globalen Optionen vergleiche 'Einleitung'

  z.B. fuer ProTrain 1: "java TSUtil -lC:\Logdat.log mveobj -g C:\TRSim\routes\ProTrain_Rheintal"

  Einsatz der erzeugten Daten:
	- Verzeichnis 'world' der Strecke loeschen und mit dem Verzeichnis 'world' aus 'newRoute'
		ersetzen.
	- Verzeichnis 'Paths' der Strecke loeschen und mit dem Verzeichnis 'Paths' aus 'newRoute'
		ersetzen.
	- Das Verzeichnis 'Tiles' aus 'newRoute' in das Verzeichnis 'Tiles' der Strecke kopieren.
		Ueberschreiben der Dateien falls notwendig.
	- Falls das Verzeichnis 'TD' in 'newRoute' geschrieben wurde, das Verzeichnis 'TD' der Strecke
		loeschen und mit dem Verzeichnis 'TD' aus 'newRoute' ersetzen.
	- Dateien aus dem Verzeichnis 'newRoute' in das Hauptverzeichnis der Strecke verschieben
		und vorhandene Dateien ueberschreiben.
		Hinweis: Diese Funktion schreibt auch die '*.trk'-Datei. Ggf. ist jedoch eine Verwendung dieser
			Datei nicht notwendig und die Datei muss nicht kopiert werden.

28) Aufteilen und Zusammenfuegen von World-Dateien
  Die World-Dateien sind gelegentlich zu gross, um mit dem Streckeneditor korrekt verarbeitet zu werden. Dann
  treten beim Sichern einer Strecke Abbrueche auf und World-Dateien werden nicht korrekt geschrieben.
  Die Funktion 'world' ist in der Lage den Inhalt von World-Dateien jeweils auf mehrere Dateien aufzuteilen,
  indem alle nicht unbedingt notwendigen Definitionen (statische Objekte) in andere, zusaetzliche World-Dateien
  ausgelagert werden. Weiterhin ist diese Funktin ebenfalls in der Lage die World-Dateien mit diesen
  'Auslagerungsdateien' wieder zusammenzumischen.
  Diese Funktion realisiert die 'Split'-Aktion sowie die 'Merge'-Aktion. Erstere erzeugt aus den World-Dateien
  weitere 'zusaetzliche World-Dateien', indem statische Objekte aus der Original-Datei in diese zusaetzliche
  Datei verschoben werden. Beide Dateien werden als World-Dateien im Verzeichnis 'newRoute/world' abgelegt, wobei
  die zusaetzlichen world-Dateien mit der spezifizierten erweiterten Dateiendung gekennzeichnet werden.
  Bei der Merge-Aktion werden die World-Dateien (aus dem Verzeichnis 'world') mit den zusaetzlichen World-Dateien
  im Verzeichnis 'newRoute/world' zusammengemischt und als (originale) World-Datei in 'newRoute/world' abgelegt.

  Der Aufruf sieht folgendermassen aus:
	C>java TSUtil [{-e|-w}] [-k] [-l[<logdat>]] [-m<id>] [-p<p>:<pfad>] [-q<n>:<dref>] world
		{-m<s1>|-s<s1>} [{-c|-u}] [-h<sl>] [-q<verz>] <verz>
  Hierbei gilt:
	"verz" ist der Dateipfad auf die Streckendefinition
	Wenn die Option '-c' angegeben wird, werden die World-Dateien (*.w) auf jeden Fall in
		der komprimierten Binaer-Version [KB] geschrieben. Normalerweise, werden World-Dateien
		im selben Format geschrieben, wie sie auch gelesen wurden. Diese Option wird durch
		die Angabe von '-u' ggf wieder zurueckgesetzt. Diese Option trifft NICHT auf die zusaetzlichen
		World-Dateien zu. Diese werden immer im Format 'UT' geschrieben.
	Mit Hilfe der Option '-h' kann man den Umfang der Objekte, die ausgelagert werden sollen, zu bestimmen.
		Auf die Option folgt die Angabe eines 'StaticDetailLevel' im Bereich 3 bis 9 sowie 0. Alle statischen
		Objekte der World-Dateien, die diesen 'StaticdetailLevel' besitzen, werden NICHT in die zusätzlichen
		World-Dateien ausgelaget, sondern verbleiben in der Originaldatei.
		Diese Option kann mehrfach angegeben werden. Sie hat keine Wirkung, wenn die Merge-Aktion benutzt wird. 
	Die Option '-m' selektiert die 'Merge'-Aktion dieser Funktion. "s1" spezifiziert dabei die zusaetzliche
		Dateiendung, die an den Namen der World-Datei angehaengt werden muss, um den Namen der zu mischenden
		World-Datei zu erhalten. Die Option '-m' kann mehrfach angegeben werden, wenn mehrere Dateien
		gleichzeitig zusammengemischt werden sollen. In diesem Fall sollten jedoch, die Dateiendungen ("s1")
		NICHT identisch sein, da sonst eine zusaetzliche World-Datei mehrfach gemischt wird.
		Diese Option ist NICHT mit der Option '-s' vertraeglich. Nur eine dieser Optionen kann angegeben werden.
		Achtung: Wenn die Option '-m' mehrfach mit der GLEICHEN Dateierweiterung ("s1") spezifiziert wird,
			wird auch zusaetzliche World-Datei mehrfach eingemischt.
	Alle zusaetzlichen World-Dateien, die mit Hilfe der Merge-Aktion eingemischt werden, werden standardmaessig
		im Verzeichnis 'newRoute/world' gesucht. Die Option '-q' kann diesen Pfad aendern. Auf diese Option
		folgt die Angabe eines Dateipfades, die die Lokation der zusaetzlichen World-Dateien angibt.
		Diese Option hat keine Wirkung, wenn die Split-Aktion verwendet wird.  
	Die Option '-s' selektiert die 'Split'-Aktion dieser Funktion. "s1" spezifiziert dabei die Dateiendung, die
		an den Namen der World-Datei angehaengt werden muss, um den Namen der World-Datei fuer die
		Auslagerung der statischen Objekte zu erhalten.
		Diese Option ist NICHT mit der Option '-m' vertraeglich. Nur eine dieser Optionen kann angegeben werden.
		Achtung: Damit Oberleitungsmasten NICHT ausgelagert werden, muessen sie mit 'Gantry' und NICHT mit
			'Static' gekennzeichnet werden.
	Wenn die Option '-u' angegeben wird, werden die World-Dateien (*.w) auf jeden Fall in
		der unkomprimierten Text-Version [UT] geschrieben. Normalerweise, werden World-Dateien
		im selben Format geschrieben, wie sie auch gelesen wurden. Diese Option wird durch
		die Angabe von '-c' ggf wieder zurueckgesetzt. Die zusaetzlichen World-Dateien werden immer im
		Format 'UT' geschrieben.
	Bezueglich der globalen Optionen vergleiche 'Einleitung'

  z.B. fuer ProTrain 1: "java TSUtil -lC:\Logdat.log world -sv2 C:\TRSim\routes\ProTrain_Rheintal"

  Einsatz der erzeugten Daten:
	- Dateien im Verzeichnis 'World' der Strecke mit den World-Dateien aus dem Verzeichnis
		'newRoute/world' ueberschreiben.
	- Zusaetzliche World-Dateien aus dem Verzeichnis 'newRoute/world' sichern. (Aktion: 'Split')

29) Kopieren und Modifizieren von Dateien-/Dateigruppen (S,T,W)
  Mit der Funktion 'fcpy' koennen Dateien oder Dateigruppen der verschieden Typen von Datendateien (S,T,W)
  bearbeitet und in ein Zielformat ('KB','UB','UT' (siehe oben)) umgewandelt werden. Zusaetzlich ist es
  moeglich, waehrend des Kopiervorgangs den Inhalt der Datei zu modifizieren. Es kann nach einer (oder mehreren)
  Datenketten gesucht werden und diese durch je eine andere ersetzt werden.
  Das Quell-Verzeichnis und das Ziel-Verzeichnis werden bei dieser Funktion angegeben, sodass KEINE
  Bindung an eine bestimmte Route besteht. Quell- und Ziel-Verzeichnis können das GLEICHE Verzeichnis
  spezifizieren. In diesem Fall werden die selektierten Dateien OHNE Nachfrage ueberschrieben. (Das wirkliche
  Ziel der Ausgabe ist eine temporaere Datei, die danach in das angegebene Zielverzeichnis kopiert wird.)

  Mit dem Argument '-f' kann eine Maske spezifiziert werden, die zur Auswahl der Dateien im Quell-Verzeichnis
  benutzt wird. Diese Maske ist ein 'regulaerer Ausdruck' und bietet deshalb dessen Moeglichkeiten zur
  Spezifikation von Platzhaltern. Sie ist damit KEINE Dateimaske, wie MS sie zur Spezifikation von Dateien
  benutzt. Weitere Informationen koennen im Anhang dieser Anleitung nachgelesen werden. Dort werden auch
  die wichtigsten Platzhalter aufgelistet. Wenn dieses Argument (sowie die Option '-n') nicht angegeben wird,
  wird der Defaultwert aus der Konfigurationsdatei ('TSErrMsg...') geladen. (Shape('FleMgrMS'): '.+\.s'
  Tile('FleMgrMT'): '.+\.t' World('FleMgrMW'): '.+\.w')
  Mit der Option '-n' kann eine Selektionsmaske im 'Windows'-Stil angegeben werden. Diese wird zur Nutzung in einen
  regulaeren Ausdruck umgewandelt. Dabei werden als Platzhalter nur die Zeichen '?' und '*' unterstuetzt.

  Für diese Funktion ist KEIN weiteres Tool erforderlich. Sie basiert auf dem Konvertierungsalgorithmus von
  Martyn Griffin.
  Das vorliegende Format jeder selektierten Datei des Quell-Verzeichnisses wird analysiert und die Datei
  in das Zielformat konvertiert. Dabei werden eventuelle Modifikationen durchgefuehrt. Dieser Vorgang ist
  unabhaengig vom Zielformat. Aus diesem Grund ist auch moeglich, KEINE Aenderung des Dateiformats zu
  spezifizieren, indem die Zielformatangabe (c,e,r) weggelassen wird.

  Achtung: Waehrend der Ausfuehrung dieser Funktion, werden die Quell-Dateien satzweise immer in das Format 'UT'
	umgewandelt, der Datensatz wird ggf. modifiziert und im Zielformat in die Zieldatei gespeichert.

  Mit jedem Aufruf kann nur EIN Dateityp selektiert werden.

  Der Aufruf sieht folgendermassen aus:
	C>java TSUtil [{-e|-w}] [-k] [-l[<logdat>]] [-m<id>] [-p<p>:<pfad>] [-q<n>:<dref>] fcpy
		[-b] {-a|-s|-t|-u|-w} [-@<idat>] [{-c|-e|-r}] [{-f<msk>|-n<dmsk>}] [-{m|M}<s1>:<s2>] [-o] [-p]
		[-x] [-z<mpt>] <verz1> <verz2>
  Hierbei gilt:
	"verz1" ist der Dateipfad auf das Quell-Verzeichnis der Dateien
	"verz2" ist der Dateipfad auf das Ziel-Verzeichnis der Dateien
	"msk" spezifiziert das 'Sektionspattern' fuer die Dateiauswahl als regulaeren Ausdruck. Die Optionen '-f'
		und '-n' schliessen sich gegenseitig aus. Die LETZTE Angabe einer dieser Optionen wird benutzt.
		Wenn kein Pattern angegeben wird, werden ALLE Dateien des korrekten Typs bearbeitet.
	"dmsk" spezifiziert das 'Sektionspattern' fuer die Dateiauswahl im 'Windows'-Stil. Die Optionen '-n' und
		'-f' schliessen sich gegenseitig aus. Die LETZTE Angabe einer dieser Optionen wird benutzt. Wenn
		kein Pattern angegeben wird, werden ALLE Dateien des korrekten Typs bearbeitet.
		ACHTUNG: In der Dateimaske werden ausser den Zeichen '?' und '*' KEINE WEITEREN Platzhalter
			 unterstuetzt.
	"mpt" spezifiziert den Ersetzungsausdruck fuer die Modifikation der Dateinamen. Die Namen der selektierten
		Dateien werden - wenn '-z' spezifiziert ist - mit Hilfe dieses Ausdrucks in den Dateinamen der Zieldatei
		umgewandelt. Dies erfolgt mit den Mitteln zur Bearbeitung von 'regulaeren Ausdruecken'. Das
		bedeutet, dass 'Capture-Groups', die innerhalb eines "msk"-Ausdrucks (vgl. oben) spezifiziert sind,
		beachtet werden.
	"idat" ist der Dateiname (mit Pfad) einer Textdatei, die weitere Optionen enthaelt. Der gesamte Inhalt
		dieser Datei wird dadurch Teil der Kommandozeile zur Aufruf der Funktion. Die lokalen Optionen,
		die in der Optionendatei gespeichert sind, haben die gleiche Form als wenn sie in der Kommandozeile
		stuenden(d.h.: '-' wird immer benoetigt). Die Optionen koennen in der Datei auf mehrere Zeilen
		aufgeteilt werden.
	Die Option '-a' selektiert den Typ der zu bearbeitenden Datei(en) als 'Text-Datei(Ascii)'. Nur
		Dateien dieses Typs werden bearbeitet. Alle Dateien eines anderen Typs werden abgewiesen oder erzeugen
		Lese-Fehler.
	Die Option '-b' selektiert den Block-Kopiermodus als alternative Uebertragungart der Datei. Ist diese Option aktiv,
		wird jeweils die gesamte Datei in den Speicher gelesen, dort bearbeitet und danach auf das Ziel uebertragen.
		Damit sind Modifikationen moeglich, die mehrere Zeilen betreffen. Da dies einen erheblich hoeherern
		Speicherbedarf benoetigt, ist diese Option zu vermeiden.
	Die Option '-c' (compress) bewirkt, dass das Zielformat der Dateien auf 'KB' festgelegt wird. Diese
		Auswahl ist nicht erlaubt, wenn die Option '-t' verwendet wird. Diese Option wird ebenfalls ignoriert,
		falls der selektierte Dateityp 'Text' (Ascii/Unicode) ist.
	Die Option '-e' (expand) bewirkt, dass das Zielformat der Dateien auf 'UT' festgelegt wird.
		Diese Option wird ignoriert, falls der selektierte Dateityp 'Text' (Ascii/Unicode) ist.
	Option '-m'/'-M' kann verwendet werden, um den Inhalt der Dateien waehrend des Kopiervorgangs zu modifizieren.
		Dazu wird Zeile fuer Zeile der Daten geprueft, ob der Inhalt der Spezifikation entspricht, die als
		Datenkette "s1" angegeben ist. Die Gross-/Klein-Schreibung wird dabei NUR DANN beachtet, wenn die
		Option '-p' angegeben wurde. Im Fall '-m' ist diese Spezifikation genau dann erfuellt, wenn die
		Datenzeile den Wert aus "s1" ENTHAELT. Dann und nur dann wird dieser Teil der Daten durch die
		Datenkette "s2" ersetzt.
		Im Fall '-M' enthaelt "s1" einen 'regulaeren Ausdruck'(vgl. Anhang B), der fuer den Anfang der Datenzeile
		zutreffen muss (match). Dann wird die Zeile gemaess den Angaben aus "s2" modifiziert, wobei
		Rueckverweise auf den Originalwert moeglich sind(Capture-Group).
		Option '-m'/'-M' kann mehrfach angegeben werden.
		Es wird pro Datenzeile versucht, die Modifikation in der Reihenfolge der Spezifizierung durchzufuehren.
		Diese Reihenfolge ist somit extrem wichtig.
		Falls der Block-Modus benutzt wird, werden die Modifikationsanweisungen einmal auf die gesamte Datei
		angewendet. Dennoch werden jeweils ALLE Auftreten der Suchsequenzen beachtet und bearbeitet.

		Beispiel: '-m"SectionIdx ( 150 )":"SectionIdx ( 4294967280 )"' - Waehrend des Kopierens wird in den
			Datenzeilen nach 'SectionIdx ( 150 )' gesucht und falls dies gefunden wird, durch den Wert
			"SectionIdx ( 4294967280 )" ersetzt.
			Achtung: Damit diese Optionenangabe in der Kommandozeile zum Aufruf von TSUtil korrekt erkannt
				wird (Leer- und Anfuehrungszeichen), muss die Angabe wie folgt aussehen:
				"-m\"SectionIdx ( 150 )\":\"SectionIdx ( 4294967280 )\""
		Beispiel: '-M"^(.*)SectionIdx \( 150":"$1SectionIdx ( 4294967280"' - Dieses Beispiel enspricht dem
			vorangehenden Beispiel unter Verwendung eines 'regulaeren Ausdrucks'. Hier ist zu sehen, dass
			ein 'match' vorliegt, wenn der ANFANG der Datenzeile VOLLSTAENDIG mit dem 'regulaeren Ausdruck'
			uebereinstimmt. Der Rest der Zeile bleibt unveraendert.
	Wenn die Option '-o' aktiv ist, werden fehlende Unterverzeichnisse des Zielverzeichnisses
		automatisch angelegt. Wenn die Option NICHT aktiv ist, wird der Aufuf der Funktion
		in diesem Fall mit einem Fehler abgewiesen.
	Die Option '-p' bewirkt, dass das bei der Anwendung der Option '-m/-M' die Gross-/Kleinschreibung beachtet
		wird.
	Die Option '-r' (reduce) bewirkt, dass das Zielformat der Dateien auf 'UB' festgelegt wird.
		Diese Option wird ignoriert, falls der selektierte Dateityp 'Text' (Ascii/Unicode) ist.
	Die Option '-s' selektiert den Typ der zu bearbeitenden Datei(en) als 'Shape-Datei'. Nur
		Dateien dieses Typs werden bearbeitet. Alle Dateien eines anderen Typs werden abgewiesen.
	Die Option '-t' selektiert den Typ der zu bearbeitenden Datei(en) als 'Tile-Datei'. Nur
		Dateien dieses Typs werden bearbeitet. Alle Dateien eines anderen Typs werden abgewiesen.
	Die Option '-u' selektiert den Typ der zu bearbeitenden Datei(en) als 'Text-Datei(Unicode)'. Nur
		Dateien dieses Typs werden bearbeitet. Alle Dateien eines anderen Typs werden abgewiesen oder erzeugen
		Lese-Fehler.
	Die Option '-w' selektiert den Typ der zu bearbeitenden Datei(en) als 'World-Datei'. Nur
		Dateien dieses Typs werden bearbeitet. Alle Dateien eines anderen Typs werden abgewiesen.
	Die Option '-x' hat NUR eine Wirkung, wenn AUCH die Option '-a' oder '-u' selektiert ist. Wird diese Option
		zusaetzlich angegeben, so spezifiziert '-a' oder '-u' NUR das Zielformat der kopierten Dateien,
		waehrend das Format der Quelldateien, jeweils dem nicht selektierten Formattyp entsprechen muss.
		Damit werden alle selektierten Dateien waehrend des Kopierens vom 'Ascii'-Format in das 'Unicode'-
		Format (oder vice versa) konvertiert. 
	Bezueglich der globalen Optionen vergleiche 'Einleitung'

  z.B. fuer ProTrain 1: "java TSUtil -lC:\Logdat.log fmgr -e -w -o C:\TRSim\routes\ProTrain_Rheintal\world
                        C:\temp\world"

  Einsatz der erzeugten Daten:
	Alle erzeugten Dateien werden direkt im korrekten Verzeichnis abgelegt.

30) Pruefen einer Signaldefinition unabhaengig von einer Strecke
  Mit der Funktion("testsig") kann die Integritaet einer Signaldefinition unabhaengig von einer konkreten Strecke
  geprueft werden. Es wird untersucht, ob die Definitionsdateien 'sigcfg.dat' und 'sigscr.dat' in sich korrekt sind.
  Weiter wird auch die Verbindung beider Dateien untersucht und ggf. eine Fehlermeldung ausgegeben.
  Es werden KEINERLEI Veraenderungen vorgenommen!

  Der Aufruf sieht folgendermassen aus:
	C>java TSUtil [{-e|-w}] [-k] [-l[<logdat>]] [-m<id>] [-p<p>:<pfad>] [-q<n>:<dref>] testsig <verz>
  Hierbei gilt:
	"verz" ist der Dateipfad auf die Signaldefinition
		Bezueglich der globalen Optionen vergleiche 'Einleitung'

  z.B. fuer ProTrain 1: "java TSUtil -lC:\Logdat.log testsig C:\TRSim\routes\ProTrain_Rheintal"

  Einsatz der erzeugten Daten:
	Diese Funktion erzeugt KEINE neuen Dateien! (ausser Log)




FIKTIVES GESAMTBEISPIEL (Funktion 'cvrt'):
Im folgenden Beispiel soll angenommen werden, dass im Verzeichnis "C:\TrSim" der
Trainsimulator installiert ist. Dort gibt es auch die Strecke "Usa3", die fuer Erweiter-
ungszwecke an eine neue 'tsection.dat' angepasst werden soll. Die z.Zt. noch gueltige
'tsection.dat' befindet sich im Verzeichnis "C:\TrSim\global". Die neue 'tsection.dat'
ist im Verzeichnis "C:\TrSim\neu" verfuegbar.

Im folgenden soll weiter angenommen werden, dass die Ausfuehrung der Befehle keine Fehler
erzeugt. Ausserdem ist die Pruefung der LOG-Datei nicht explizit aufgefuehrt.

a) Datensicherung erstellen

b) DOS-Fenster oeffnen (Eingabeaufforderung)
	Annahme: Das Fenster oeffnet sich auf das Verzeichnis "C:\"

c) Kopieren und sichern der aktuellen 'tsection.dat'
	C>md C:\TrSim\alt
	C>copy C:\TrSim\global\tsection.dat C:\TrSim\alt

d) Aktivieren der neuen 'tsection.dat' (bitte ueberschreiben)
	C>copy C:\TrSim\neu\tsection.dat C:\TrSim\global

e) Loeschen des Ziel-Verzeichnisses, wenn vorhanden
	C>deltree C:\TrSim\Routes\Usa3\newRoute

f) Konvertieren der Streckendefinition
	C>java TSUtil -lTSUtil.log cvrt -bC:/TrSim/alt/tsection.dat -c C:/TrSim/Routes/Usa3

g) Loeschen der Original-Dateien aus der Streckendefinition
	C>deltree C:\TrSim\Routes\Usa3\world

h) Aktivieren der neu erzeugten Dateien (bitte ueberschreiben)
	C>xcopy C:\TrSim\Routes\Usa3\newRoute\*.* C:\TrSim\Routes\Usa3 /s

i) ggf. erzeugte Dateien loeschen
	C>deltree C:\TrSim\Routes\Usa3\newRoute

j) ggf. Fenster wieder schliessen
	C>exit


FIKTIVES GESAMTBEISPIEL (Funktion 'move'):
Im folgenden Beispiel soll angenommen werden, dass im Verzeichnis "C:\TrSim" der
Trainsimulator installiert ist. Dort gibt es auch die Strecke "Usa3", die nach Europa
verschoben werden soll. Dazu soll diese um 5120 Quadrate in X-Richtung bewegt werden.
Die Z-Position soll beibehalten werden.

Im folgenden soll weiter angenommen werden, dass die Ausfuehrung der Befehle keine Fehler
erzeugt. Ausserdem ist die Pruefung der LOG-Datei nicht explizit aufgefuehrt.

a) DATENSICHERUNG ERSTELLEN

b) DOS-Fenster oeffnen (Eingabeaufforderung)
	Annahme: Das Fenster oeffnet sich auf das Verzeichnis "C:\"

c) Loeschen des Ziel-Verzeichnisses, wenn vorhanden
	C>deltree C:\TrSim\Routes\Usa3\newRoute

d) Verschieben der Streckendefinition
	C>java TSUtil -lTSUtil.log move C:/TrSim/Routes/Usa3 5120 0

e) Loeschen der Original-Dateien aus der Streckendefinition
	C>deltree C:\TrSim\Routes\Usa3\TD
	C>deltree C:\TrSim\Routes\Usa3\world
	C>deltree C:\TrSim\Routes\Usa3\Tiles
	C>deltree C:\TrSim\Routes\Usa3\LO_Tiles		(ggf.)
	C>deltree C:\TrSim\Routes\Usa3\Activities
	C>deltree C:\TrSim\Routes\Usa3\Paths
	C>deltree C:\TrSim\Routes\Usa3\Services
	C>deltree C:\TrSim\Routes\Usa3\Traffic

f) Aktivieren der neu erzeugten Dateien (bitte ueberschreiben)
	C>xcopy C:\TrSim\Routes\Usa3\newRoute\*.* C:\TrSim\Routes\Usa3 /s

g) ggf. erzeugte Dateien loeschen
	C>deltree C:\TrSim\Routes\Usa3\newRoute

h) Alle World-Dateien wieder komprimieren/reduzieren (optional, auch mit 'Route-Riter')
	C>java TSUtil -lTSUtil.log cmp -w -c C:/TrSim/Routes/Usa3

i) Aktivieren der neu erzeugten Dateien (bitte ueberschreiben)
	C>xcopy C:\TrSim\Routes\Usa3\newRoute\World\*.* C:\TrSim\Routes\Usa3\World

j) ggf. erzeugte Dateien loeschen
	C>deltree C:\TrSim\Routes\Usa3\newRoute

k) ggf. Fenster wieder schliessen
	C>exit


HISTORIE:
30.07.2003 - V2.0 Freigabe zur Nutzung
01.08.2003 - V2.0 Erweiterte Plausibilitaetenpruefung
05.08.2003 - V2.0 kleinere Fehlerkorrekturen und Optimierungen (Logging)
17.08.2003 - V2.1 Aufnahme der Funktion 'shift'
25.08.2003 - V2.1 Unterstuetzung von mehreren identischen Section-Definitionen
05.09.2003 - V2.1 Korrekturen von groesseren Fehlern (gross/klein-Schreibung)
22.09.2003 - V2.2 Aufnahme weiter Optionen sowie der Funktion 'cmpw'
30.10.2003 - V2.3 Neue Funktion 'tsconv'
19.01.2004 - V2.3 Leerzeichen in Routennamen, Fehlerbeseitigung
21.01.2004 - V2.3 zusaetzliche Optionen, Optimierungen
23.01.2004 - V2.4 Neue Funktion 'ichk'
00.00.0000 - V2.5 Neue Funktion 'rendb'
16.02.2004 - V2.6 Redesign der Ausfuehrungsstruktur (lesen - pruefen - (schreiben))
07.04.2004 - V3.0 neues, vollstaendig verkettetes Datenspeichermodell, Tile-Definitionen pruefen
			Quadratstruktur pruefen, Neue Funktion 'move', Neue Funktion 'chkup'
13.04.2004 - V3.0 Fehlerkorrektur, genauere Versionskennung
11.05.2004 - V3.0 zusaetzliche Argumente (cvrt,...), intern: lokale 'tsection.dat' umgestellt
18.05.2004 - V3.0 Fehlerkorrekturen und Optimierungen
21.05.2004 - V3.0 Umbau der Funktion 'rendb' mit Fehlerkorrektur
27.05.2004 - V3.0 Neue Funktion 'adjh' (nicht zum Download)
01.07.2004 - V3.0 Fehlerkorrekturen und erweiterte Pruefung bei Funktion 'ichk'
15.07.2004 - V3.0 Erste, noch nicht vollstaendig uebersetzte, englische Version
09.08.2004 - V3.0 Fehlerkorrekturen, Zweite englische Version (nicht vollstaendig uebersetzt)
12.08.2004 - V3.0 Fehlerkorrekturen, Dritte englische Version (Uebersetzung nahezu beendet)
19.08.2004 - V3.0 Fehlerkorrekturen, Vollstaendig uebersetzte englische Version
13.09.2004 - V3.0 Fehlerkorrekturen, Unterstuetzung mehrerer Signal-Script-Dateien
31.10.2004 - V3.0 Fehlerkorrekturen, Erweiterte Pruefung der lokalen 'tsection.dat'
15.11.2004 - V3.0 Fehlerkorrekturen, (nicht zum Download)
20.11.2004 - V3.0 Neue Funktion 'cmp', Neue Funktion 'unc', Kleinere Fehlerkorrekturen,
			Neue globale Option, Dokumentationskorrektur
26.11.2004 - V3.0 Neue Funktion 'filt', verbesserte Fehlermeldungen
05.12.2004 - V3.0 Funktion 'filt'->'filter', Fehlerkorrekturen, 'ichk' prueft Activities
07.12.2004 - V3.0 Fehlerkorrekturen
28.12.2004 - V3.0 Fehlerkorrekturen, Umbau von Funktionen auf neue Dateischnittstelle
			(Version NICHT zum Download verfuegbar)
16.01.2005 - V3.1 Fehlerkorrekturen, neue Funktion 'merge', Ueberarbeitung der
			Dateischnittstellen
27.01.2005 - V3.1 Fehlerkorrekturen
06.02.2005 - V3.2 Fehlerkorrekturen, Unterstuetzung von Tiles>1, neue Funktion 'clrdb'
			Erweiterte Dokumentation
10.02.2005 - V3.2 Fehlerkorrekturen
12.02.2005 - V3.2 Fehlerkorrekturen
17.02.2005 - V3.2 Fehlerkorrekturen
22.02.2005 - V3.2 Fehlerkorrekturen, erweiterte Pruefung bei lokalen Optionen
22.03.2005 - V3.2 Fehlerkorrekturen, erweiterte 'Merge'-Funktion(Signal)
31.03.2005 - V3.2 Fehlerkorrekturen
29.04.2005 - V3.2 Fehlerkorrekturen
27.05.2005 - V3.2 Fehlerkorrekturen, Korrekturmodus fuer World-Dateien
22.06.2005 - V3.2 Fehlerkorrekturen, Optimierungen innerhalb der Klassendefinitionen
28.07.2005 - V3.2 Fehlerkorrekturen, neue Funktion 'shftdyn', Optimierungen
26.08.2005 - V3.2 Fehlerkorrekturen, Erweiterung der Funktion 'shftdyn'
10.09.2005 - V3.2 Fehlerkorrekturen
15.09.2005 - V3.2 Fehlerkorrekturen, neue Optionen fuer Funktion 'rendb', neue Funktion 'version'
02.11.2005 - V3.2 Fehlerkorrekturen, Unterstuetzung verschiedener undokumentierter Schluesselwoerter
22.11.2005 - V3.2 Fehlerkorrekturen
06.12.2005 - V3.2 Fehlerkorrekturen, neue Funktion 'fmgr', interne Optimierungen
31.12.2005 - V3.2 Fehlerkorrekturen; Fixierung fuer Erweiterungen der Version 3.3
			(Version NICHT zum Download verfuegbar)
04.09.2006 - V3.3.00 Fehlerkorrekturen; Unterstuetzung der Veraenderungen von 'Hidewire' oder 'Dynatrax'
			generieren von Nebenbahnschienen aus Schienenobjekten;
			optimieren interner Programmablaeufe; Neue Art der LOG-Aktivierung;
			erweiterte Pruefung der 'Pfad'-, 'Service'- und 'Traffic'-Dateien;
			neue Funktion 'zusi'; erweiterte Fehlertoleranz;
19.09.2006 - V3.3.01 Fehlerkorrekturen in Dokumentation und Meldungen
29.01.2007 - V3.3.04 Fehlerkorrekturen; Erweiterung der Erkennung von 'Hidewire'-Objekten (-z);
			internes Redesign von Java-Objekten zur leichteren Implementierung neuer Funktionen
			sowie Verbesserung der Ausfuehrungsgeschwindigkeit; automatische Erweiterung von
			Dateinamen um den Zugriffspfad;
28.03.2007 - V3.3.05 Fehlerkorrekturen; interne Standardisierungen(Queues); Erweiterung des Dateimanagers(fmgr);
			Fehlertoleranz fuer Dateikennungen in Datendateien;
11.04.2007 - V3.3.06 Fehlerkorrekturen (speziell: Ein-/Ausgabe auf TS-Dateien)
13.07.2007 - V3.3.06 Fehlerkorrekturen
29.11.2007 - V3.3.07 Fehlerkorrekturen; Analyse/Beachtung Veraenderungsschutz von AddOns;
			Implementierung der 'java checked operations'
10.01.2008 - V3.3.08 Fehlerkorrekturen; neue Funktion 'chgSig'
04.04.2008 - V3.3.09 Fehlerkorrekturen; neue Funktion 'srchSig'
01.06.2008 - V3.3.10 Fehlerkorrekturen; Fixierung fuer Erweiterungen der Version 3.4
			(Version NICHT zum Download verfuegbar)
01.02.2009 - V3.4.00 Fehlerkorrekturen; Redesign und weitreichende Korrekturen der Klassen- und Methodenstruktur
			des Programms; neue Funktion 'mveobj'; Kennzeichnung veralteter Funktionen; Zusaetzliche
			Optionen und Implementierung Optionendatei; Ueberarbeitung des Pfad-Konzeptes fuer Shape-
			Modifikationen; Vollstaendiges Lesen von Aktivitaeten('ichk')
24.02.2009 - V3.4.01 Fehlerkorrekturen; neue Schnittstelle 'TSUtilDlg'; Neuprogrammierung verschiedener Methoden
			zur Performance-Steigerung
10.03.2009 - V3.4.02 Fehlerkorrekturen; neue Option 'a'/'A' fuer Funktion 'cvrt'; Neuprogrammierung verschiedener
			Methoden
13.08.2009 - V3.4.03 Fehlerkorrekturen; neue Funktion 'world'; neue Funktion 'fcpy'; Neuprogrammierung verschiedener
			Methoden; Ausfuehrliche Pruefung der Aktivitaeten
16.09.2009 - V3.4.04 Fehlerkorrekturen; Neuprogrammierung verschiedener	Methoden; Kommandoprozeduren
12.10.2009 - V3.4.05 Fehlerkorrekturen; Neuprogrammierung verschiedener	Methoden; Flexibilisierung der
			Speicherverwaltung fuer die Ein-/Ausgabe
10.03.2010 - V3.4.06 Fehlerkorrekturen; Neuprogrammierung verschiedener	Methoden; Vollstaendige Bearbeitung der
			Aktivitaeten
21.05.2010 - V3.4.07 Fehlerkorrekturen; Zusaetzliche Optionen('cvrt','chgsig'); Erweiterte Bearbeitung der
			*.ref-Definition
10.06.2010 - V3.4.08 Fehlerkorrekturen (speziell innerhalb von decompress); Zusaetzliche Optionen('fcpy'); Erweiterte
			Moeglichkeiten zur Bearbeitung und Kopie von Dateien
24.11.2010 - V3.4.09 Fehlerkorrekturen; Zusaetzliche Optionen('merge','cvrt'); Erweiterung der Funktion 'chgSig'; neue
			Funktion 'testSig'
09.12.2010 - V3.4.09 Fehlerkorrekturen; Zusaetzliche Pruefungen innerhalb des Signalsystems
15.03.2008 - V3.4.10 Fehlerkorrekturen; Versionspruefung von TSUtil; Fixierung fuer Erweiterungen der Version 3.5
			(Version NICHT zum Download verfuegbar)
19.04.2010 - V3.5.00 Fehlerkorrekturen; Optimierungen in der Kompression/Dekompression von Dateien
16.06.2010 - V3.6.00 Fehlerkorrekturen; Beseitigung von grundlegenden Fehlern in der Kompression/Dekompression von Dateien;
			Entfernung von Restriktionen bei der Signalbearbeitung.
18.06.2010 - V3.6.01 Fehlerkorrekturen; Beseitigung von Fehlern in der Kompression/Dekompression von Shape-Dateien;
			Herstellung der Kompatibilitaet zu Versionen kleiner als 3.5.00.
01.07.2010 - V3.6.02 Fehlerkorrekturen; Loeschen 'newRoute' wenn noch existent; Erweiterung der 'filter'-Funktion;
01.10.2010 - V3.6.03 Fehlerkorrekturen; Korrektur der ESCAPE-Bearbeitung (\) in Zeichenketten mit Anfuehrungszeichen;
			Abstandspruefung von Weichen in der Funktion 'ichk'; Konvertierung UNICODE<->ASCII mit 'fcpy';
			Aenderung/Erweiterung der Spezifikation von Signalbearbeitunganweisungen ('chgSig');
			Anpassungen fuer 64-Bit Betriebssysteme.




ACHTUNG:

- Diese Software wurde auf meinem eigenen PC erstellt und getestet.
	Fuer eventuelle Schaeden an Hard- und Software uebernehme ich keine Verantwortung.
- Dieses Programm wird staendig weiterentwickelt. Dazu gehoert auch die Beseitigung von Fehlern,
	die im allgemeinen nicht vermeidbar sind. Die aktuellste Version ist wie folgt verfuegbar:
	'carloshr.privat.t-online.de' oder (alias) 'www.carloshr.homepage.t-online.de'

Credits:

Ein herzlicher Dank geht an 'Don Quichotte' fuer das unermuetliche Testen von neuen Versionen. Weiterhin 
  bedanke ich mich fuer die Anregungen, die er zum Ausbau und zur Verbesserung von neuen Funktionen
  geliefert hat.
Ebenso danke ich Mike Simpson fuer die Integration dieser Sofware in Route-Riter und das damit verbundene
  'praktische' Testen der einzelnen Funktionen.
Ein weiterer Dank geht an Jeffrey Kraus-Yao, der mich immer wieder auf Probleme und Fehler aufmerksam gemacht
  hat und so zur Qualitaet von TSUtil im erheblichen Maße beigetragen hat.
Ausserdem bedanke ich mich bei allen 'Ungenannten', die mich in der Entwicklung von TSUtil unterstützt haben.


CopyRight:
----------

Dieses Utility ist Freeware und darf beliebig kopiert und verbreitet werden, solange der Inhalt der ZIP-/
Installations-Datei weder veraendert noch erweitert wird. 
Alle sonstigen Aenderungen beduerfen der Einwilligung des Autors.
Wenn die Software zur Erstellung, Modifikation oder Prüfung von kommerziellen Routen fuer den TrainSimulator
eingesetzt wird, ist die Verwendung in der Beschreibung oder Nutzungsvereinbahrung dieser Route aufzuführen.
Andernfalls ist die Benutzung von TSUtil NICHT gestattet.

Kontakt:
	carlosHR@t-online.de


======================================================================================================================

A)Anhang: Eigenschaften des Korrektur-Modus
	  ---------------------------------

ACHTUNG: Diese Beschreibung ist in erster Linie fuer Experten gedacht, die in die Tiefen von TSUtil einsteigen
	moechten und ausserdem etwas von Datenverarbeitung verstehen.

Mit der Aktivierung des Korrekturmodus werden fuer die Objekt-Definitionen der World-Dateien fuer jede fehlende
Definitionszeile eine Default-Definition hinzugefuegt. Dies Definition folgt entweder einem festen Schema oder
der Wert ist in der Property-Datei (ErrMsg???.properties) festgelegt.
Im einzelnen sind folgende Defaultwerte hinzufuegbar:

Objekttyp   !	Schluesselwort    !	Y   !	Schluessel  !	Wert
------------------------------------------------------------------------------------------------------------ 
TrackObj	Elevation		3	TSUidX03	-
TrackObj	VDbId			25	-		fester Wert '4294967294'
TrackObj	StaticDetailLevel	26	-		aktueller Level wird verwendet
DynTrack	Elevation		3	TSUidX13	-
DynTrack	VDbId			25	-		fester Wert '4294967295'
DynTrack	StaticDetailLevel	26	-		aktueller Level wird verwendet
Signal		VDbId			25	-		fester Wert '4294967295'
Signal		StaticDetailLevel	26	-		aktueller Level wird verwendet
Static		StaticDetailLevel	26	-		aktueller Level wird verwendet
Forest		ScaleRange		2	TSUidX42	-
Forest		Area			3	TSUidX43	-
Forest		Population		4	TSUidX44	-
Forest		TreeSize		5	TSUidX45	-
Forest		VDbId			25	-		fester Wert '4294967295'
Forest		StaticDetailLevel	26	-		aktueller Level wird verwendet
Platform	VDbId			25	-		fester Wert '4294967295'
Siding		VDbId			25	-		fester Wert '4294967295'
Gantry		VDbId			25	-		fester Wert '4294967295'
Speedpost	Speed_Text_Size		3	TSUidX83	-
Speedpost	VDbId			25	-		fester Wert '4294967295'
CarSpawner	CarFrequency		1	TSUidX91	-
CarSpawner	CarAvSpeed		2	TSUidX92	-
CarSpawner	VDbId			25	-		fester Wert '4294967295'
LevelCr 	Crashprobability	2	TSUidXA2	-
LevelCr 	LevelCrTiming		4	TSUidXA4	-
LevelCr		VDbId			25	-		fester Wert '4294967295'
Hazard		VDbId			25	-		fester Wert '4294967295'
Transfer	VDbId			25	-		fester Wert '4294967295'
Transfer	StaticDetailLevel	26	-		aktueller Level wird verwendet
CollideObject	VDbId			25	-		fester Wert '4294967295'
Telepole	VDbId			25	-		fester Wert '4294967295'
Pickup		VDbId			25	-		fester Wert '4294967295'

(Bemerkung: Der Wert Y verweist auf die Bitnummer in der Y-Maske (vgl. unten))

Wenn in der o.a. Tabelle ein Schluessel der Property-Datei aufgefuehrt ist, wird der Defaultwert aus dieser
Datei entnommen, mit zusaetzlichen Leerzeichen eingefasst und als Argument der Definitionszeile verwendet.
Standardmaessig werden hinter den Schluesseln 'feste Werte' hinterlegt. Ein Nutzer kann die Property-Datei
jedoch auch modifizieren und andere Werte verwenden. Dabei gibt es folgende Moeglichkeiten den Wert dynamisch
d.h. beim Einsetzen in die Ausgabe, zu modifizieren:
- Kennung '%0' wird durch den 'aktuellen Filenamen' (oder "" falls nicht vorhanden) ersetzt
- Kennung '%1' wird durch aktuellen UiD-Wert ersetzt
- Kennung '%2' wird durch den Y-Wert (vgl. Tabelle) ersetzt


Ob eine Default-Definition hinzugefuegt wird, kann mit Hilfe der 'Online-Konfiguration' nochmals veraendert
werden. Die Online-Konfiguration benutzt dazu die verborgenen globale Option '$D' um diese Korrekturen zu
steuern.
Diese globale Option sieht wie folgt aus:
	-$Dxxxx:yyyyyyyy	(Achtung: 'D', nicht 'd')
Sowohl 'xxxx' als 'yyyyyyyy' sind hierbei eine hexadezimale Maske, die genau aus 4 bzw. 8 Hex-Ziffern besteht.
Alle Bits dieser Masken sind von rechts nach links , mit '0' beginnend numeriert. Damit besteht die X-Maske aus
16 (0..15) und die Y-Maske aus 32 (0..31) Bits.

Die Bits der X-Maske sind wie folgt den verschiedenen Objekt-Typen zugeordnet:
 0 - TrackObj
 1 - DynTrack
 2 - Signal
 3 - Static
 4 - Forest
 5 - Platform
 6 - Siding
 7 - Gantry
 8 - Speedpost
 9 - CarSpawner
10 - LevelCr
11 - Hazard
12 - Transfer
13 - CollideObject
14 - Telepole
15 - Pickup

Soll nun die folgende Y-Maske auf einen Objekt-Typ angewendet werden, so ist das entsprechende Bit in der X-Maske
zu setzen. 'FFFF' wendet damit die Y-Maske auf alle moeglichen Objekt-Typen an, waehrend mit '0000' die Option
KEINE Wirkung hat.

Die Zuordnungen der Bits der Y-Maske sind wie folgt vergeben:
0..15 - vom Objekt-Typ abhangig.
16 - TrItemId
17 - CollideFlags
18 - Collidefunction
19 - FileName
20 - StaticFlags
21 - Position
22 - QDirection
23 - Matrix3x3
24 - MaxVisDistance
25 - VDbId
26 - StaticdetailLevel
27 - SignalSubObj
28 - SignalUnits
29 - NoDirLight
30 -
31 -

Diese Zuordnungen sind auch in der o.a. Tabelle ersichtlich (Y-Bit)
Die Y-Maske gibt nun an, für welche Definitionszeile KEIN Defaultwert erzeugt werden soll. Dazu ist das
entsprechende Bit ZURUECKZUSETZEN. Alle nicht benutzten Bits muessen deshalb mit '1' vorbesetzt werden.

Beispiele:
 -$DFFFF:FBFFFFFF - Defaultwerte fuer 'StaticdetailLevel' werden bei ALLEN Objekttypen NICHT erzeugt.
 -$D0001:F9FFFFFF - Defaultwerte fuer 'StaticdetailLevel' und 'VDbId' werden bei TrackObj-Def. NICHT erzeugt.
 -$DFFFF:00000000 - Es werden KEINE Defaultwerte erzeugt.
			(Alle anderen Eigenschaften der Korrekturmodus bleiben aktiv.)


B)Anhang: Definition von 'regulaeren Ausdruecken'
	  ---------------------------------------

Ein 'regulaerer Ausdruck' wird benutzt, um zu pruefen, ob eine gegebene Zeichenkette(Vorlage) zu diesem Ausdruck passt.
Damit gibt es eine Moeglichkeit aus einer Reihe von Zeichenketten (z.B. Dateinamen) eine Untermenge
herauszufiltern und damit eine Auswahl zu treffen.
 
Ein 'regulaerer Ausdruck' setzt sich aus Zeichen MIT und OHNE 'besonderer Bedeutung' zusammen.
Zeichen OHNE 'besonderer Bedeutung' stellen das Zeichen selbst dar und muessen in dieser Form in einer zu
pruefenden Zeichenkette(Vorlage) auftauchen, damit der Ausdruck zu dieser Zeichenkette passt. Lediglich 
Gross-/Klein-Schreibung wird ggf. nicht beachtet. Die regulaeren Ausdruecke in TSUtil, die zur Pruefung
von Dateinamen eingesetzt werden, beachten die Gross-/Klein-Schreibung NICHT.
Aufeinanderfolgende Zeichen muessen auch in der Vorlage aufeinanderfolgen, damit der Ausdruck passt.

Die Wirkung von Zeichen MIT 'besonderer Bedeutung' kann nicht allgemeingueltig angegeben werden, da diese von
Zeichen zu Zeichen oder Zeichengruppe zu Zeichengruppe unterschiedlich ist. Im folgenden wird die Bedeutung
der WICHTIGSTEN Zeichen beschrieben:

Zeichen Bedeutung
 .	Dieses Zeichen ist ein Platzhalter fuer JEDES beliebige EINZELNE Zeichen
	  Dieses Zeichen hat KEINE 'besondere Bedeutung' innerhalb einer Zeichenliste. (s.u.)
 \	Folgt auf dieses Zeichen ein weiteres Zeichen mit 'besondere Bedeutung' so wird diese 'besondere Bedeutung'
	  aufgehoben. Im anderen Fall wird eine Zeichengruppe definiert, die wiederum eine 'besondere Bedeutung'
	  hat. Ein Teil dieser Zeichengruppen (Zeichenklassen) ist in dieser Liste aufgefuehrt. Wird \ vor einem
	  Zeichen benutzt, das KEINE Zeichengruppe definiert, so ist dies ein Fehler.
	  Das folgende Zeichen kann auch das Zeichen selbst sein: (\\ enspricht \ ohne 'besondere Bedeutung')
 ?	Das VORANGEHENDE Zeichen darf EINMAL oder KEINMAL auftreten.
 *	Das VORANGEHENDE Zeichen darf beliebig oft oder auch KEINMAL auftreten.
 +	Das VORANGEHENDE Zeichen darf beliebig oft, muss aber mindestens EINMAL auftreten.  
 {n}	Das VORANGEHENDE Zeichen muss genau n-mal auftreten. (n ist eine Zahl)
 {n,}	Das VORANGEHENDE Zeichen muss mindestens n-mal auftreten. (n ist eine Zahl)
 {n,m}	Das VORANGEHENDE Zeichen muss mindestens n-mal und hoechstens m-mal auftreten. (n,m ist eine Zahl)
 (	Beginn einer 'capture-group' - In der Vorlage muss diesem Zeichen KEIN wirkliches Zeichen entsprechen.
 )	Ende einer 'capture-group' - Alle Zeichen zwischen '(' und ')' (aussschliesslich) sind Teil dieser Gruppe.
 [	Beginn einer Zeichenliste
 ]	Ende einer Zeichenliste z.B: [0123] - Die einzelnen Ziffern 0 bis 3: EINE der vier Ziffern muss auftreten
	  Dieses Zeichen hat NUR eine 'besondere Bedeutung' wenn eine Zeichenliste aktiv ist (nach [ )
 -	(1) Spezifiziert einen Bereich innerhalb einer Zeichenliste z.B: [A-Z] - Die Buchstaben A bis Z
	(2) KEINE 'besondere Bedeutung' ausserhalb einer Zeichenliste.
 ^	(1) Dreht die Bedeutung der Zeichen innerhalb einer Zeichenliste um. (NICHT)
	(2) Der Beginn einer Zeichenkette. (Die Spezifikation fuer das ERSTE Zeichen folgt)
 $	(1) Das Ende einer Zeichenkette. (Die Spezifikation fuer das LETZTE Zeichen geht voran)
	(2) KEINE 'besondere Bedeutung' innerhalb einer Zeichenliste.
	(3) Falls dieses Zeichen in einer Ersetzungskette benutzt wird, verweist es auf eine 'capture-group' der
	  Vorlage. Es wird von einer Zahl n gefolgt, die auf die n-te 'capture-group' verweist. 'n==0' referenziert
	  dabei vollstaendig die zu pruefende Vorlage.
 |	Das vorangehende ODER das nachfolgende Zeichen muss auftreten.
 \d	Eine beliebige Ziffer (= [0-9])
 \D	Ein beliebiges Zeichen, das KEINE Ziffer ist (= [^0-9])
 \w	Eine beliebiges Zeichen zur Wortbildung (= [a-zA-Z0-9])
 \W	Eine beliebiges Zeichen das KEIN Zeichen zur Wortbildung ist (= [^\w])
 \t	Das tab-Zeichen
 \n	Das Zeichen fuer 'neue zeile'
 \r	Das Zeichen fuer 'carriage-return'
 \f	Das Zeichen fuer Formularvorschub
 \s	Ein beliebiges Trennzeichen (Blank, neue Zeile, ...)
 \S	Ein beliebiges Zeichen, das KEIN Trennzeichen ist
 \xhh	Das Zeichen mit dem Hexadezimalwert 'hh'
 \uhhhh	Das Unicode-Zeichen mit dem Hexadezimalwert 'hhhh'

Dies ist nur EIN TEIL der moeglichen Zeichen mit 'besondere Bedeutung'. Fuer eine vollstaendige Liste wird auf
die einschlaegige Litertur verwiesen.

Beispiele fuer 'regulaere Ausdruecke':
 '...\.\d' - drei beliebige Zeichen gefolgt von einem Punkt und einer Ziffer
 '.{8}\.[01]{3}' - genau acht beliebige Zeichen gefolgt von einem Punkt und genau dreimal der Ziffer 0 oder 1
 '.{8}[.][01]{3}' - gleiche Bedeutung wie davor (Punkt hat keine 'besondere Bedeutung' in einer Zeichenliste)
 '.+\*.' - Eins bis n beliebige Zeichen gefolgt von einem Stern und einem weiteren beliebigen Zeichen.
 '.+\(x\)' - Eins bis n beliebige Zeichen gefolgt von '(x)'.


C)Anhang: Kurze Beschreibung der verwendeten Metasprache
	  ----------------------------------------------

Im folgenden soll die Metasprache, die zur Spezifikation von Befehlen verwendet wird, kurz beschrieben werden:

  - Platzhalter, d.h. Namen die stellvertretend für ein Wort oder eine Zahl stehen (z.B. Dateiname), werden in spitze
	Klammern gesetzt. z.B.: <xx> - xx ist eine Platzhaltervariable
  - Optionale Elemente , die auch Platzhalter,... beinhalten können, werden in eckige Klammern eingeschlossen.
	z.B.:	[H] - der Buchstabe H ist optional
		[<name>] - der Platzhalter 'name' ist optional
  - Selektive Elemente, von denen EIN Element gefordert ist, werden in geschweifte Klammern eingeschlossen und die
	einzelnen Elemente werden durch einen senkrechten Strich getrennt.
	z.B.: {A|B|C} - hier ist entweder der Buchstabe A oder B oder C gefordert.
  - Alle anderen Elemente/Zeichen werden so gefordert wie sie aufgeschrieben sind. Dabei ist normalerweise auf
	Gross - / Klein - Schreibung zu achten. Unter diese Zeichen fallen AUCH Leerzeichen.
  - Optionale / selektive Elemente koennen geschachtelt werden. Dabei koennen selektive Elemente optional sein.
	(nicht umgekehrt weil: {[X]|Y|Z} = [{X|Y|Z}] aber: {X[E]|Y|Z} ist moeglich)

Beispiel:  Der Meta - Text
	"Txt <name> [{I|O}] [ext]"
mit "'name' ist Platzhalter für 'C:\boot.txt'" beschreibt folgende Moeglichkeiten(exakt):
	"Txt C:\boot.txt  "
	"Txt C:\boot.txt I "
	"Txt C:\boot.txt O "
	"Txt C:\boot.txt  ext"
	"Txt C:\boot.txt I ext"
	"Txt C:\boot.txt O ext"
Welche dieser Moeglichkeiten die zu Waehlende / die Richtige ist, ist dem Kontext zu entnehmen und nicht Gegenstand
 der Metasprache.


D)Anhang: Beschreibung der Syntax der Konvertierungsanweisungen fuer Signale
	  ------------------------------------------------------------------

Um die Konvertierungsanweisungen zu verstehen, muss man wissen, wie Signaldefinitionen als Wolrd-Objekte INTERN
definiert werden.
Alle Signal-Subobjekte, die KEINEN 'Signal_Head' darstellen, werden lediglich in der Optionenmaske gekennzeichnet.
Das entsprechende Optionenbit ist IMMER gesetzt oder - falls es sich um ein optionales Subobjekt handelt - wenn es
selektiert wurde.
Jede 'Signal_Head'-Definition wird durch einen 'SignalUnit'-Eintrag dargestellt, der exklusiv mit einem 'SignalItem'
aus der Schienendatenbank verbunden ist. Ausserdem ist auch das entsprechende Optionenbit gesetzt.
(Optionenbits werden an Hand des Subobjekt-Nummer von rechts nach links benutzt.)


Die Konvertierungsdatei fuer Signale besteht aus drei Abschnittstypen:
	- Anweisungen fuer die Konvertierung EINES Signal
	- Definiton von Fehler- und Hinweismeldungen
	- Anweisungen fuer die Veraenderung (update) der *.ref-Datei (optional)
Abschnitte dieser drei Abschnittstypen koennen innerhalb der Kommando-Datei in beliebiger Reihenfolge spezifiziert
werden.
Weiterhin ist es jederzeit innerhab der Datei moeglich, Kommentarzeilen einzufuegen. Diese werden mit dem
Steuerzeichen '#' gekennzeichnet. Auch innerhalb einer Abschnittszeile kann der Rest der Zeile mit dem Zeichen
'#' als Kommentar gekennzeichnet werden.

Der Abschnitt zur Konvertierung EINES Signals muss so oft wiederholt werden, wie das Quellen-Signalsystem
Signaldefinitionen enthaelt d.h. Es muss fuer JEDEN Signaltyp (Signalshape) eine Konvertierungsanweisung existieren.
Lediglich wenn ein Signal innnerhalb der Route NICHT verwendet wird, wird auch keine Konvertierungsanweisung
benoetigt.

1. Abschnittstyp:
Eine Konvertierungsanweisung kann zur Formatierung am Beginn der Zeile beliebig viele Leerzeichen enthalten und auch
die einzelnen Definitionswerte sind jeweils durch mindestens ein Leerzeichen von einander getrennt.
Eine Konvertierungsanweisung ist wie folgt aufgebaut:
 1.Zeile: <Name des Quellen-Shape> [<Name des Ziel-Shape>]
 2.Zeile: <Konvertierungskommando>
 3.Zeile: <Konvertierungskommando>
 ...
 n.Zeile: <Konvertierungskommando>
Bemerkung: Wenn sich der Name des Shapes NICHT aendert, kann der zweite Name in Zeile 1 weggelassen werden.

Fuer die Steuerzeile (1.Zeile) einer Konvertierungsanweisung gilt:
	- Alle Namen muessen mit Hochkomma eingeschlossen werden, falls sie Zeichen wie Blanks,... enthalten.
	- Folgt auf den Namen des Quellen-Shapes KEIN Konvertierungskommando sondern direkt eine neue
	Konvertierungsanweisung, so werden ALLE Signale des Quellen-Shapes umbenannt und erhalten den Namen
	des Ziel-Shapes, ohne dass die Definition veraendert wird.
	- Der zweite Namen (Ziel-Shape) kann innerhalb von spitzen Klammern '<...>' angegeben werden. In
	diesem Fall werden diese Klammern entfernt und das Signalobjekt in ein 'Statisches Objekt' mit diesem
	Namen umgewandelt. Der Name innerhalb der Klammern muss ein gueltiger Shape-Name sein.
	- Ist an Stelle des zweiten Namens das Loesch-Kennzeichen '<$>' ($-Zeichen, das in spitze Klammern
	eingeschlossen ist) angeben, so werden diese Signale aus der Strecke geloescht.
	- Ist der Name des QUELLEN-Shapes in spitzen Klammern '<...>' angegeben, so bezieht sich dieser auf
	ein STATISCHES Signalobjekt (z.B. Signaltafeln). In diesem Fall DUERFEN KEINE Konvertierungskommandos
	folgen. Dieses statische Object kann nun umbenannt oder geloescht werden, je nachdem ob ein neuer
	Shape-Name oder das Loesch-Kennzeichen '<$>' als zweiter Name spezifiziert wird. 
Hinweis: Jede dieser Aenderungen an den Signalen wird auch protokolliert.

Ein Konvertierungskommando ist wie folgt aufgebaut:
 <Befehl> <Argument> <Argument> ... <Argument>
Es gibt folgende Konvertierungsbefehle:
 '/a' - (obsolete) wird nach '/n' oder '/c' konvertiert
 '/b' - Optionenmaske prufen und ggf. die folgende(n) Anweisung(en) ueberspringen
 '/c' - Signaltype(SignalHead)-Definition in der Zieldefinition unter Benutzung einer Vorlage aus der
	Quell-Definition erzeugen
 '/d' - bedingtes Loeschen des gesamten Signalobjektes
 '/n' - Signaltype(SignalHead)-Definition in der Ziel-Definition aus einer beliebigen Quell-Definition erzeugen
 '/o' - Optionenmaske der Signaldefinition manipulieren
 '/B' - wie '/b' jedoch ist die Bedingung umgekehrt zu nehmen
 '/C' - wie '/c' jedoch wird ggf. die Verbindung der Quell-Definition zu einer Weiche beizubehalten
	(normalerweise werde diese Verbindungen bei der Uebernahme immer geloescht)
 '/D' - wie '/d' jedoch ist die Bedingung umgekehrt zu nehmen
 '/O' - wie '/o' jedoch ist die Bedingung umgekehrt zu nehmen

Die geforderten Argumente - und damit auch die veranlassten Aktionen - sind von dem benutzten Befehl abhaengig.
Im einzelnen ist dies wie folgt:
 /a <znr> <snr> [<name>]
	ACHTUNG: Diese Anweisung ist veraltert und wird nach '/n' oder '/c' konvertiert, je nachdem ob '<snr>'
		einen negativen Wert enthaelt oder nicht.
	'znr' gibt die Nummer der Signaltype(Signalhead)-Definition der Ziel-Definition an, der erzeugt werden
		soll.
	'snr' gibt die Nummer der Signaltype(Signalhead)-Definition der Quell-Definition an, der als Vorlage
		benutzt werden soll. Diese Anweisung wird dabei in eine Anweisung des Typs '/c' konvertiert.
		Ist dieser Wert '<0' so wird diese Anweisung in eine Anweisung des Typs '/n' konvertiert und
		'snr' wird in eine Fehlerkennung umgerechnet (<nr> = 100 - <snr>).
	Falls 'name' angegeben wird, wird der Name der Signaltype-Definition, wie er in der Quell-Definition
		festgelegt ist, durch diesen Namen ersetzt. In der Ziel-Definition muss ein Signaltype-Eintrag
		des letztendlich verwendeten Namens existieren. Andernfalls wird ein Fehler erzeugt.
 /b <nr> <xxxxxxxx> <yyyyyyyy>
	'xxxxxxxx' gibt die hexadezimale Maske an (8-stellig), mit der die Optionen der Quell-Definition vor der
		Pruefung temporaer maskiert werden sollen.
	'yyyyyyyy' gibt die hexadezimale Maske an, mit der das Ergebnis der o.a Maskierung auf Gleichheit
		verglichen werden soll. Ist diese Maske gleich '00000000' so erfolgt der Vergleich nicht auf
		Gleichheit sondern es wird geprueft, ob das Ergebnis der Maskierung 'ungleich 0' ist.
	'nr' gibt die Anzahl der Konvertierungsbefehle an, die im Fall eines NEGATIVEN Vergleichs uebersprungen
		werden sollen. Ist dieser Wert '0' so wird in diesem Fall die Abarbeitung der
		Konvertierungsanweisung beendet.
		d.h.: Die(Der) folgende(n) Konvertierungsbefehl(e) wird(werden) NUR DANN ausgefuehrt, wenn die
		spezifizierte Bedingung WAHR ist.
	Bemerkung: Mit Hilfe einer Bedingung, die IMMER FALSCH ist, kann in diesem Konvertierungsbefehl ein
		UNBEDINGTER SPRUNG (nach vorne) erzeugt werden.
 /c <znr> <snr> [<name>]
	'znr' gibt die Nummer der Signaltype(Signalhead)-Definition der Ziel-Definition an, die erzeugt werden
		soll.
	'snr' gibt die Nummer der Signaltype(Signalhead)-Definition der Quell-Definition an, die als Vorlage
		benutzt werden soll. Die Quell-Definition wird durch diese Anweisung nicht (mehr) veraendert.
	Falls 'name' angegeben wird, wird der Name der Signaltype-Definition, wie er in der Quell-Definition
		festgelegt ist, durch diesen Namen ersetzt. In der Ziel-Definition muss ein Signaltype-Eintrag
		des letztendlich verwendeten Namens existieren. Andernfalls wird ein Fehler erzeugt.
 /d <nr> <xxxxxxxx> <yyyyyyyy>
	'xxxxxxxx' gibt die hexadezimale Maske an (8-stellig), mit der die Optionen der Quell-Definition vor der
		Pruefung temporaer maskiert werden sollen.
	'yyyyyyyy' gibt die hexadezimale Maske an, mit der das Ergebnis der o.a Maskierung auf Gleichheit
		verglichen werden soll. Ist diese Maske gleich '00000000' so erfolgt der Vergleich nicht auf
		Gleichheit sondern es wird geprueft, ob das Ergebnis der Maskierung 'ungleich 0' ist.
	'nr' gibt die Nummer der Meldung an, die im Fall eines positiven Vergleichs im Log ausgegeben werden soll.
		Ist dieser Wert '0', so wird KEINE Meldung ausgegeben.
	Falls der Vergleich positiv ist, wird das GESAMTE Signalobjekt geloescht und die Konvertierungssequenz
		fuer das Objekt beendet.
 /n <znr> <nr> [<name>]
	'znr' gibt die Nummer der Signaltype(Signalhead)-Definition der Ziel-Definition an, die erzeugt werden
		soll. Als Vorlage wird eine beliebige Signaltype(Signalhead)-Definition aus der Quell-Definition
		genutzt. Debei wird die Quell-Definition aufsteigend nach einer Signaltype(Signalhead)-Definition
		durchsucht.
	'nr' gibt die Nummer der Meldung an, die ausgegeben werden soll, falls in der Quell-Definition KEINE
		passende Vorlage gefunden wird. Ist dieser Wert '0', so wird KEINE Meldung ausgegeben.
	Falls 'name' angegeben wird, wird der Name der Signaltype-Definition, wie er in der Quell-Definition
		festgelegt ist, durch diesen Namen ersetzt. In der Ziel-Definition muss ein Signaltype-Eintrag
		des letztendlich verwendeten Namens existieren. Andernfalls wird ein Fehler erzeugt.
 /o <nr> <xxxxxxxx> <yyyyyyyy> <zzzzzzzz>
	'xxxxxxxx' gibt die hexadezimale Maske an (8-stellig), mit der die Optionen der Quell-Definition vor der
		Pruefung temporaer maskiert werden sollen.
	'yyyyyyyy' gibt die hexadezimale Maske an, mit der das Ergebnis der o.a Maskierung auf Gleichheit
		verglichen werden soll. Ist diese Maske gleich '00000000' so erfolgt der Vergleich nicht auf
		Gleichheit sondern es wird geprueft, ob das Ergebnis der Maskierung 'ungleich 0' ist.
	'zzzzzzzz' gibt die hexadezimale Maske der Optionen an, die im Fall eines positiven Vergleichs in die
		Ziel-Definitionen eingesetzt werden sollen. Ist diese Maske gleich '00000000' so wird die
		Ziel-Definition NICHT veraendert.
	'nr' gibt die Nummer der Meldung an, die im Fall eines positiven Vergleichs im Log ausgegeben werden soll.
		Ist dieser Wert '0', so wird KEINE Meldung ausgegeben.

Die folgenden Restriktionen bezueglich der Syntax/Semantik der Argumente muessen eingehalten werden:
	<znr> muss '0' oder positiv sowie kleiner als die maximale Anzahl der Subobjekt-Definitionen in der
		Ziel-Definition sein.
	<snr> muss '0' oder positiv (soweit nicht anders spezifiziert) sowie kleiner als die maximale Anzahl der
		Subobjekt-Definitionen in der Quell-Definition sein.
	<nr> muss '0' oder positiv sein.
	<xxxxxxxx> muss EXAKT 8 Zeichen lang sein (0..9, a,b,c,d,e,f,A,B,C,D,E,F)
	<yyyyyyyy> muss EXAKT 8 Zeichen lang sein (0..9, a,b,c,d,e,f,A,B,C,D,E,F)
	<zzzzzzzz> muss EXAKT 8 Zeichen lang sein (0..9, a,b,c,d,e,f,A,B,C,D,E,F)


2. Abschnittstyp:
Der Abschnitt zur Definition einer Hinweis- und Fehlermeldung nutzt folgende Syntax:
 !<xx> <text>

'xx' gibt dabei die zweistellige Nummer der Meldung zwischen 00 und 99 an.
Nach der Meldungsnummer folgt, durch GENAU ein Leerzeichen getrennt, der Meldungstext. Kommentarzeichen werden hier
NICHT mehr beachtet sondern als Teil der Meldung interpretiert.
Innerhalb des Meldungstextes, ist es moeglich Ersetzungsparameter zu spezifizieren, welche bei der Ausgabe der
Meldung durch konkrete Werte ersetzt werden. Dies sind:
 %0 - Shape-Name der Quell-Definition (ohne '<>' falls vorhanden)
 %1 - Position des Signals innerhalb der World-Datei
 %2 - Aktuelle Optionenmaske der Ziel-Definition
 %3 - Aktuelle Optionenmaske der Quell-Definition
 %4 - Optionenmaske des aktuellen Konvertierungsbefehls (<xxxxxxxx>)
 %5 - Nummer der Fehlermeldung des aktuellen Konvertierungsbefehls

Neben den Nutzermeldungen einer Konvertierung im Bereich 0 bis 99 sind im Bereich 100 bis 199 Systemmeldungen
verfuegbar, die ebenfalls zur Ausgabe genutzt werden koennen. Diese Meldungen sind in der Datei 'TSErrMsg'
mit Hilfe des Schluessels 'chgSg*xx' (mit xx zwischen 00 und 99) definiert und koennen dort eingesehen werden.

3. Abschnittstyp:
Die Abschnitte zur Anpassung der *.ref-Datei sind optional und brauchen damit nicht spezifiziert werden. Falls ein
solcher Abschnitt jedoch spezifiziert wird, benutzt er folgende Syntax:
 1.Zeile: % <Klassenname der Shapes>
 2.Zeile: %% <Dateiname des Shapes> <Attribute> <Beschreibung des Shape>
 3.Zeile: %% <Dateiname des Shapes> <Attribute> <Beschreibung des Shape>
 ...
 n.Zeile: %% <Dateiname des Shapes> <Attribute> <Beschreibung des Shape>

Eine Abschnittszeile kann zur Formatierung am Beginn der Zeile beliebig viele Leerzeichen enthalten und auch
die einzelnen Definitionswerte sind jeweils durch mindestens ein Leerzeichen von einander getrennt.

Der 'Dateiname des Shape' muss in Anfuehrungszeichen eingeschlossen werden, wenn er Zeichen wie Leerzeichen,
Klammer, usw. enthaelt. Dies gilt auch fuer die 'Beschreibung des Shape's.
Das Feld 'Attribute' muss exakt 8 Zeichen lang und aus den Zeichen 0..9, a,b,c,d,e,f,A,B,C,D,E,F aufgebaut sein.
Der Wert selbst ist das 'LOGISCHE ODER' der folgenden Attribut-Definitionen:
	00010008	Shadow(None)
	00020008	Shadow(Round)
	00040008	Shadow(Rect)
	00080008	Shadow(Treeline)
	00100008	Shadow(Dynamic)
	01000010	Align(None)
	10000080	PickupType(_FUEL_DIESEL_)
	20000080	PickupType(_FUEL_WATER_)
	40000080	PickupType(_FUEL_COAL_)
	00000100	StoreMatrix()
	00000200	NoDirLight()
	00000400	Tunnelentrance()
	00000800	AnimShape()
Beispiel: 01040A18 - Shadow(Rect), Align(None), AnimShape(), NoDirLight()
	(10=A, 11=B, 12=C, 13=D, 14=E, 15=F)
Achtung: Falls mehrere gleichartige Attribute spezifiziert werden, wird das (von der Attributdefinition her) geringere
		ignoriert. (z.B. 00030008 - Shadow(None) und Shadow(Round) ==> 00020008 - Shadow(Round))
Hinweis: Der Attributwert wird mit '711F0F98' maskiert. Damit haben alle anderen Kennungen keine Wirkung.

Die so spezifizierte *.ref-Definiton eines Shapes wird genau dann, der *.ref-Datei hinzugefuegt, wenn dieser Signalshape
(oder Objektshape) neu in die Route installiert wird. Dazu ist es ggf. notwendig, dass zusaetzlich entsprechnde Optionen
beim Funktionsaufruf spezifiziert werden.

Beispiel:
 % Signaltafeln
 %% KN1-NE1.s	01000010 "NE1 Trapeztafel"		# Align(None) only
 %% KN1-NE2.s	01000010 "Vorsignaltafel"
 %% KN1-NE4.s	01000010 "NE4 Rautentafel" 


 
Beispiel einer Konvertierungsanweisung EINES Signals (aus PT1):

Quell-Definition (Shape)			Ziel-Definition (Shape)
SignalShape (					SignalShape (
	"DB4_HP3.s"					"DB4_HP3.s"
	"DB Hauptsignal Epoche 4-5"			"DB Hauptsignal Epoche 4-5 "
	SignalSubObjs ( 7				SignalSubObjs ( 20
		SignalSubObj ( 0 "Head1" " "			SignalSubObj ( 0 "" "Ausfahrfunktion"
			SigSubType ( SIGNAL_HEAD )			SigSubType ( USER2 )
			SigSubJnLinkIf ( 1 4 )				SignalFlags ( OPTIONAL )
			SigSubSType ( "DB4HP3" )		)
		)						SignalSubObj ( 1 "" "Alternative Geschw. / Rangieren"
		SignalSubObj ( 1 "" "max. 40/100 km/h"			SigSubType ( USER3 )
			SigSubType ( USER1 )				SignalFlags ( OPTIONAL )
			SignalFlags ( OPTIONAL )		)
		)						SignalSubObj ( 2 "" "max. 40/60 km/h"
		SignalSubObj ( 2 "" "max. 60/100 km/h"			SigSubType ( Number_Plate )
			SigSubType ( USER2 )				SignalFlags ( OPTIONAL )
			SignalFlags ( OPTIONAL )		)
		)						SignalSubObj ( 3 "" "max. 70/90 km/h"
		SignalSubObj ( 3 "" "max. 80 km/h"			SigSubType ( Gradient_Plate )
			SigSubType ( USER3 )				SignalFlags ( OPTIONAL )
			SignalFlags ( OPTIONAL )		)
		)						SignalSubObj ( 4 "" "Davorstehendes Vorsignal"
		SignalSubObj ( 4 "" "Verzweigung"			SigSubType ( USER1 )
			SigSubType ( USER4 )				SignalFlags ( OPTIONAL )
			SignalFlags ( OPTIONAL )		)
		)						SignalSubObj ( 5 "Head1" " "
		SignalSubObj ( 5 "" "Ausfahrfunktion"			SigSubType ( SIGNAL_HEAD )
			SigSubType ( Gradient_Plate )			SigSubSType ( "DB4HP3" )
			SignalFlags ( OPTIONAL )		)
		)						SignalSubObj ( 6 "" " "
		SignalSubObj ( 6 "" "Gegenrichtung aktiv"		SigSubType ( SIGNAL_HEAD )
			SigSubType ( SIGNAL_HEAD )			SigSubSType ( "SigCtl_1" )
			SignalFlags ( OPTIONAL BACK_FACING )	)
			SigSubSType ( "DB4HP3X" )		SignalSubObj ( 7 "" " "
		)							SigSubType ( SIGNAL_HEAD )
	)								SigSubSType ( "SigCtl_2" )
)								)
								SignalSubObj ( 8 "" " "
									SigSubType ( SIGNAL_HEAD )
									SigSubSType ( "SigCtl_3" )
								)
								SignalSubObj ( 9 "" " "
									SigSubType ( SIGNAL_HEAD )
									SigSubSType ( "Set_D" )
								)
								SignalSubObj ( 10 "" " "
									SigSubType ( SIGNAL_HEAD )
									SigSubSType ( "Set_R" )
								)
								SignalSubObj ( 11 "" " "
									SigSubType ( SIGNAL_HEAD )
									SigSubSType ( "HP_S" )
								)
								SignalSubObj ( 12 "" " "
									SigSubType ( SIGNAL_HEAD )
									SigSubSType ( "HP_I" )
								)
								SignalSubObj ( 13 "" "Blockfreigabe"
									SigSubType ( USER2 )
									SignalFlags ( OPTIONAL BACK_FACING )
								)
								SignalSubObj ( 14 "" "ALLE oder KEINEN"
									SigSubType ( SIGNAL_HEAD )
									SigSubSType ( "SigCtl_0X" )
									SignalFlags ( OPTIONAL BACK_FACING )
								)
								SignalSubObj ( 15 "" "ALLE oder KEINEN"
									SigSubType ( SIGNAL_HEAD )
									SigSubSType ( "SigCtl_1X" )
									SignalFlags ( OPTIONAL BACK_FACING )
								)
								SignalSubObj ( 16 "" "ALLE oder KEINEN"
									SigSubType ( SIGNAL_HEAD )
									SigSubSType ( "Set_D" )
									SignalFlags ( OPTIONAL BACK_FACING )
								)
								SignalSubObj ( 17 "" "ALLE oder KEINEN"
									SigSubType ( SIGNAL_HEAD )
									SigSubSType ( "Set_R" )
									SignalFlags ( OPTIONAL BACK_FACING )
								)
								SignalSubObj ( 18 "" "ALLE oder KEINEN"
									SigSubType ( SIGNAL_HEAD )
									SigSubSType ( "HP_S" )
									SignalFlags ( OPTIONAL BACK_FACING )
								)
								SignalSubObj ( 19 "" "ALLE oder KEINEN"
									SigSubType ( SIGNAL_HEAD )
									SigSubSType ( "HP_I" )
									SignalFlags ( OPTIONAL BACK_FACING )
								)
							)
						)
Konvertierungsanweisung:

 DB4_HP3.s				# DB Hauptsignal Epoche 4-5
 /o  0  00000020 00000000 00000001	# Ausfahrfunktion - uebertragen
 /B  4 00000010 00000000	# Verzweigung aktiv? -- Geschwindigkeitsbeschraenkungen nur 'ohne Verzweigung' gueltig
 /o  0  00000006 00000002 00000004	# 40 ohne Verzweigung
 /o  0  00000006 00000004 00000006	# 60 ohne Verzweigung
 /o  0  00000006 00000006 0000000A	# 100 ohne Verzweigung (->90)
 /o  0  0000000E 00000008 00000008	# 80 ohne Verzweigung (->70)
 /o 111 00000010 00000000 00000000	# Verzweigung -- Aktion melden
 /o 01  0000000E 00000000 00000000	# 'Feste Geschwindigkeit' aktiviert -- Meldung 01
 /c  5  0
 /c  6  0 SigCtl_1
 /c  7  0 SigCtl_2
 /c  8  0 SigCtl_3
 /c  9  0 Set_D
 /c 10  0 Set_R
 /c 11  0 HP_S
 /c 12  0 HP_I
 /b  0 00000040 00000000	# Gegenrichtung genutzt ? - nein -> Ende
# Optionenbit 13(00002000) wird bei der Konvertierung NIE gesetzt.
 /c 14  6 SigCtl_0X
 /c 15  6 SigCtl_1X
 /c 16  6 Set_D
 /c 17  6 Set_R
 /c 18  6 HP_S
 /c 19  6 HP_I
# Ende der Konvertierungsanweisung
!01 !     Signal('%0'-%1): Signal definiert 'Feste Geschwindigkeit'! Aktivierung notwendig. (%2)


Hier noch einmal die einzelnen Konvertierungsanweisungen. Diesmal jedoch ergänzt um ausfuehrliche Erlaeuterungen. Diese sind
in der ersten Spalte mit '+' gekennzeichnet:

 DB4_HP3.s				# DB Hauptsignal Epoche 4-5
+ Diese Zeile zeigt an, dass das die Signaldefinition fuer das Shape mit Namen 'DB4_HP3' konvertiert werden soll und dass ALLE
+ Signale dieses Typs innerhalb der Strecke mit Hilfe dieser Anweisung angepasst werden sollen. Da kein zweiter Name folgt,
+ soll der Name in der Zielstrecke (Zieldefinition) beibehalten werden.
+ Eine Konvertierungsdefiniton muss sicherstellen, dass ALLE Subobjekte der Zieldefinition (soweit aktiv) generiert werden.
+ Deshalb folgen dieser 'ersten Zeile' verschieden Konvertierungskommandos, die dies bewirken.

 /o  0  00000020 00000000 00000001	# Ausfahrfunktion - uebertragen
+ Wenn das optionale Subobjekt '5' (Ausfahrfunktion,Gradient_Plate) in einer Signaldefinition (Quelle) selektiert ist, wird
+ das durch das sechste Bit in der Optionenmaske (B'0010.0000' = X'20') gekennzeichnet. Dann ergibt die Maskierung der
+ Signaloptionen mit der hier angegebenen Maske (logisches UND) einen Wert ungleich 0. Dies wird auf 'ungleich 0' geprueft,
+ weil der zweite Maskenwert der Zeile dies fordert. Da diese Bedingung wahr ist, wird in die Optionenmaske der Zieldefinition
+ der dritte, hier angegebene Wert mit Hilfe einer 'logisch ODER' Funktion eingefuegt. Damit wird das letzte Bit der
+ Zieloptionenmaske gesetzt. Dies hat die Wirkung, als wenn das Subobjekt '0' (Ausfahrfunktion,USER2) selektiert werden wuerde.

 /B  4 00000010 00000000	# Verzweigung aktiv? -- Geschwindigkeitsbeschraenkungen nur 'ohne Verzweigung' gueltig
+ In dieser Konvertierungszeile wird geprueft, ob das Subobjekt '4' (B'0001.0000' = X'10') aktiviert ist. In diesem Fall
+ sind die Geschwindigkeitsbeschraenkungen in der Quellendefiniton NUR gueltig, wenn der verbundene Pfad aktiv ist. Da
+ diese Eigenschaft in der Ziel-Definition nicht mehr unterstuetzt wird, sollen Geschwindigkeitsbeschraenkungen NUR
+ auf das Ziel uebetragen werden, wenn KEINE Verzweigung aktiv ist und damit die Beschraenkungen IMMER gelten.
+ (BEMERKUNG: Diese Eigenschaft ist der Beschreibung des Signalsystems (Quelle) zu entnehmen)
+ Wenn dieses Subobjekt selektiert ist, ergibt die Maskierung der Signaloptionen mit der hier angegebenen Maske (logisches UND)
+ einen Wert ungleich 0. Damit ist dann die Bedingung wahr (Vergleichsmaske=='0000000' ==> Vergleich 'ungleich 0' verwenden).
* Durch Verwendung des Kommandos '/B' muss diese Bedingung jedoch invertiert werden, sodass die Bedingung falsch wird und
+ NICHT mit der Auswertung der naechsten Konvertierungszeile fortgefahren wird. Stattdessen werden die naechsten '4'
+ Konvertierungzeilen, die die Geschwindigkeiten bearbeiten, uebersprungen.
+ Falls die (bedingte) Verzweigung NICHT aktiv ist und damit auch das Subobjekt '4' NICHT selektiert ist, wird mit der
+ naechsten Konvertierungszeile fortgefahren.

 /o  0  00000006 00000002 00000004	# 40 ohne Verzweigung
+ Dieses Kommando soll die Beschraenkung auf 40 kmh auf die Zieldefinition uebertragen, falls sie aktiv ist.
+ Durch das Konvertierungskommando werden die Selektionen der Subobjekte '1' (B'0000.0010' = X'02') und '2'
+ (B'0000.0100' = X'04') geprueft. Wenn Subobjekt '1' selektiert ist und Subobjekt '2' NICHT, entspricht dies dem Vergleichs-
+ wert '00000002' und die Bedingung ist wahr. Das hat zur Folge, dass in die Zieloptionenmaske der Wert X'04' eingefuegt
+ wird, was der Selektion von Ziel-Subobjekt '2' (max. 40/60 km/h,Number_Plate) entspricht.

 /o  0  00000006 00000004 00000006	# 60 ohne Verzweigung
+ Dieses Kommando soll die Beschraenkung auf 60 kmh auf die Zieldefinition uebertragen, falls sie aktiv ist.
+ Durch dieses Konvertierungskommando werden ebenfalls die Selektionen der Subobjekte '1' (B'0000.0010' = X'02') und '2'
+ (B'0000.0100' = X'04') geprueft. NUR, wenn Subobjekt '2' selektiert ist und Subobjekt '1' NICHT, entspricht dies dem
+ Vergleichswert '00000004' und die Bedingung ist wahr. Das hat nun zur Folge, dass in die Zieloptionenmaske der Wert X'06'
+ eingefuegt wird, was der Selektion der Ziel-Subobjekte '2' (max. 40/60 km/h,Number_Plate) UND '1'
+ (Alternative Geschw. / Rangieren,USER3)  entspricht.

 /o  0  00000006 00000006 0000000A	# 100 ohne Verzweigung (->90)
+ Dieses Kommando soll die Beschraenkung auf 100 kmh auf die Zieldefinition uebertragen, falls sie aktiv ist.
+ Durch dieses Konvertierungskommando werden nochmals die Selektionen der Subobjekte '1' (B'0000.0010' = X'02') und '2'
+ (B'0000.0100' = X'04') geprueft. NUR, wenn dieses mal BEIDE Subobjekte selektiert sind, entspricht dies dem Vergleichswert
+ '00000006' und die Bedingung ist wahr. Das hat nun zur Folge, dass in die Zieloptionenmaske der Wert X'0A' eingefuegt wird,
+ was der Selektion der Ziel-Subobjekte '3' (max. 70/90 km/h,Gradient_Plate) UND '1' (Alternative Geschw. / Rangieren,USER3)
+ entspricht.

 /o  0  0000000E 00000008 00000008	# 80 ohne Verzweigung (->70)
+ Dieses Kommando soll die Beschraenkung auf 80 kmh auf die Zieldefinition uebertragen, falls sie aktiv ist.
+ Durch dieses Konvertierungskommando werden in der Quelldefinition die Selektionen der Subobjekte '1' (B'0000.0010' = X'02'),
+ '2' (B'0000.0100' = X'04'), und '3' (B'0000.1000' = X'08') geprueft. NUR, wenn ausschliesslich Subobjekt '3' selektiert ist,
+ entspricht dies dem Vergleichswert '00000008' und die Bedingung ist wahr. Das hat dann zur Folge, dass in die
+ Zieloptionenmaske der Wert X'08' eingefuegt wird, was der Selektion des Ziel-Subobjekts '3' (max. 70/90 km/h,Gradient_Plate)
+ entspricht.

 /o 111 00000010 00000000 00000000	# Verzweigung -- Aktion melden
+ Dieses Kommando soll dem Nutzer mitteilen, dass eine nicht mehr (direkt) unterstuetzte Signaloption benutzt ist.
+ Durch dieses Konvertierungskommando wird in der Quelldefinition die Selektion des Subobjektes '4' (B'0001.0000' = X'10')
+ geprueft. Wenn dieses Subobjekt selektiert ist, ergibt die Maskierung der Signaloptionen mit der hier angegebenen Maske
+ (logisches UND) einen Wert ungleich 0. Damit wird - falls die Bedingung wahr ist (Subobjekt ist selektiert) - die
+ System-Meldung mit der NUmmer 111 ausgegeben. Diese wird in dieser Konvertierungsdatei NICHT definiert, sondern ist als
+ Standard-Meldung 11 ('chgSg*11') bereits in der ErrMsg-Datei vorhanden. Da weiterhin der dritte Wert in der
+ Konvertierungsdefinition 0 ist, wird keine Modifikation der Zieloptionenmaske vorgenommen,

 /o 01  0000000E 00000000 00000000	# 'Feste Geschwindigkeit' aktiviert -- Meldung
+ Noch einmal wird durch dieses Konvertierungskommando in der Quelldefinition die Selektion der Subobjekte '1'
+ (B'0000.0010' = X'02'), '2' (B'0000.0100' = X'04'), und '3' (B'0000.1000' = X'08') geprueft. Durch einen Vergleich des
+ Maskierungsergebnisses mit 0, kann festgestellt werden, ob in der Quelldefinition EINE BELIEBIGE Geschwindigkeitsselektion
+ aktiviert wurde. Ist dies der Fall und damit die Bedingung wahr (Maskierung ungleich 0), wird die weiter unten definierte
+ Meldung '01' ausgegeben und der Nutzer auf die Notwendigkeit weiter Aktionen hingewiesen.

 /c  5  0
+ Subobjekte der Art 'SIGNAL_HEAD' werden im TS durch Signalitem-Definitionen dargestellt. So auch hier. Diese
+ Konvertierungszeile erstellt in der Zieldefininiton fuer das Subobjekt '5' (HEAD1,DB4HP3) ein SignalItem, indem es das
+ SignalItem des Subobjektes '0' der Quelldefinition als Vorlage benutzt. So werden z.B. die Positionswerte des neuen
+ Signalitems dort entnommen. Auch wird der Name des verwendeten Scripts beibehalten.

 /c  6  0 SigCtl_1
+ Diese Konvertierungszeile erstellt in der Zieldefininiton fuer das Subobjekt '6' ein SignalItem, indem es das SignalItem
+ des Subobjektes '0' der Quelldefinition als Vorlage benutzt. So werden z.B. die Positionswerte des neuen
+ Signalitems dort entnommen. Der Name des verwendeten Scripts wird in diesem Fall jedoch veraendert. Dieses neue
+ Signalitem soll die Signaltype-Definition (und damit auch das Script) 'SigCtl_1' benutzen.

 /c  7  0 SigCtl_2
+ Diese Konvertierungszeile erstellt in der Zieldefininiton fuer das Subobjekt '7' ein Signalitem, indem es nochmals das
+ SignalItem  des Subobjektes '0' der Quelldefinition als Vorlage benutzt. Der Name des verwendeten Scripts wird nochmals
+ veraendert. Dieses neue Signalitem soll die Signaltype-Definition (und damit auch das Script) 'SigCtl_2' verwenden.

 /c  8  0 SigCtl_3
+ Siehe letzte Beschreibung.

 /c  9  0 Set_D
+ Siehe letzte Beschreibung.

 /c 10  0 Set_R
+ Siehe letzte Beschreibung.

 /c 11  0 HP_S
+ Siehe letzte Beschreibung.

 /c 12  0 HP_I
+ Siehe letzte Beschreibung.

 /b  0 00000040 00000000	# Gegenrichtung genutzt ? - nein -> Ende
+ Dieses Kommando prueft ob die 'Steuerung der Gegenrichtung' benutzt wird oder ob die Konvertierung vollstaendig ist.
+ In dieser Konvertierungszeile wird geprueft, ob das Subobjekt '6' (B'0100.0000' = X'40') aktiviert ist. In diesem Fall
+ soll das Signal auch fuer die Gegenrichtung gelten. Wenn dieses Subobjekt selektiert ist, ergibt die Maskierung der
+ Signaloptionen mit der hier angegebenen Maske (logisches UND) einen Wert ungleich 0. Damit ist dann die Bedingung wahr
+ (Vergleichsmaske=='0000000' ==> Vergleich 'ungleich 0' verwenden) und es wird mit der Auswertung der naechsten
+ Konvertierungszeile fortgefahren. Falls die Funktion fuer die Gegenrichtung NICHT gefordert wird und damit auch das
+ Subobjekt '6' NICHT selektiert ist, ist die Bedingung NICHT WAHR und es wird die Bearbeitung der Konvertierung des
+ Signals beendet. Dies wird durch den Wert '0' hinter dem Kommando '/b' gekennzeichnet. Dann gibt es in dieser Signal-
+ definition (Ziel) KEINE AKTIVEN Subobjekte mit dem Attribut 'BACK_FACING'.

# Optionenbit 13(00002000) wird bei der Konvertierung NIE gesetzt.
+ Dies ist ein Kommnentar, der darauf hinweisen soll, dass das Subobjekt '13' der Zieldefinition waehrend einer Konvertierung
+ NIE aktiviert d.h selektiert wird.

 /c 14  6 SigCtl_0X
+ Diese Konvertierungszeile erstellt in der Zieldefininiton fuer das Subobjekt '14' ein SignalItem, indem es das
+ SignalItem des Subobjektes '6' der Quelldefinition als Vorlage benutzt. So werden z.B. die Positionswerte des neuen
+ Signalitems dort entnommen. Aber auch die Option 'BACK_FACING', die im Subobjekt der Quelldefinition gesetzt ist, wird auf
+ das Subobjekt der Zieldefinition bzw. dessen zugeordnetes Signalitem uebertragen. Der Name des verwendeten Scripts wird auf
+ den Wert 'SigCtl_0X' veraendert.

 /c 15  6 SigCtl_1X
+ Diese Konvertierungszeile erstellt in der Zieldefininiton ein neues Subobjekt '15' als SignalItem, indem es das
+ SignalItem des Subobjektes '6' der Quelldefinition als Vorlage benutzt. So werden z.B. die Positionswerte, aber auch die
+ Option 'BACK_FACING' des neuen Signalitems dort entnommen. Der Name des verwendeten Scripts wird auf den Wert 'SigCtl_1X'
+ veraendert.

 /c 16  6 Set_D
+ Diese Konvertierungszeile erstellt in der Zieldefininiton fuer das Subobjekt '16' ein Signalitem, indem es nochmals das
+ SignalItem des Subobjektes '6' der Quelldefinition als Vorlage benutzt. Der Name des verwendeten Scripts wird auf den
+ Wert 'Set_D' veraendert.

 /c 17  6 Set_R
+ Siehe letzte Beschreibung.

 /c 18  6 HP_S
+ Siehe letzte Beschreibung.

 /c 19  6 HP_I
+ Siehe letzte Beschreibung.

# Ende der Konvertierungsanweisung

!01 !     Signal('%0'-%1): Signal definiert 'Feste Geschwindigkeit'! Aktivierung notwendig. (%2)
+ Hier wird eine Meldung definiert, die ggf. ausgegeben werden muss. Sie enthaelt Platzhalter, die bei der Ausgabe durch die
+ konkreten Werte der betroffenen Signaldefinition (Quelle) ersetzt werden. So wird '%0' durch den Shape-Namen des Signals
+ (Quelle) ersetzt und statt '%1' wird die Positionsangabe des Signals innerhalb der World-Datei eingesetzt. Die Meldung
+ beginnt direkt vor dem (zweiten) Zeichen '!' und geht bis zum Ende der Zeile.

Hinweis zu obigen Kommentaren:	B'0000.0000' ist Binaerwert. 8 Bits ergeben ein Byte
				X'00' ist Hexadezimalwert. 2 Zeichen (0-9,a-f) ergeben ein Byte 

