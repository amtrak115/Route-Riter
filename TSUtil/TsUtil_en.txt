
	Trainsimulator - Utility "TSUtil"



Version       : 3.6.03
Programdate   : 01.10.2011
Documentation : 01.10.2011

Instructions:

This utility was developed to simplify maintenance and modification of TS-routes. Therfore,
there are some, so called, 'Functions', which will be described in the following: 

INTRODUCTION:
All you need to use this utility is a working "Java-Runtime-Environment".

After the installation (see also: Installaion of ... in 'readme.txt') TSUtil can be used
immediately. TSUtil is always called as a 'Java-Application' from within a DOS-Window, regardless
of the function you like to use. Because there is no GUI, the activation of the functions are
a little bit 'tricky' and output (errors and messages) are directed to the window, but the
usage is quite effective.
If someone changes the standard-buffer-values of the DOS-Window (e.g. 400 lines) all messages
could easely be checked. Nevertheless it's better to have a LOG-File written, because this file
will contain additional informations.
3.4.01: A gaphical user-interface has been added to TSUtil, in order to simplify selection and input of options,
	requested function and file-references.

IMPORTANT:
  If you enter some data, you should be aware of the case of letters. Although the program ist not
  sensitive to case in all circumstances, it is better to pay attention to case of all your input
  in order to avoid errors.

IMPORTANT:
  ALWAYS be sure that you have a backup of the files, before you are going to work with TSUtil.

VERY IMPORTANT:
  Since version 3, and if not stated otherwise, ALL function have been changed so that they only
  work on 'marked tiles'. So, tile-, world- or sound-files, which do NOT correspond to marked
  tiles are not processed, although they may exist in the appropriate directory. Perhaps you
  have to change the route with the Geometry-Extractor to mark all used tiles as populated.

BACKGROUND to the form of world-files:
  In order to change world-files, they must exists in the so-called UT-Form":
  World-files (.w) can take one of FOUR different file-fomats:
	- [UT] uncompressed Text - File (Unicode, Marker starts with: "SIMISA@@")
	- [CT] compressed Text - File (Unicode, Marker starts with: "SIMISA@F")
	- [UB] uncompressed Binary - File (ASCII, Marker starts with: "SIMISA@@")
	- [CB] compressed Binary - File (ASCII, Marker starts with: "SIMISA@F")
  Remark: My naming conventions are:
	'uncompressed text'-format is also called 'expanded' format
	'uncompressed binary'-format is also called 'reduced' or 'tokenized' format.
	Both formats can be additionally compressed using Z-Lib	algorithm.
  Trainsimulator(TS) provides a tool called "ffeditc_unicode", which can convert world-files between
  the different forms. One call converts:
	a) Option /u :	UT->UB; UB->UT; CT->UB; CB->UT
	b) Option /c :	UT->CB; UB->CT; CT->CB; CB->CT
  So, sometimes it is neccessary to convert a world-file more than once (Option /u) to reach UT-Form
  (CT->UB->UT). UT-Form is the ONLY version of a world-file, which can be modified with an editor.
  You can read the first 7 or 8 characters of a world-file, to distinguish between the 4 forms. Then you
  have to compare these characters with the marker-definition. First, you must read the file using binary-
  mode in order to check if the file is a binary file. Only if the read characters cannot be interpreted,
  you can read file-header again using unicode-mode. Reading of a binary file in unicode-mode will
  create a read-error, because invalid unicode-characters are recognized.

  The use of "ffeditc_unicode" is NOT error-free. A single conversion can make some objects invisible from
  special directions and make them unselectable, too. Route-Editor(RE) can convert all tiles to UT-Form
  without an error. Compareing the results of such conversions shows, that "ViewDbSphere" - entries have a
  much deeper structure and therefore longer recordlength when they are uncompressed with "ffeditc_unicode".
  In order to convert a world-file to UT-form without a error, it is necessary to use Route-Editor.

  To decompress or compress world-files without an error, you can ALSO use the 'DeComp'- or 'Comp'-Program
  of Martyn Griffin (recmp119.zip). These Programs are/were also implemented in Route-Riter, which can do
  the job, too.
  ATTENTION: These programs cannot handle world-files which use the CT-Form. In these cases you must use
	"ffeditc_unicode" or the Route-Editor.

  You also can compress/decompress/reduce/expand files with a program-module from Okrasa Ghia. This new
  module is also implemented in Route-Riter starting with version 6. The performance of any conversation
  is very good and a stand-alone version is also available(zipper/tk_utils). 
  ATTENTION: This module needs MS 'framework.net'-Environment

  Due to cooperation with Mike Simpson (Route-Riter), TSUtil-version 3.0.140 (and later) contains a
  program-module which decompresses/expands World-, Tile- or Shape-files, while reading. On the other side
  the module compresses/reduces data, while writing to a file. So, the precondition, that a function requires
  a decompressed/expanded file, is no longer valid.
  Starting with version 7, Router-Riter also uses this program-module to handle compression/decompression.

  Remark: The track-/road-database always use a storage-mode, which can be directly read and modified.
END of background


A short help can be shown with the following command:
	C>java TSUtil ?

When calling TSUtil, 'Systemoptions' can be inserted. These options depend on the used runtime-environment
and may change from version to version. e.g. One of the options can increase the used heap-memory from
(default) 64MB to 256MB: "java -Xmx256m TSUtil ..."

Remark: Starting with Java-Runtime-Version 1.5 this default heap-memory-restriction is no longer valid.

Since version 3.4.10, TSUtil may be used to verify the current active version of the utility. If TSUtil is called
using the following command
	'java TSUtil "=x.x.xxy" ',
while 'x.x.xx' specifies the requested versionnumber and the OPTIONAL letter 'y' specifies the requested subversion,
the current version of TSUtil is checked if it at least matches the requested version. In this case a retuncode of 0
is returned. Otherwise TSUtil returns a returncode of 1 or 2 depending on whether the version itself or only the
requested subversion do not match.

However, a returncode of 5 or greater, generally describes an error within TSUtil.

Before selecting a single function, GLOBAL OPTIONS can be inserted in the commandline. These options
can be specified in every case without error, although they are NOT USED in every function.
The later call-definitions of the functions show, which global option is recognized.
The following GLOBAL OPTIONS are valid:

 -e		: This global Option is used to suppress output of all 'Informations' and 'Warnings' both to
			the log-file as well as to the screen.
 -j<sl1>[:<sl2>]
		: This global option is used to specify a 'StaticDetailLevel', which is applied, if an automatic
			correction of the 'SectionIDX'-value is requested. If the 'joker'-value (4294967280) is
			found within a 'SectionIDX'-Definition, the correct value has to be restored from the
			'tsection.dat'-file.  Normally the current 'StaticdetailLevel' of such a definition is
			NOT changed. However, if this option is specified, the current value is changed to the
			value specified as 'sl1' (1..9) and the object is 'resorted' within the world-file.
			While searching for the correct shape, path-values, which may be specified for the
			filename, are removed. If such a path must be removed to find the correct value for
			the 'SectionIDX'-Definition, the value given as 'sl2' (1..9) is used instead of 'sl1'.
			If it is not specified, 'sl1' is also used in this situation.
 -k		: This global option enables the output of the messagekey to the log-file. Every message of this
			file is then preceeded by its messagekey, wrapped by curly brackets. 
 -l[<logfle>]	: With this global option, writing of a log-file can be activated. If the name of the
			log-file (<logfle>), which could/should be a fully specified filename, is ommitted or
			invalid, this log-file is named 'TSUtil.log' and will be created in the current
			working-directory.
			If this option is successfully specified, it will take absolute precedence and specififying
			a log-file-name at the end of a commandline has no impact. Functions, where a log-file
			MAY also be specified at the end of the commandline are marked with '+' in the lower
			functionlist.
			If the option is specified using an upper case ('-L'), and the log-outputfile is already
			present, the log-output is added to this file. Otherwise an existing logfile is deleted.
 -m<id>		: Using this global option, it is possible to suppress single messages both to the log-file as
			well as	to the screen. <id> is the Key of the message, which should be supressed. This 
			key can be found in the current file "TSErrMsg_xx.properties". Global option '-m' can
			be specified more than once.
			ATTENTION: Message-keys are case-sensitive.
 -p<p>:<path>	: This option is used to specify an accesspath, which may be used, if a filename or type of a
			track-object is modified. "p" specifies a pathnumber between '2' and '9' which is
			referenced from a local option to activate the requested path.
			The pathnumber is followed by the path-definition, which may contain placeholder.
			These placeholders are resolved during check of option. These are:
				%0 - <current routename>
				%1 - "../../Routes/" (fix value)
			ATTENTION: The path-value MUST contain more than 8 characters or it is not accepted.
				3.4.01: If a path-value is shorter than 8 character and it is important to use
					this path, it is possible to extend the path-string and insert exactly
					8 '%'-chars BEFORE the path-value. Such a marker is removed before the
					path is used.
			Additionally the following path-definitions are active in any case:
				0: ../../Routes/<route>/Shapes/
				1: <route>/		(search-path 'global/shapes/<route>')
			Option '-p' may be specified more than once, so that serveral accesspaths can be defined.
			If the same pathnumber is specified again, the new path overwrites the original one.
			Example: '-p4:../Basis/' defines accesspath No. 4 as '<systempath>/global/Basis/'
 -q<n>:<fref>	: This option controls the assignment between file-numbers/folder-numbers and concrete
			files/folders. If a local option uses this assignment, this is mentioned within the
			description of the option.
			"n" specifiles a file-number between '0' and '9' which is referenced from a local option
			instead of the concrete file/directory.
			"fref" specifies the file-/path-reference, the path to the file or directory, which should
			be used to satify the needs of the requesting option. This reference may be relative or
			absolute. (with or without a drive-letter)
			Option '-q' may be specified more than once, so that several file-/folder-references can be
			defined. If the same number is specified again, the new reference overwrites the original one.
			Attention: If a drive-letter is NOT specified within the file-/folder-path, this relative
				path is based on the TSUtil-working-directory.
			Example: '-q4:Basis' defines folder No. 4 as '<tsutilpath>/Basis'
 -w		: This global Option is used to suppress output of all 'Informations' both to the log-file as
			well as to the screen.
 -y<h>		: This option may be used to modify the height of the 'overheadwire'. If this option is specified,
			the new value <h> will replace the current value of 'OverheadWireHeight', which is included
			within the Route-Controlfile ('*.trk').
			If the option is specified using an upper case ('-Y'), value <h> will be added to the current
			value instead of replacing it.
			If no entry 'OverheadWireHeight' is included within the Route-Controlfile ('*.trk'), this
			option is ignored.
			Attention: In order to activate the new height-value, the used function must rewrite the
				Route-Controlfile ('*.trk'). Not all functions will do that.

There are also some extended global options, which are prefixed with '$' and which may change in further versions.
These are:

 -$B		: This option activates Batch-mode, which suppresses interactive output.
 -$C<txt>	: This option inserts "<txt>" into the log-file. This option may be used to identify the log-file.
 -$D<XMask>:<YMask>	: This option is used together with 'Correction-Mode' of TSUtil. Compare to Annex A for
				further explanation.
 -$E[<fnme>]	: This option redirects ERROR-Output of TSUtil to the file "<fnme>". If filename is ommitted,
			'TSUtil.err' is used instead.
 -$F<val>	: This option specifies the initial value, which is used to create I/O-buffers. It must be a
			multiple of 4096 or it is rounded up.
 -$I<nr>	: This option specifies the maximum iteration-level for input/output of shapes, tiles or world-
			object. The default-value is '30'. If objects within these file are nested deeper then
			30 level, this value should be increased. (normally not needed)
 -$S		: If this option is specified, output of the database is formatted and written in a more readable
			form. Then a line-break is additionally inserted between every Section-definition.
 -$T		: If this option is specified, a 'timestamp' is printed before and after execution of the selected
			function.
 -$X		: This option enables output of additional messages, which are normally used for debugging purpose.
 -$Z		: This option supresses execution of the function. TSutil checks the specified parameters and
			terminates.
 -$$PTol(<nr>)	: This option modifies the 'Path-Tollerance'-value (normally 0.5) which is used to correlate
			path-point-definitions to the track-database.
 -$$PrMsk(<hv>)	: The specified hexadecimal mask (8) within this option is use to decide, if an internal table should
			be include in the extended LOG-output, which is normally switched on by a local option.
			The default value is 'ffffffff', which includes all tables.
 -$$Dist(<nr>)	: This option overwrites the threshold-value (0.99), which is used to check junction-distances.


So, a call to TSUtil looks like this:
	java [<system-options>] TSUtil [<global-options>] <functionname> [<local-options>] ...

Starting with version 3.4.01 a graphical user interface is available. It is activated using
	java [<system-options>] TSUtilDlg
as the commandline. This interface supports the selection of the TSUtil-function and controls input of argumnents
as well as selection of files (e.g. route).

Hint: From now on, TSUtil is available as an jar-file, too. So, everyone can activate all the
	functions of this tool with the java 'jar-file-syntax'. Using this syntax, it is also
	possible to create ptf-files.  
	e.g: "javaw -jar [<system-options>] TSUtil.jar ..."
	     "java -jar [<system-options>] TSUtil.jar ..."


The following functions are available in this Version (Number of description follows in brackets):
+	- adjh    : Change global Height-Definition of a Route (16)
$	- chgdb   : Change shape-/section-references in track-Database "*.tdb"/"*.rdb" (6)
	- chgsig  : Replacement/Modification of the signaldefinitions of a route (25)
+	- chkup   : Check a global 'tsection.dat'-File to be used as upgrade for an OLD one (15)
+	- clrdb   : Reorganization of databases (track/road) and resources (20)
	- cmkr    : Convert '.coo'-file to marker-file (4)
+	- cmp     : Reduce/Compress files (S,T,W) to binary format (17)
$+	- cmpw    : Compress world-files using the "Comp"-program of Martyn Griffin (10)
+*	- cvrt    : Convert, adjust and correct a complete route-definition (5)
	- dcpy    : Compare file-dates and copy if newer (7)
	- filter  : Verification and Correction of the Geometrie-Definition of a Route (9)
	- fcpy    : Copy and modification of file(s)/filegroups (S,T,W) (29)
	- fmgr    : Compress/Decompress/Reduce/Expand of file(s)/filegroups (S,T,W) (24)
+*	- ichk    : Integrity-check of a route-definition (12)
+	- merge   : Merge a route-definition into another route (19)
+*	- move    : Shift complete route-definition to new longitude/lattitude (14)
*	- mveobj  : Shift tracks, roads and route-objects ignoring quad-borders (27)
+	- rendb   : Modify track-database "*.tdb"/"*.rdb" and delete gaps (13)
	- shftdyn : Shift dynamic definitions of local 'tsection.dat' to current position (22)
	- shift   : Shift/renumber block of global Shape/Section-definitions within 'tsection.dat' (8)
	- srchsig : Count and log signal-shapes of a route (26)
	- testsig : Check of a signalconfiguration independently from a route (30)
*	- tsconv  : Convert ALL route-definitions of a TS-Instance according to 'cvrt' (11)
+	- unc     : Uncompress/expand files (S,T,W) (18)
	- version : Show/print internal ID-values of known TSUil-classes (23)
$	- wcmp    : Compress world-files to binary format (ffeditc_unicode) (2)
$	- wcmpo   : Compress world-files to binary format (only) (ffeditc_unicode) (3)
	- world   : Split and merge of world-files (28)
$	- wunc    : Uncompress world-files (ffeditc_unicode) (1)
	- zusi    : Prepare a route-defintion for import into ZUSI-Trainsimulator (21)

* - These functions are the most important part of this tool.
$ - This function is defined for compatibility only. Please, do not use any longer.

If not stated otherwise, all functions store their result(s) in a new directory which is named '\newroute'.
The structure of subdirectories of the complete route is retained and copied. All functions are designed
in a manner that a TDB-rebuild is no longer necessary.

Error-Messages of the processes are identified with "--->" so that they can be recognized easily.
Normally, this means, that the created data-files cannot be used, because they may contain errors, too.
But that is NOT mandatory and depends on the message.
Warnings and other messages are not specially marked.

Definitions of common terms:
  static representation
	A 'static representation' of a 'TrackObj' is a 'TrackObj'-Definition, which is defined as an
	object of type 'Static' in the world-files. Such an object furthermore contains all properties of
	a 'TrackObj'-definition and is also recorded in the trackdatabase. But it does NOT show an
	overheadwire, even if the route is electrified.
	Such a object is also called 'Hidewire-Object' (especially in messages) due to the name of the
	tool, which primarily created these objects.


1) Uncompress world-files
  *** FUNCTION SHOULD NOT BE USED ANY LONGER ***
  The function "wunc" is used to convert ALL world-files to "uncompressed text" - form (UT-Form),
  that means the only form of a world-file, which can be changed using a 'normal' editor.
  In order to do this, 'wunc' creates a list of world-files and stores this list to an intermediate
  file. Then it checks the form of each world-files and converts them by generating one or more calls
  to "ffeditc_unicode".

  The call of this function looks as follows:
	C>java TSUtil [{-e|-w}] [-k] [-l[<logfle>]] [-m<id>] [-p<p>:<path>] [-q<n>:<fref>] wunc <dir>
  with:
	"dir" contains (fully defined) path to route-definition, where the world-files are located.
	Concerning the global options, compare to 'Introduction'

  e.g. ProTrain 1: "java TSUtil -lC:\Logdat.log wunc C:\TRSim\routes\ProTrain_Rheintal"

  Action(s) to use the results of the function:
	- All files in the 'newRoute/world'-directory should be copied to the directory 'world'
		of the route.

2) Compress world-files to binary format
  *** FUNCTION SHOULD NOT BE USED ANY LONGER ***
  The function "wcmp" is used to convert ALL world-files to "compressed binary" - form (CB-Form),
  that means the form of a world-file, which optimizes load-time.
  In order to do this, 'wcmp' creates a list of world-files and stores this list to an intermediate
  file. Then it checks the form of each world-files and first converts them to UT-Form by generating
  one or more calls to "ffeditc_unicode". At least, an additional call to "ffeditc_unicode" is used
  to convert each file to CB-form.

  The call of this function looks as follows:
	C>java TSUtil [{-e|-w}] [-k] [-l[<logfle>]] [-m<id>] [-p<p>:<path>] [-q<n>:<fref>] wcmp <dir>
  with:
	"dir" contains (fully defined) path to route-definition, where the world-files are located.
	Concerning the global options, compare to 'Introduction'

  e.g. ProTrain 1: "java TSUtil -lC:\Logdat.log wcmp C:\TRSim\routes\ProTrain_Rheintal"

  Action(s) to use the results of the function:
	- All files in the 'newRoute/world'-directory should be copied to the directory 'world'
		of the route.

3) Compress world-files to binary format (only)
  *** FUNCTION SHOULD NOT BE USED ANY LONGER ***
  The function "wcmpo" is ALSO used to convert ALL world-files to "compressed binary" - form (CB-Form),
  that means the form of a world-file, which optimizes load-time.
  But unlike to function 'wcmp', this function ONLY converts world-files to CB-form, which already uses
  the UT-form. All other world-files are NOT changed.

  The call of this function looks as follows:
	C>java TSUtil [{-e|-w}] [-k] [-l[<logfle>]] [-m<id>] [-p<p>:<path>] [-q<n>:<fref>] wcmpo <dir>
  with:
	"dir" contains (fully defined) path to route-definition, where the world-files are located.
	Concerning the global options, compare to 'Introduction'

  e.g. ProTrain 1: "java TSUtil -lC:\Logdat.log wcmpo C:\TRSim\routes\ProTrain_Rheintal"

  Action(s) to use the results of the function:
	- All files in the 'newRoute/world'-directory should be copied to the directory 'world'
		of the route.

4) Convert '.coo'-file to marker-file
  If someone uses a Map-Serie called "TOP50" (1:50000), it is possible to store coordinates to a file.
  This file gets the suffix ".coo".  This Function 'cmkr' can convert such a file to a marker-file
  of Trainsimulator.

  The call of this function looks as follows:
	C>java TSUtil [-m<id>] cmkr [-4] <file>
  with:
	"file" is the (fully defined) filename without suffix of the file, which contains
		Coordinate-Definitions using WGS84(decimal)-Format.
        Option '-4' specifies that the coordinate-definitions use the newer file-format, which contain a
		explicit height value. This format is created, by the version 4 of the TOP50-Program.
		If this option is not specified, version 3 is assumed.
	Concerning the global options, compare to 'Introduction'

  z.B. : "java TSUtil cmkr C:\koord"
	This converts file Datei "C:\koord.coo" to marker-file "C:\koord.mkr".

  Note: Only markers of type "2" are used to generate marker-lines.

  Action(s) to use the results of the function:
	- Rename the result-file to the appropriate name and copy it to the route-directory.

5) Convert, adjust and correct a complete route-definition
  This function ('cvrt') is mainly used, to customise a route-definition to changes of the
  environment. This includes a replacement of the global 'tsection.dat' - file. Additionally
  other modifications like 'renumbering ID's of World-Objects' are handled by this function.
  These actions are triggered by options, which are:
	'-a'/'-A'	Create static, track-attached objects automatically
	'-b'		Adjust route to a new global 'tsection.dat'-file
	'-c'		Write target-files using the compressed format [CB]
	'-f'/'-F'	Suppress Overheadwire using the SectionIDX-method
	'-g'/'-G'	Converts static objects into objects of type 'Gantry'
	'-h'/'-H'	Suppress Overheadwire using the Hidewire-method
	'-k'		Activate 'correction-mode' of world-files
	'-l'/'-L'	Change the current 'StaticDetailLevel' of world-objects
	'-m'/'-M'	Modify the filename of track-/road-objects
	'-n'/'-N'	Suppress all modifications of track-/road-objects
	'-o'/'-O'	Modify the current 'StaticFlag'-value of objects
	'-r'		Renumber all objects within a world-file
	'-s'		Check existence of all used track-/road-objects
	'-u'		Write target-files using the uncompressed format [UT]
	'-v'		Assign objects within 'tsection.dat'-versions
	'-w'		Create missing world-files
	'-z'		Extended recovery of modified track-/road-objects

  In order to get the exact specification of all options, refer to the description of this function,
  where all such changes, triggerd by an option, are described in detail.

  If the globale 'tsection.dat' has been replaced and the route must be adjusted to this, the
  following reqirements have to be met to execute this function without an error:
	- The global 'tsection.dat'-file, which is originally used to build the route, has
		to be still available.
	- The global 'tsection.dat'-file, to which route-definition is adapted, is the actual
		one and is located in the 'global' directory.
  This function also recognizes changes like replacement of Shape-Definitions and adjusts all
  references automatically. But, in order to establish a non-ambigous assignment between 'old'
  and 'new' Shape-/Section-definitions, it is recommended that the sequence of Sub-Options
  (e.g. SectionIdx) WITHIN a definition do NOT change. If this is NOT possible (e.g. because
  of error-correction) an assignment can be established manually with the '-v' - option.

  This function modifies the 'populated' world-files as well as the track- and road-database and
  creates them again. A new local 'tsection.dat'-file is also build and stored in the 'newroute'-
  directory. So, it is no longer necessary to do a TDB-rebuild.  

  If there are NO changes between 'old' and 'new' global 'tsection.dat'-file, the '-b'-Option 
  should be ommitted. Then, replacement of shape- and section-definitions will not be done. All other
  function of 'cvrt' are still available. 

  The call of this function looks as follows:
	C>java TSUtil [{-e|-w}] [-k] [-l[<logfle>]] [-m<id>] [-p<p>:<path>] [-q<n>:<fref>] cvrt [-@<ifle>]
		[{-A|-a}<sl1>:<s1>:<sl2>:[p2]:[<sl3>]:<s2>[:[<s3>][:<s4>]]] [-b<file>] [{-c|-u}]
		[{{-n|-N} | {-f|-F}{1|2|3}:<shnr>[:[<p2>]:<s1>:[<s2>]]
			  | {-h|-H}{1|2|3}[:[<p1>][:[<p2>]:<s1>:[<s2>]]]}] [{-g|-G}<s>] [-k]
		[-{l|L}<m>:<s>:<sll>:<sl>]]
		[-{m|M}[<sl>:[<p2>]:<s1>:[<s2>]]] [-{o|O}<m1>:<s>:<m2>[:<m3>]]
		[-r] [-s] [-v<no1>:<no2>] [-w] [-z{1|2|3}[:<s1>:[<s2>]]] <dir>
  with:
	"dir" contains (fully defined) path to route-definition
	"file" describes filename (and path) to old global "tsection.dat" -file. This file need not
		be named 'tsection.dat'.
	"ifle" describes filename (and path) of a textfile, which contains additional local options of this
		commandline. All these additional options within this file become part of the commandline to
		activate the function.
		The local options in this optionfile follow the same format as the other local options (e.g: '-'
		is required with any option) and can be separated into more than one physical line.
	Option '-a'/'-A' may be utilized to automatically create static objects. Using a static track-definition as
		a template until 3 static objects may be created at the SAME position and with the SAME direction.
		Template-objects are marked with a selectable 'StaticDetailLevel'. Together with the track-
		attributes 'Animate this object' and 'Collision with objects' the number of created static objects
		is fixed.
		The option is directly followed by a number ("sl1"), which specifies the requested 'StaticDetailLevel'
		of the template-object. All values between '0' and '9' are allowed. Nevertheless, a static
		trackobject is only used as a template, if, additionally, the filename of this object matches the
		specification of the string specified as "s1" (comparison is NOT case-sensitive).  If '-a' is used,
		the filename must start with the "s1"-string to match this specification.  If '-A' is used, "s1"
		contains a 'regular expression' (refer to Annex B), which must match the complete filename.

		If these conditions are fullfilled, the track is used as a template to create static objects and
		the 'StaticDetailLevel' is then reset to the value specified as "sl2". Potentially set attributes
		are also reset. If the conditions are NOT true, nothing happens and the probably next
		'a'/'A'-option is checked and processed.
		String "s2" is used to create the filename of the new static objects. If '-a' is active, the "s1"-
		part of the filename (of the template) is replaced with "s2" to build the new filename. If option
		'-A' is used, the new filename is completely build from "s2". However, backward-references to the
		original filename are resolved(capture-groups).
		The new filename of the static object may be optionally extented with an accesspath. "p2" specifies
		the number(0..9) of such a path, which is defined using GLOBAL option '-p'.
		The 'StaticDetailLevel' of the new object is copied from the template unless it is specified
		as "sl3". Then this value becomes the 'StaticDetaillLevel' of the created object.
		If one or more of the above-named attributes of the template are set, further static objects
		are created. However, "s3" and "s4" are used to build the new filename instead of "s2". These
		arguments must be present in this case. Otherwise an error is printed and the object is NOT
		created.
		The static object, which is build using "s4" is a special one. It is NOT placed in the world-file
		using the original position and direction of the template, but these values are prior modified to
		represent the END of the template. That means that this static object is placed at the end of
		the track. This even may be in an other world-file.

		All three strings "s2", "s3" and "s4" may contain a marker-prefix, which specifies, that all files,
		which are created using this pattern, should also be installed. This prefix consits of a single digit
		diectly followed by "=". This single digit selects an installationdirectory from the list
		of files/directories, which are specified by global option '-q'. If a file-reference is created from
		this option '-a'/'-A' the corresponding file is also copied from the selected installation-directory
		to '<route>/shapes'.
		All prefixes are deleted, before the string is evaluated as specified above.
		Attention: Required 'texture'-definitions are NOT automatically installed.

		Option '-a'/'-A' may be specified more than once, even if it uses the same 'StaticdetailLevel'.

		Example: '-a4:A1:0:::NR_Ramp1' - All trackobjects, which are defined with a 'StaticDetailLevel'
			of 4 and whose filename starts with 'A1' are used as a template to create static objects.
			In this case only one static object can be created, whose filename starts with
			'NR_Ramp1'. ('A1t10mStrt.s' --> 'NR_Ramp1t10mStrt.s')
			'StaticdetailLevel' of the template is changed to '0'.
		Example: '-A4:^A(\d)(.*)\.s$:0::3:NR_Emb$1$2_lft.s:NR_Emb$1t_Start.s' - As above but the
			created objects get a 'StaticDetailLevel' of '3'. Two objects per template may be
			created if 'Animate this object' is set.
			('A2t10mStrt.s' --> 'NR_Emb2t10mStrt_lft.s' and 'NR_Emb2t_Start.s')
			('A3t10mStrt.s' --> 'NR_Emb3t10mStrt_lft.s' and 'NR_Emb3t_Start.s')
		Explanation: 'A2t10mStrt.s' ->	'2' is the first capture-group (\d)
						't10mStrt' is the second capture-group (.*)
			     'A3t10mStrt.s' ->	'3' is the first capture-group
						't10mStrt' is the second capture-group
		Example: '-A4:^A(\d)(.*)\.s$:0::3:0=NR_Emb$1$2_lft.s:0=NR_Emb$1t_Start.s'
			The result of this example ist exactly the same as the last example. However, all 
			referenced files are additionally installed from the folder, referenced by '0' in the
			list of global '-q'-options.
	If option '-c' is used, all world files are written in the compressed format [CB].
		Normally, world-files are written in the same format as they were read. This option
		may be cleared with the '-u' -option.
	If option '-u' is used, all world files are written in the expanded format[UT]. Normally,
		world-files are written in the same format as they were read. This option may be
		cleared with the '-c' -option.
	Option '-n' (or '-N') (from 'normalize') is used to suppress conversions of track-objects to their static
		representation. This inhibits MSTS to suppress the overheadwire for these objects.
		(also compare to 'Hidewire')
		Normally, ALL such objects, which were reconverted from their static representation to normal
		'TrackObj's in order to check them, are converted back to their static representation.
		If option '-n'/'-N' is specified, this conversion is suppressed, and the object-definition
		is written unchanged ('TrkObj'/'Dyntrack') to the world-file. If the filename of such
		an object was modified, this modification is lost and the original filename is used.
		Option '-h'/'-H' or option '-f'/'-F' must not be used, if option '-n' is specified. If '-n'/'-N'
		is followed by some additional data, this data is skipped.
		Option '-n'/'-N' implies option '-m' with no additional arguments in order to undo the potential
		modification of a filename.

	Option '-g'/'-G' may be used to convert static objects into objects of type 'Gantry'. Therefore the filename of
		this object must match the string "s", which is specified with this option. Comparison succeeds if,
		in case '-g' is specified, the filename starts with the "s"-string. In case of '-G',  "s" contains a
		'regular expression' (refer to Annex B), which must match the complete filename.
		Within both cases, comparison is NOT case-sensitive.

		If comparison succeeds, the static object is converted into a 'Gantry'-object, which is positioned at
		the same position as the original one. Also, the direction-value is not changed.

	Option '-h'/'-H' is used to change track-objects to their static representation. This allows MSTS to suppress
		the overheadwire for these objects. (also compare to 'Hidewire')
		Normally, ALL such objects, which were reconverted from their static representation to normal
		'TrackObj's in order to check them, are converted back to their static representation.

		Option '-h'/'-H' is now used to specify, that additional 'TrkObj'-definitions need to be converted
		to their static representation. This option is followed by a number (1,2,3), which
		is compared to the 'StaticdetailLevel'-property of the 'Trackobj'-definition and select
		if an object should be converted to its static representation. Then, and ONLY then,
		modification of the current filename of the object is possible. Therefore the filename of this object
		must match the specification of the string specified as "s1" (comparison is NOT case-sensitive).  If
		'-h' is used, the filename must start with the "s1"-string to match this specification.  If '-H' is
		specified, "s1" contains a 'regular expression' (refer to Annex B), which must match the complete filename.
		If this condition is fullfilled, second string "s2" is used to create the new filename of the track-objects.
		If '-h' is active, the "s1"-part of the filename is then replaced with "s2" to build the new filename. If
		option '-H' is used, the new filename is completely build from "s2". However, backward-references to the
		original filename are resolved(capture-groups).
		If NO optinal modification of the filename is required, '-h' and '-H' are identical.
		Option '-h'/'-H' (or '-f'/'-F') may be specified up to 3 times using different 'StaticDetailLevel's. If
		'-h'/'-H' is used, '-n'/'-N' cannot be used, too.
		The filename of a converted object may be optionally extented with an accesspath. "p1" and "p2"
		specify the number(0..9) of such a path, which is defined using GLOBAL option '-p'. If specified,
		accesspath "p1" is added to the filename if the object is converted to a static representation and
		accesspath "p2" is added to the filename if (and ONLY if) a modification of the filename occurs AND
		"p1" is not defined.

		Example: '-h1::0:A:Xt' - All trackobjects, which are defined with a 'StaticDetailLevel'
			of 1, are changed to 'Static'-objects. If the filename starts with 'A', this
			'A' is replaced with 'Xt'. (A1t10mstrt.s -> Xt1t10mstrt.s) Then, the accesspath
			0 = "../../Routes/<route>/Shapes/" is also added to the filename.
			(resulting filename of object = '../../Routes/<route>/Shapes/Xt1t10mstrt.s')
		Attention: If modification of filename is active, the original filename is added to
			the world-object using keyword 'TreeTexture'. This keyword is ignored from TS
			within static objects and is only used to undo the modification.
	Option '-f'/'-F' is used to suppress display of the overheadwire of track-objects. It uses a method, which was
		introduced in Germany from 'ProTrain'-Company(BSI). If the 'SectionIDX'-value of a track-world-object
		is changed to a value, which references a road-shape, no overheadwire is displayed.
		(roads do not use an overheadwire) This method applies to 'TrkObj'- AND 'DynTrack'-definitions.

  		Normally, ALL objects, where overheadwire is suppressed using this method, are reconverted to a
		normal 'TrackObj'/'DyTrack'-definitions in order to check them. If the world-file is written,
		the conversion is applied again.
		Option '-f'/'-F' is now used to specify, that additional 'TrkObj'-/'DynTrack'-definitions need to be
		modified by replacing the 'SectionIDX'-value. This option is followed by a number (1,2,3), which
		is compared to the 'StaticdetailLevel'-property of the track-definition and selects if an object
		should be modified and get a new, special 'SectionIDX'-value. Then, and ONLY then, modification of the
		current filename of the object is also possible. In this case, the filename of the object is checked,
		if it matches the specification of the string specified as "s1" (comparison is NOT case-sensitive).  If
		'-h' is used, the filename must start with the "s1"-string to match this specification.  If '-H' is
		specified, "s1" contains a 'regular expression' (refer to Annex B), which must match the complete filename.
		If this condition is fullfilled, second string "s2" is used to create the new filename of the track-objects.
		If '-h' is active, the "s1"-part of the filename is then replaced with "s2" to build the new filename. If
		option '-H' is used, the new filename is completely build from "s2". However, backward-references to the
		original filename are resolved(capture-groups).
		If NO optinal modification of the filename is required, '-f' and '-F' are identical.
		Option '-f'/'-F' (or '-h'/'-H') may be specified up to 3 times using different 'StaticDetailLevel's. If
		'-f'/'-F' is used, '-n'/'-N' cannot be used, too.
		The filename of a converted object may be optionally extented with an accesspath. "p2" specifies the
		number(0..9) of such a path, which is defined using GLOBAL option '-p'. If specified, accesspath "p2"
		is added to the filename if (and ONLY if) a modification of the filename occurs.

		Example: '-h2:151:0:A:Xt' - All trackobjects, which are defined with a 'StaticDetailLevel'
			of 2, are modified and the 'SectionIDX'-value is changed to shape 151, which must refer to a
			road-definition. Additionally, if the filename starts with 'A', this 'A' is replaced with
			'Xt'. (A1t10mstrt.s -> Xt1t10mstrt.s) Then, the accesspath 0 = "../../Routes/<route>/Shapes/"
			is also added to the filename.
			(resulting filename of object = '../../Routes/<route>/Shapes/Xt1t10mstrt.s')
		Attention: If modification of filename is active, the original filename is added to
			the world-object using keyword 'TreeTexture'. This keyword is ignored from TS
			within static objects and is only used to undo the modification.
			The original 'SectionIDX'-value is also added to the object-definition using keyword 'Config'.
			This keyword is also ignored from within a track-definition.
	Option '-k' enables the 'correction-mode' of world-files. If this mode is enabled,
		world-objects are checked using the following rules (additionally):
		+ A second specification of a definition-line does NOT invalidate the whole object.
			The second line is logged and ignored.
		+ A missing definition-line is added using default-values (if possible)
	Using option '-l'/'-L', the current 'StaticDetailLevel' of an object may be modified. Selection of the involved
		world-objects is controlled by a typemask 'm', a filemask "s" and a list of 'StaticDetaiLevel's "sll", which
		must be specified after this option.
		The typemask is formed like the X-mask, which is described in Annex A. The 'StaticDetaiLevel'-value of an object
		may be only modified, if its objecttype is selected within this mask. Secondly, the filename of the object must
		match the "s"-specification. If '-l' is used, the filename must start with the "s"-string to match. Otherwise,
		(if '-L' is used) "s" contains a 'regular expression' (refer to Annex B), which must match the complete filename
		in order to select the object. (comparison is NOT case-sensitive). However, if the current objecttype of an object
		do not support filenames (e.g. platform), this check is skipped. At last, the current 'StaticDetaiLevel' of the
		object must be included in the 'list of StaticDetaiLevels', which is specified as "sll. Such a list may contain
		single numbers ('<nr>'), range of numbers ('<nr>-<nr>') or an enumeration of numbers ('<nr>,<nr>'). All these
		items may be mixed ('<nr>,<nr>-<nr>') but each number, which represents a possible 'StaticDetailLevel' (0..9)
		can be used only once.
		If all selection-criteria of an object are matched, the current 'StaticDetailLevel' of the object is replaced
		with the value, which is given as "sl" and it is resorted within the appropriate world-file.
		Option '-l'/'-L' may be specified more than once.
	Option '-m'/'-M' may be used to modify the filenames of Track-/Road-objects. So, the appearance of a
		trackobject may change. Unlike option '-h'/'-f', Option '-m'/'-M' neither converts a track-object to
		a static object nor changes the 'SectionIDX'-value of the definition.
		If option '-m'/'-M' is used WITHOUT following values, ALL modifications of filenames are rolled
		back. Normally a modification is active and restored when a world-file is written.

		If option '-m'/'-M' is followed by a number, this number is compared to the 'StaticdetailLevel'-
		property of the track-definition and selects, if the filename should be modified. Value
		'0' and values between '3' and '9' (incl.) are valid here. However, modification of the
		filename only occurs, if it, additionally, matches the specifications of string specified
		as "s1". If '-m' is used, the filename must start with the "s1"-string to match this specification.
		In this case, this part of the filename is replaced with the second string ("s2"). If the second
		string ("s2") is NOT present an empty string is used instead. If '-M' is used, "s1" contains a
		'regular expression' (refer to Annex B), which must match the complete filename in order to modify it
		(comparison is NOT case-sensitive). Then, the filename is modified using the second string ("s2"),
		which must be present. During this modification, backward-references to the original filename are
		resolved(capture-group).
                Each '-m'/'-M'-Option is applid to every object using the sequence of specification. As soon as one
		application succeeds, the other '-m'/'-M'-Options are ignored. So, it is important to consider
		the sequence of specification; particularly if only part of the filename is used.

		The modified filename of an object may be optionally extented with an accesspath. "p2" specifies the
		number(0..9) of such a path, which is defined using GLOBAL option '-p'. If specified, accesspath "p2"
		is added to the filename if (and ONLY if) a modification of the filename occurs.
		Option '-m'/'-M' may be specified more than once, even if it uses the same 'StaticdetailLevel'.
		Attention: 'StaticdetailLevel' '3' is ONLY supported, if is not already used with option '-f' or '-h'.
		Attention: If 'StaticdetailLevel' matches, a potential previous modification is cleared
			before it is tried to modify the filename again. So, if NO "s1"-string matches TOO,
			a previous modification is lost.
		Example: '-m4::A:Xt' - (compare to option '-h'/'-f')
		Example: '-M5::A(.*)\.s:Xt$1_lft.s' - The filename of all trackobjects, which are defined with a
			'StaticDetailLevel' of 5, are modified. If the filename contains an 'A' which is later
			followed by '.s', modification takes place. 'A' is replaced with 'Xt' and '_lft' is inserted
			before '.s'. For this operation '$1' refers to the part of the filename, which is located
			between 'A' and '.s' (first capture-group which is marked with brackets within the
			'regular expression'). (A1t10mstrt.s -> Xt1t10mstrt_lft.s)
			Due to current 'regular expression', filename need not START with 'A' and END with '.s' in
			order to match. If this is required, the 'regular expression' must be '^A(.*)\.s$'.
		Attention: If modification of filename done, the original filename is added to the
			world-object using keyword 'TreeTexture'. This keyword is ignored from TS
			within track-objects and is only used to undo the modification.

	Using option '-o'/'-O', 'StaticFlags'-definitions may be modified. Selection of the involved world-objects is
		controlled by a typemask 'm1' and a filemask "s", which must be specified after this option.
		The typemask is formed like the X-mask, which is described in Annex A. The 'StaticFlags'-definition of a
		object may be only modified, if its objecttype is selected within this mask. Additionally, the filename of
		the object must match the "s"-specification. If '-o' is used, the filename must start with the "s"-string
		to match. Otherwise, (if '-O' is used) "s" contains a 'regular expression' (refer to Annex B), which must
		match the complete filename in order to select the object. (comparison is NOT case-sensitive). However, if
		the current objecttype of an object do not support filenames (e.g. platform), this check is skipped.
		If all selection-criteria of an object are matched, and the 'StaticFlags' are explicitely defined, these
		flags are modified. First, they are logically OR'ed with the mask "m2", which must be specified within this
		option, too. If mask "m3" is also provided, the result of this operation is logically AND'ed with mask "m3".
		The result of this operation becomes the new value of the 'StaticFlags'-field of the object.
		Attention: Mask "m2" and "m3" can contain any contend and are NOT checked.
  	If option '-r' is specified, renumbering of UID-Numbers in each world-file is activated.
		If this is not possible to individual files, because of errors, renumbering of this
		file is suppressed and a message is logged.
	If option '-s' is specified, it is aditionally checked, if all shape-files, which are 
		referenced from NEW global 'tsection.dat', are present.
        Non-ambigous assignment between definitions from OLD and NEW 'tsection.dat' may not be
		possible. Using option '-v' someone can do this manually. 'no1' defines a
		shape-number of OLD 'tsection.dat' and 'no2' defines the number of the assigned
		shape-definition in NEW 'tsection.dat'. This assignment is only active, if no
		other (e.g. automatic) assignment was possible. Option '-v' can be specified
		more than once.
		Remark: If conversion takes place from 'original'(old) to 'XTrack'(new), '-v99:99' should be specified.
	The option '-w' initiates generation of missing world-files. A new empty 'dummy-world-file' is added to
		all Quad-Definitions of Tiles, which do NOT already contain a valid world-file.
	Option '-z' is used to change STATIC OBJECTS, which ARE static representations of a 'TrackObj'-Entry
		but cannot be identified as such an object, to a new 'TrackObj'-definition (compare to '-h-Option').
		The following number(1,2,3) specifies the 'StaticDetailLevel', which will be applied to the
		created object. This is independent from the current Level. 
		In order to deceide, if an object has to be converted, the filename of the static object is 
		compared to ALL shape-names, which are defined in the current global 'tsection.dat'.
		If it matches, the static object is converted to the corresponding 'TrackObj' and all missing
		definition-lines are added.
		If specified within the option (value "s1"), the filename of the static object is modified BEFORE
		'tsection.dat' is searched. If "s1" is present, the filename is checked, if it starts with this string
		(no respect to case of letters) and if so, this part of the filename is replaced with the second
		string. If the second string ("s2") is NOT present an empty string is used instead.
		Before the filename is checked, if it should be modified, this filename is also compared to ALL
		accesspath-definitions (GLOBAL option '-p'). If the filename starts with such an accesspath, it is
		removed first.

		Option '-z' may be specified more than once.
		Example: '-z1:Xt:A' - Filenames of ALL static objects are checked (after an optional accesspath
			is removed), if they start with 'Xt'. If NOT, this option is not applied and the static object
			may remain unchanged (depending on other options). If it matches, filename is (locally) changed
			and 'Xt' is replaced by 'A'. Then, current global 'tsection.dat' is searched, if a corresponding
			shape-definition exists. If such a definition is found, the static object is converted to the
			'TrackObj'-definition and gets a 'StaticDetailLevel' of 1. (Xt1t10mstrt.s -> At1t10mstrt.s)
		Attention: If modification of filename is active and the static object is converted, the original
			filename is also stored, so that it can be used if this object is recoverted to a
			'Hidewire'-object (option '-H'/'-F' NOT present).
	Concerning the global options, compare to 'Introduction'

  e.g. ProTrain 1: "java TSUtil -lC:\Logdat.log cvrt -bC:\tsection.dat C:\TRSim\routes\ProTrain_Rheintal"

  Action(s) to use the results of the function:
	- Delete the directory 'world' of the route and replace it with the 'world'-directory
		from 'newRoute'.
	- Delete the directory 'paths' of the route and replace it with the 'paths'-directory
		from 'newRoute'.
	- Delete the directory 'services' of the route and replace it with the 'services'-directory
		from 'newRoute'.
	- Delete the directory 'traffic' of the route and replace it with the 'traffic'-directory
		from 'newRoute'.
	- Delete the directory 'activities' of the route and replace it with the 'activities'-directory
		from 'newRoute'.
	- Move all files from the 'newRoute'-directory to the route-directory and replace them.
		Hint: This function creates a new version of the '*.trk'-file of the route. However, sometimes
			this new version is not needed and so the file needs not to be copied.

6) Change shape-/section-references in track-Database "*.tdb"/"*.rdb"
  *** FUNCTION SHOULD NOT BE USED ANY LONGER ***
  With this function it is possible to adapt the Track Database to a change of the global file
  "tsection.dat". This function is meaningful if the rebuild of the Track Database
  (in accordance with 'Advanced option ') does not succeed. An adjustment of further files is
  not made.
  This function analyzes the specified Track Database, modifies all references on Shapes and sections
  due to the indicated new benchmark figures and provides a copy with the ending "tbd$"/"rdb$" in
  the original directory.  

  The call of this function looks as follows:
	C>java TSUtil chgdb <file> [<shn> <scn> [<sha> <sca>]]
  with:
	"file" is the file name (with path) of the Track Database (tdb/rdb)
        "sha" is the up-to-date used benchmark figure for Shapes (Default=263)
        "sca" is the up-to-date used benchmark figure for sections (Default=376)
        "shn" is that benchmark figure for shapes (Default=40000), which can be used again,
        "scn" is that benchmark figure for sections (Default=40000), which can be used again,

  e.g. ProTrain 1: "java TSUtil chgdb
	C:\TRSim\routes\ProTrain_Rheintal\ProTrain_Rheintal.tdb 40000 40000"

  NOTE: This function works -contrary to 5) - on pure sentence basis. With this fact, it is
	possible that, depending upon indication of the values "sha", "sca", "shn" and "scn",
	the maximum record length of the Track Database increases (e.g. Section number with
	six digits instead of one with 3 digits).  
        Since the maximally USABLE record length of the Track Database is not known, this is
	a reason for a possible error.

  Action(s) to use the results of the function:
	- Delete file *.tdb and rename file *.tdb$ to *.tdb. OR
	- Delete file *.rdb and rename file *.rdb$ to *.rdb.

7) Compare file-dates and copy if newer
  A call of the function "dcpy" compares the file/directory structure based on directory 1
  file for file with the structure based on directory 2. Each file/directory from the
  structure 1, which is not present in the structure 2 or has a newer date, is copied to
  the appropriate place of the structure based on directory 3. Intermediate directories,
  which are missing, are provided automatically.  

  The call of this function looks as follows:
	C>java TSUtil [{-e|-w}] [-k] [-l[<logfle>]] [-m<id>] [-p<p>:<path>] [-q<n>:<fref>] dcpy
		[-a] [-o] <dir1> <dir2> <dir3>
  with:
	"dir1" is the file path on the original route
	"dir2" is the file path on the route to be compared to
	"dir3" is the file path on the target-route
	If the option '-a' is specified, also the files with ending "bk" are considered.
		In the other case these files are checked nor copied neither.
	Option '-o' is used to restrict copy of files. If this option is active each file of
		structure 1 is ONLY copied to structure 3 if it is both present in structure 2 AND
		contains a newer date.
	Concerning the global options, compare to 'Introduction'

  e.g. ProTrain 1: "java TSUtil -lC:\Logdat.log dcpy C:\TRSim\routes\ProTrain_Rheintal
			C:\TRSimV\routes\ProTrain_Rheintal C:\TRSimN\routes\ProTrain_Rheintal"

  Action(s) to use the results of the function:
	- The directory-tree, which starts at directory <dir3> contains the copied files.

8) Shift/renumber block of global Shape/Section-definitions within 'tsection.dat'
  The function "SHIFT" shifts ShapeId and/or Section-ID ranges in the indicated GLOBAL "tsection.dat"
  and provides a copy under a new name, which is formed by appending '$' to the old name.  
  
  Only the Id's and the references on this Id's are changed as the shift value is added. A new assortment
  of the entries does not take place. In order NOT to shift a range (Shapes OR Sections), '0' has to be
  specified as the shift value. The values of the borders are irrelevant in this case, however, they must
  be entered correctly.
  The shift value can be both positive and negative.  The ranges - and both source and target area concerns
  - must lie within the defined borders (0, maxShape/maxSection).

  The call of this function looks as follows:
	C>java TSUtil [{-e|-w}] [-k] [-l[<logfle>]] [-m<id>] [-p<p>:<path>] [-q<n>:<fref>] shift
		<file> <shl> <shh> <shd> <scl> <sch> <scd>
  with:
	"file" is the file name (with path) of the global "tsection.dat" file
	"shl" is the lower limit of the ShapeId range (inclusive)
	"shh"is the upper border of the ShapeId range (exclusive)
	"shd" is the shift value for the ShapeId's
	"scl" is the lower limit of the SectionId range (inclusive)
	"sch" is the upper border of the SectionId range (exclusive)
	"scd" is the shift value for the SectionId's
	Concerning the global options, compare to 'Introduction'

  z.B.: "java TSUtil -lC:\Logdat.log shift C:\TRSim\Routes\tsection.dat 0 400 2000 0 400 2000"
  	Here the definitions between 0 and 400 are shifted to the place 2000. 

  RESTRICTION:  This function may not run correctly when the words "TrackSections", "TrackShapes",
	"TrackSection" und "TrackShape" occur within a COMMENT.  Such a comment must be removed from
	the global "tsection.dat" before using this option.  After the shift it can be added again.

  Action(s) to use the results of the function:
	- Sort all entries of the resulting file due to the section- or shape-indices. The you can use
		this file as new 'tsection.dat' (global). Perhaps you must adjust the defined routes to
		this file with the 'cvrt'-function. 

9) Verification and Correction of the Geometrie-Definition of a Route
  Function 'filter' checkes every marked tile-definition for completeness. If it does NOT contain
  tile-data (.t-file), it is unmarked as 'populated'. If option '-w' is additionaly specified, the tile
  is also unmarked, if a connected world-definition is not present.
  Both Tile- and LO_Tile-Definions are checked.

  The call of this function looks as follows:
	C>java TSUtil [{-e|-w}] [-k] [-l[<logfle>]] [-m<id>] [-p<p>:<path>] [-q<n>:<fref>] filter
		[-c] [-w] <dir>
  with:
	"dir" contains (fully defined) path to route-definition, where the world-files are located.
	Option '-c' implies option  '-w' and causes that, if a tile-definition is unmarked due to a
		missing world-file, the corresponding tile-definition (*.t,*_y.raw) is additionally
		deleted. The buffer-files are deleted in this case, too.
	Option '-w' involves world-files into the verification. A marked tile-definition, which
		do not contain a connected world-file is unmarked as 'populated'.
	Concerning the global options, compare to 'Introduction'

  e.g. ProTrain 1: "java TSUtil -lC:\Logdat.log filter C:\TRSim\routes\ProTrain_Rheintal"

  Action(s) to use the results of the function:
	- Delete the directory 'TD' of the route and replace it with the 'TD'-directory	from 'newRoute'.

10) Compress world-files using the "Comp"-program of Martyn Griffin
  *** FUNCTION SHOULD NOT BE USED ANY LONGER ***
  The function "cmpw" is used to convert world-files to compressed format (CB-Type). Unlike to the
  other compress-functions(2)(3), this function uses the 'Comp'-Program of Martyn Griffin to process
  the files. This program is available in the Internet (e.g. 'train-sim.com') and is called 'recmp119'. 
  The 'Comp'-program does NOT contain errors like 'ffeditc_unicode', so that world-files are
  error-free converted to the CB-Format.
  In order to be able to activate this program by TSUtil, it MUST be installed to folder 'utils/comp'
  of the TS-Instance.

  World-files, which are available in UB-form are converted to UT-Form using 'ffeditc_unicode' before
  calling the 'Comp'-Program. Already compressed files (CB-Form, CT-Form) are NOT changed.

  The call of this function looks as follows:
	C>java TSUtil [{-e|-w}] [-k] [-l[<logfle>]] [-m<id>] [-p<p>:<path>] [-q<n>:<fref>] cmpw <dir>
  with:
	"dir" contains (fully defined) path to route-definition, where the world-files are located.
	Concerning the global options, compare to 'Introduction'

  e.g. ProTrain 1: "java TSUtil -lC:\Logdat.log cmpw C:\TRSim\routes\ProTrain_Rheintal"

  Action(s) to use the results of the function:
	- All files in the 'newRoute/world'-directory should be copied to the directory 'world'
		of the route.

11) Convert ALL route-definitions of a TS-Instance according to 'cvrt'
  By the function "tsconv" ALL route definitions of an TS instance are adapted to a new global
  "tsection.dat" definition. The individual route definitions are overwritten with the changes.
  Thereby for each Route-Definition of the TS instance the action "Converting the Route-definition
  with the function 'cvrt'" is released.  
  
  The original "tsection.dat", by which outgoing ALL Routes are to be adapted to the new version,
  must be copied to the directory "Routes" of the TS instance. If a Route-Definition, which can
  be modified uses another "tsection.dat", alternatively for this Route-Definition the applicable
  "tsection.dat" can be copied under the name "$tsection.dat" to the private Route-Directory.  
  This is then preferred to the general definition (in ' Routes ')

  The call of this function looks as follows:
	C>java TSUtil [{-e|-w}] [-k] [-l[<logfle>]] [-m<id>] [-p<p>:<path>] [-q<n>:<fref>] tsconv
		[-s] [-u] [-v<nr1>:<nr2>] <dir>
  with:
	"dir" is the file path on the TS instance
	If option '-s' is specified, it is aditionally checked, if all shape-files, which are 
		referenced from NEW global 'tsection.dat', are present.
	If Option '-u' is used, the world files are always written in the 'UT'-format. Normally,
		world-files are written in the same format as they were read.
        Non-ambigous assignment between definitions from OLD and NEW 'tsection.dat' may not be
		possible. Using option '-v' someone can do this manually. 'no1' defines a
		shape-number of OLD 'tsection.dat' and 'no2' defines the number of the assigned
		shape-definition in NEW 'tsection.dat'. This assignment is only active, if no
		other (e.g. automatic) assignment was possible. Option '-v' can be specified
		more than once.
	Concerning the global options, compare to 'Introduction'

  e.g. : "java TSUtil -lC:\Logdat.log tsconv C:\TRSim\"

  Action(s) to use the results of the function:
	There are NO actions needed. Files are replaced directly by the 'tsconv'-function.

12) Integrity-check of a route-definition
  With the Function("ichk") the internal integrity of a Route-Definition is checked. It is checked,
  whether the global and local 'tsection.dat' - file are syntactically correct and whether the
  references between track-/road-database and world-files are correct.  
  
  It is also checked if duplicate UiD identifications are used and whether it is possible to change these,
  if necessary. However, NO changes in the Route definition are made!  
  
  The call of this function looks as follows:
	C>java TSUtil [{-e|-w}] [-k] [-l[<logfle>]] [-m<id>] [-p<p>:<path>] [-q<n>:<fref>] ichk
		[-k] [{-s|-S}] [-z{1|2|3}[:<s1>:[<s2>]]] <dir>
  with:
	"dir" contains (fully defined) path to route-definition
	If option '-s' is specified, it is checked, if all shape-files, which are referenced from
		global 'tsection.dat', are present. If this option is specified as '-S', it is
		aditionally checked if all shape-definitions, which are referenced from a
		world-file, are present. All texture-files, which are used from within these
		shape-files have to exist, too. If not, a message is logged but no action is taken.
	Option '-k' switches the check-mode of world-files. If this option is enabled,
		object-definitions are checked using the same rules as if the 'correction-mode'
		(compare to function 'cvrt'(5)) is enabled.
	Option '-z' is used to change STATIC OBJECTS, which ARE static representations of a 'TrackObj'-Entry
		but cannot be identified as such an object, to a new 'TrackObj'-definition (compare to 'cvrt').
		The following number(1,2,3) specifies the 'StaticDetailLevel', which will be applied to the
		created object. This is independent from the current Level. 
		In order to deceide, if an object has to be converted, the filename of the static object is 
		compared to ALL shape-names, which are defined in the current global 'tsection.dat'.
		If it matches, the static object is converted to the corresponding 'TrackObj' and all missing
		definition-lines are added.
		If specified within the option (value "s1"), the filename of the static object is modified BEFORE
		'tsection.dat' is searched. If "s1" is present, the filename is checked, if it starts with this string
		(no respect to case of letters) and if so, this part of the filename is replaced with the second
		string. If the second string ("s2") is NOT present an empty string is used instead.
		Before the filename is checked, if it should be modified, this filename is also compared to ALL
		accesspath-definitions (GLOBAL option '-p'). If the filename starts with such an accesspath, it is
		removed first.

		Option '-z' may be specified more than once.
		Attention: All modification are made BEFORE the integrity of the object is checked.
		Example: '-z1:Xt:A' - Filenames of ALL static objects are checked (after an optional accesspath
			is removed), if they start with 'Xt'. If NOT, this option is not applied and the static object
			may remain unchanged (depending on other options). If it matches, filename is (locally) changed
			and 'Xt' is replaced by 'A'. Then, current global 'tsection.dat' is searched, if a corresponding
			shape-definition exists. If such a definition is found, the static object is converted to the
			'TrackObj'-definition and gets a 'StaticDetailLevel' of 1. (Xt1t10mstrt.s -> At1t10mstrt.s)
	Concerning the global options, compare to 'Introduction'

  e.g. ProTrain 1: "java TSUtil -lC:\Logdat.log ichk C:\TRSim\routes\ProTrain_Rheintal"

  Action(s) to use the results of the function:
	This funcion does NOT create any new file (except LOG).

13) Modify track-database "*.tdb"/"*.rdb" and delete gaps
  After manual delete of (defective) Track-Nodes from track-/road-database *.tdb/*.rdb, this function
  ('rendb') can repair references and dependencies within the databases. All Nodes are
  'shifted together' and references are updated. It is checked, if there are invalid references
  which cannot be reestablished. These references are logged and replaced by '0'.
  TrItem-Definitions are renumbered, too. All gaps are deleted. If specified, TrItem-Definitions,
  which are no longer referenced from world-files or Track-Nodes, are also deleted. All references
  are updated.

  Both databases are fully checked logically. But, if option '-o' is specified, world-files are not
  loaded and it is not possible to check dependencies to these files. So, in this case error-messages
  concerning these problems, can be ignored.
  This function ALSO newly create the *.tit and *.rit databases. This is only possible without
  errors, if these databases are manually changed in the same way as the corresponding
  *.tdb/*.rdb-files.

  ATTENTION: All changed files are created in the '\newroute'-directory. Before replacing the
	original files with these new files, it is recommended to check if there are NO unresolved
	references. Perhaps some definitions may deleted by mistake. Logfile can be used to do this.
 
  The call of this function looks as follows:
	C>java TSUtil [{-e|-w}] [-k] [-l[<logfle>]] [-m<id>] [-p<p>:<path>] [-q<n>:<fref>] rendb
		[-a] [{-c|-u}] [-o] [-r] [-w[ -m]] <dir>
  with:
	"dir" contains (fully defined) path to route-definition
	Option '-o' is used to ONLY reorganize the TrackDB-Area of the databases.
		In this case, NO modifications (neither changes nor deletions) must exist in the
		TrItem-Area of the databases.
	If LOCAL Option '-w' is specified, databases will be newly created in every case. This is
		also done, if logical check of database fails because of errors.
	If Option '-a' is specified, all Tritem-Definitions, which are NO LONGER REFERENCED,
		are deleted. So, these Items need not to be deleted explicitly from
		database-files (*.tdb,*.rdb,*.tit,*.rit). This option does not work, if '-o'
		is specified.
	If Option '-r' is used, all Tritem-Definitions, which are ONLY referenced by the database-files and
		not from within the world-files, are unreferenced. This option does not work, if '-o'
		is specified and only makes sense, if option '-a' is also specified.
	Option '-m' marks UID-entries in the database, which contain errors.
		If, due to option '-w', the new version of the database is still created, all values,
		which contain errors are copied unchanged. If option '-m' is specified, such
		UID-values are replaced by '?'. The option'-m' must be specified AFTER option '-w'.
	If option '-c' is used, all world files are written in the compressed format [CB].
		Normally, world-files are written in the same format as they were read. This option
		may be cleared with the '-u' -option. This option is ignored, if '-o' is active.
	If option '-u' is used, all world files are written in the expanded format[UT]. Normally,
		world-files are written in the same format as they were read. This option may be
		cleared with the '-c' -option. This option is ignored, if '-o' is active.
	Concerning the global options, compare to 'Introduction'

  e.g. ProTrain 1: "java TSUtil -lC:\Logdat.log rendb C:\TRSim\routes\ProTrain_Rheintal"

  Action(s) to use the results of the function:
	- Move all files from the 'newRoute'-directory to the route-directory and replace them.
	- if option '-o' is NOT specified:
	 + Delete the directory 'world' of the route and replace it with the 'world'-directory
		from 'newRoute'.
	 + If the 'paths'-directory within directory 'newRoute' is present, delete directory
		'paths' of the route and replace it with this directory.
	 + If the 'services'-directory within directory 'newRoute' is present, delete directory
		'services' of the route and replace it with this directory.
	 + If the 'traffic'-directory within directory 'newRoute' is present, delete directory
		'traffic' of the route and replace it with this directory.
	 + If the 'activities'-directory within directory 'newRoute' is present, delete directory
		'activities' of the route and replace it with this directory.


14) Shift complete route-definition to new longitude/lattitude
  This function ('move') shifts a Route-Definition a certain, definable number of Route squares in X
  and/or Z-direction.  All definitions (tile-files, world-files, TD definitions...) are adapted
  accordingly and again provided. The new files are written to the directory '/new route ', which
  is created in the Route-Definition.  
  To the exact proceeding also compare to the later fictous example.
  TSUtil computes the maximum edge-length of the used tiles. The number of squares, the route is to
  be moved, must be divisible through this number so that no overlapping will occur during move.

  During moveing a consolidation of the quad-tree-structure is made.  All tiles, which are not
  'populated', are summarized if possible.  Beside the files of the Route-Definition, also ALL files
  of the Activities are shifted and adapted, since they contain references on the Route definition, too.  
  
  NOTE: Only the Tiles are shifted, which are marked 'populated' in the route-geometry-extractor. All
	other tiles are not processed. This also concerns the assigned world- and tile- files. If
	necessary thereby a correction of the Route has to be done using route-geometry-extractor.

  The call of this function looks as follows:
	C>java TSUtil [{-e|-w}] [-k] [-l[<logfle>]] [-m<id>] [-p<p>:<path>] [-q<n>:<fref>] move
		[-c] [-p] <dir> <dx> <dz>
  with:
	"dir" contains (fully defined) path to route-definition
	"dx" is the number of Tiles, which the route is to be shifted in X-direction (East(+)/West(-)).
		The value must be a multiple of the greatest used Tile-edge-length.
	"dz" is the number of Tiles, which the route is to be shifted in Z-direction (North(+)/South(-)).
		The value must be a multiple of the greatest used Tile-edge-length.
	If the option '-c' is provided, the tile-files (*.t) are written using the 'reduced format' in
		any case. Normally, tile-files are rewritten in the same format as they are read.
	The option '-p' causes that beside the Tile-files (*.t) and the Tile-data-files (*_ y.raw,
		*_ f.raw) also the buffer files (*_e.raw, *_ n.raw) are copied under the appropriate
		change of name. Thus the TS does not have to build them again.  
	Concerning the global options, compare to 'Introduction'

  e.g. ProTrain 1: "java TSUtil -lC:\Logdat.log move C:\TRSim\routes\ProTrain_Rheintal -5120 -496"

  Action(s) to use the results of the function:
	- Delete the directory 'world' of the route and replace it with the 'world'-directory
		from 'newRoute'.
	- Delete the directory 'TD' of the route and replace it with the 'TD'-directory from 'newRoute'.
	- Delete the directory 'tiles' of the route and replace it with the 'tiles'-directory
		from 'newRoute'.
	- Delete the directory 'LO_tiles' of the route and replace it with the 'LO_tiles'-directory
		from 'newRoute'.
	- If the 'paths'-directory within directory 'newRoute' is present, delete directory
		'paths' of the route and replace it with this directory.
	- If the 'services'-directory within directory 'newRoute' is present, delete directory
		'services' of the route and replace it with this directory.
	- If the 'traffic'-directory within directory 'newRoute' is present, delete directory
		'traffic' of the route and replace it with this directory.
	- If the 'activities'-directory within directory 'newRoute' is present, delete directory
		'activities' of the route and replace it with this directory.
	- Move all files from the 'newRoute'-directory to the route-directory and replace them.

15) Check a global 'tsection.dat'-File to be used as upgrade for an OLD one
  Function 'chkup' can check the compatibility between two versions of an global 'tsection.dat'-file.
  An NEW version is compatible to a OLD one, if all track- and road-definitions of the OLD file are
  also defined in the NEW version. 'defined' does not mean that they are exactly the same. Even
  ID-values can have changed. 'defined' only says, that TSUtil can establish a connection between
  old and new definition.
  The OLD version of 'section.dat' is given during call of this function, while the new version
  must exits as 'tsection.dat' in the SAME directory as the old one. So, someone can initiate
  a simple syntax-check of a 'tsection.dat'-file by specifying the new version as the old one.  

  This function also recognizes changes like replacement of Shape-Definitions and adjusts all
  references automatically. But, in order to establish a non-ambigous assignment between 'old'
  and 'new' Shape-/Section-definitions, it is recommended that the sequence of Sub-Options
  (e.g. SectionIdx) WITHIN a definition do NOT change. If this is NOT possible (e.g. because
  of error-correction) an assignment can be established manually with the '-v' - option.

  This 'chkup'-function does NOT do any corrections.

  Note: This function is part of the route-conversion according to function 'cvrt'. So, it is a
	sort of pre-stage for route-conversion in order to check 'tsection-dat'-file.

  The call of this function looks as follows:
	C>java TSUtil [{-e|-w}] [-k] [-l[<logfle>]] [-m<id>] [-p<p>:<path>] [-q<n>:<fref>] chkup
		[-v<nr1>:<nr2>] <file>
  with:
	"file" is the file-name (fully defined) of an OLD Version of a "tsection.dat"-file
        Non-ambigous assignment between definitions from OLD and NEW 'tsection.dat' may not be
		possible. Using option '-v' someone can do this manually. 'no1' defines a
		shape-number of OLD 'tsection.dat' and 'no2' defines the number of the assigned
		shape-definition in NEW 'tsection.dat'. This assignment is only active, if no
		other (e.g. automatic) assignment was possible. Option '-v' can be specified
		more than once.
	Concerning the global options, compare to 'Introduction'

  e.g. '$tsection.dat': "java TSUtil -lC:\Logdat.log chkup -v99:99 C:\TRSim\global\$tsection.dat"

  Action(s) to use the results of the function:
	This funcion does NOT create any new file (except LOG).

16) Change global Height-Definition of a Route
  Function 'adjh' can RAISE or LOWER a WHOLE route-definition, by changing height-values of the
  route-definition. A fix, specified value, which can be negative, is added to ALL height-values
  of the route. This concerns object-definitions in world-files as well as tile-definitions.
 
  All files (*.t,*.w,...) are rewritten in the same format, as they were read. Where required,
  the tile-files can be converted to the 'reduced format' by specifying the '-c' option.
  Remark: *.t-files are NOT compressed (UB-format)

  The call of this function looks as follows:
	C>java TSUtil [{-e|-w}] [-k] [-l[<logfle>]] [-m<id>] [-p<p>:<path>] [-q<n>:<fref>] adjh
		[-c] <dir> <dh>
  with:
	"dir" contains (fully defined) path to route-definition
	"dh" is the difference value(float), which is to be added to all height-values
	If the option '-c' is provided, the tile-files (*.t) are written using the 'reduced format' in
		any case. Normally, tile-files are rewritten in the same format as they were read.
	Concerning the global options, compare to 'Introduction'

  e.g. ProTrain 1: "java TSUtil -lC:\Logdat.log adjh C:\TRSim\routes\ProTrain_Rheintal 15.5"

  Action(s) to use the results of the function:
	- Delete the directory 'world' of the route and replace it with the 'world'-directory
		from 'newRoute'.
	- Delete the directory 'tiles' of the route and replace it with the 'tiles'-directory
		from 'newRoute'.
	- Delete the directory 'LO_tiles' of the route and replace it with the 'LO_tiles'-directory
		from 'newRoute'.
	- If the 'paths'-directory within directory 'newRoute' is present, delete directory
		'paths' of the route and replace it with this directory.
	- Move all files from the 'newRoute'-directory to the route-directory and replace them.

17) Reduce/Compress files (S,T,W) to binary format
  Using function 'cmp', someone can reduce and/or compress all sorts of files (S,T,W).

  This function copies ALL .s/.t/.w-files in the appropriate directory to 'newroute' and changes file-format
  from 'uncompressed text' (UT) to 'uncompressed binary' (UB). Using option '-c', the new file will
  compress to 'compressed binary'-format (CB) with the ZLib-algorithm.
  Tile-Files cannot be compressed. They only use the tokenized UB-format.

  'cmp'-function CANNOT handle input-formats other than 'UT'-format.
  You only can process one type of file with one call to the 'cmp'-function.

  The call of this function looks as follows:
	C>java TSUtil [{-e|-w}] [-k] [-l[<logfle>]] [-m<id>] [-p<p>:<path>] [-q<n>:<fref>] cmp
		[-c] {-s|-t|-T|-w} [-x] <dir>
  with:
	"dir" contains (fully defined) path to route-definition
	Option '-s' selects the Shape-files from 'Shapes'-directory. All *.s-files of this 
		directory are reduced and/or compressed and copied to directory 'newRoute/Shapes'.
	Option '-t' selects the Tile-files from 'Tiles'-directory. All *.t-files of this 
		directory are reduced and copied to directory 'newRoute/Tiles'.
		Option '-c' cannot be specified in this case.
	Option '-T' selects the LO_Tile-files from 'LO_Tiles'-directory. All *.t-files of this 
		directory are reduced and copied to directory 'newRoute/LO_Tiles'.
		Option '-c' cannot be specified in this case.
	Option '-w' selects the World-files from 'World'-directory. All *.w-files of this 
		directory are reduced and/or compressed and copied to directory 'newRoute/World'.
	If option '-c' is specified, source files are not only reduced to tokenized format ('UB')
		but also compressed to 'compressed binary'-format (CB). No additional tool is needed.
	If option '-x' is specified a FULL copy of the source-directory is made. ALL files, which
		are not processed (due to file-type), are simply copied to the target-directory.
		Attention: Sub-directories are NEITHER processed NOR copied.
	Concerning the global options, compare to 'Introduction'

  e.g. ProTrain 1: "java TSUtil -lC:\Logdat.log cmp -w -c C:\TRSim\routes\ProTrain_Rheintal"

  Action(s) to use the results of the function:
	- if option '-x' is specified: Delete the appropriate directory of the route and replace it
		with the directory from 'newRoute'.
	- Else: All files in the appropriate 'newRoute'-directory should be copied to the directory
		of the route.

18) Uncompress/expand files (S,T,W)
  Using function 'unc', someone can decompress and/or expand all sorts of files (S,T,W).

  This function copies ALL .s/.t/.w-files in the appropriate directory to 'newroute' and changes file-format
  to 'uncompressed text' (UT). The current file-format of each file is automaticly detected and the
  appropriate actions are taken. e.g.: If the file already uses UT-format, the file is only copied to
  the destination directory. 

  You only can process one type of file with one call to the 'cmp'-function.

  The call of this function looks as follows:
	C>java TSUtil [{-e|-w}] [-k] [-l[<logfle>]] [-m<id>] [-p<p>:<path>] [-q<n>:<fref>] unc
		{-s|-t|-T|-w} [-x] <dir>
  with:
	"dir" contains (fully defined) path to route-definition
	Option '-s' selects the Shape-files from 'Shapes'-directory. All *.s-files of this 
		directory are decompressed and/or expanded and copied to directory 'newRoute/Shapes'.
	Option '-t' selects the Tile-files from 'Tiles'-directory. All *.t-files of this 
		directory are expanded and copied to directory 'newRoute/Tiles'.
	Option '-T' selects the LO_Tile-files from 'LO_Tiles'-directory. All *.t-files of this 
		directory are expanded and copied to directory 'newRoute/LO_Tiles'.
	Option '-w' selects the World-files from 'World'-directory. All *.w-files of this 
		directory are decompressed and/or expanded and copied to directory 'newRoute/World'.
	If option '-x' is specified a FULL copy of the source-directory is made. ALL files, which
		are not processed (due to file-type), are simply copied to the target-directory.
		Attention: Sub-directories are NEITHER processed NOR copied.
	Concerning the global options, compare to 'Introduction'

  e.g. ProTrain 1: "java TSUtil -lC:\Logdat.log unc -w C:\TRSim\routes\ProTrain_Rheintal"

  Action(s) to use the results of the function:
	- if option '-x' is specified: Delete the appropriate directory of the route and replace it
		with the directory from 'newRoute'.
	- Else: All files in the appropriate 'newRoute'-directory should be copied to the directory
		of the route.

19) Merge a route-definition into another route
  This function ('merge') creates a common route from two Route-Definitions. It merges another route into
  a basis-route. In order to get no errors, the following conditions/considerations have to be met:

	- Both routes must not contain a common tile-definition.
		If a common tile-definition still exists, it is ignored from merge-route and not used.
		This may lead to inconsistencies of the databases (*.tdb,*.rdb,...) and will raise
		appropriate error-messages.
		This concerns to LO-Tile-Definitions, too.
	- The basis-value for dynamic tracks has to be the same and must correspond to the current
	   global 'tsection.dat'-file.

  While merging, Shape-, Texture-, Terrtex- and Sound(sms/wav)-files, which are necessary for the common route
  and which are not defined in the basis-route, are copied. This is a critical process, because the basic-route
  may contain other shapes/textures with the same name. These files are NOT copied to the 'newroute'-directory.
  Signal-definitions are also merged. However, if a signal-name already exists in the target-route, the
  definition is NOT transfered. So, there may be problems in signalling, if this occurs.

  Note: The created route-definition should be checked using the TSUtil-'ichk' function. So, possible
		problems with the new route may be detected.

  The call of this function looks as follows:
	C>java TSUtil [{-e|-w}] [-k] [-l[<logfle>]] [-m<id>] [-p<p>:<path>] [-q<n>:<fref>] merge
		[-h{1|2|3}] [-p] [-s] <dir1> <dir2>
  with:
	"dir1" contains (fully defined) path to route-definition (basis)
	"dir2" contains (fully defined) path to route-definition which should be merged
	The option '-p' causes that, beside the Tile-files (*.t) and the Tile-data-files (*_y.raw,
		*_f.raw), the buffer files (*_e.raw, *_n.raw) are copied/processed, too. So, the
		TS does	not have to build them again.
		The buffer-files of the 'LO_Tile'_definitions are copied in any case, even if this
		option is not specified. (TS-Bug)
	Option '-h' is used to modify 'StaticDetailLevel' of the merged trackobjects. So, these objects
		('TrackObj','DynTrack') can be handled by 'TSUtil-cvrt' or 'Hidewire' seperate from the
		other trackobjects.
		If this option is active, 'StaticDetailLevel' of the merged trackobjects, whose original
		'StaticDetailLevel' equals '0', is set to the specified value.
		(The sequence of world-objects within a world-file is adjusted, too.)
	Using option '-s', merge of the signaldefinitions is suppressed. If this option is specified, the
		signaldefinitions of the basis-route remain unchanged. This may be reasonable, if both routes
		already use the same signaldefinitions.
	Concerning the global options, compare to 'Introduction'

  e.g. ProTrain 1: "java TSUtil -lC:\Logdat.log merge C:\TRSim\routes\ProTrain_Rheintal C:\TRSim\routes\XXX"

  Action(s) to use the results of the function:
	- Delete the directory 'world' of the route and replace it with the 'world'-directory
		from 'newRoute'.
	- Delete the directory 'TD' of the route and replace it with the 'TD'-directory from 'newRoute'.
	- Delete the directory 'tiles' of the route and replace it with the 'tiles'-directory
		from 'newRoute'.
	- Delete the directory 'LO_tiles' of the route and replace it with the 'LO_tiles'-directory
		from 'newRoute'.
	- If the 'paths'-directory within directory 'newRoute' is present, delete directory
		'paths' of the route and replace it with this directory.
	- All files in the 'newRoute/shapes'-directory should be copied to the directory 'Shapes'
		of the route.
	- All files in the 'newRoute/textures'-directory should be copied to the directory 'Textures'
		of the route. (incl. sub-directories)
	- All files in the 'newRoute/terrtex'-directory should be copied to the directory 'Terrtex'
		of the route. (incl. sub-directories)
	- All files in the 'newRoute/sound'-directory should be copied to the directory 'Sound'
		of the route.
	- Move all files from the 'newRoute'-directory to the route-directory and replace them.


20) Reorganization of databases (track/road) and resources
  Function ('clrdb') analyzes track- and road-database and deletes all definition-chains (TrEndNode -
  TrVectorNode/TrJunctionNode - TrEndNode), which are no longer used. A definition-chain of nodes is
  no more used, if there are NO valid references from world- or sound-objects to this chain. This
  situation may exist, if world-objects or total world-files have been deleted.

  Additionally, ALL TrItem-Definitions, which are no longer used by the objects and by the node-part
  of the databases are deleted, too.
  All world- and sound-files, which are still used, are copied to the target-directory in the
  'newRoute'-tree. So, it is easily possible to delete the other, unused files.

  All Activity-, Path-, Service- and Traffic-files are checked, if they contain an invalid reference.
  If they are still valid, they are copied to the appropriate target-folder. The dependings between
  the single parts of activity-files are also checked. So, an activity-act is only valid (and copied),
  if all components, on which it depends (path, service,...) are valid, too.

  The call of this function looks as follows:
	C>java TSUtil [{-e|-w}] [-k] [-l[<logfle>]] [-m<id>] [-p<p>:<path>] [-q<n>:<fref>] clrdb
		[-t[ -p]] [-w] [-s] <dir>
  with:
	"dir" contains (fully defined) path to route-definition
	The specification of option '-t' causes the copy of all Tile- (*.t) and Tile-data-files (*_y.raw,
		*_f.raw), which are still populated, to the appropriate target-directory ('newRoute/Tiles',
		'newRoute/LO_Tiles'). This enables the consolidation of Tile-definitions, by simply replacing
		directories.
	The option '-p' causes that, beside the Tile-files and the Tile-data-files, the buffer files
		(*_e.raw, *_n.raw) are copied, too. So, the TS does not have to build them again. This option
		does nothing, if '-t' is NOT specified.
	If option '-s' is specified all 'shape'-files of the route, which are located within the shape-folder
		and which are still used/referenced, are copied to the 'shape'-subdirectory of 'newRoute'.
		This also applies to the descriptionfiles '*.sd'. Additionally, ALL still referenced
		texture-files are also copied to the 'newRoute'-directory.
		(newRoute/Textures;newRoute/Textures/Night;...)
	The option '-w' initiates generation of missing world-files. A new empty 'dummy-world-file' is added to
		all Quad-Definitions of Tiles, which do NOT already contain a valid world-file.
	Concerning the global options, compare to 'Introduction'

  e.g. ProTrain 1: "java TSUtil -lC:\Logdat.log clrdb C:\TRSim\routes\ProTrain_Rheintal"

  Action(s) to use the results of the function:
	- Delete the directory 'world' of the route and replace it with the 'world'-directory
		from 'newRoute'.
	- If the 'paths'-directory within directory 'newRoute' is present, delete directory
		'paths' of the route and replace it with this directory.
	- If the 'services'-directory within directory 'newRoute' is present, delete directory
		'services' of the route and replace it with this directory.
	- If the 'traffic'-directory within directory 'newRoute' is present, delete directory
		'traffic' of the route and replace it with this directory.
	- If the 'activities'-directory within directory 'newRoute' is present, delete directory
		'activities' of the route and replace it with this directory.
	- Move all files from the 'newRoute'-directory to the route-directory and replace them.
		Hint: This function creates a new version of the '*.trk'-file of the route. However, sometimes
			this new version is not needed and so the file needs not to be copied.
	- if option '-t' is specified: Delete the directory 'tiles' of the route and replace it with
		the 'tiles'-directory from 'newRoute'.
	- if option '-t' is specified: Delete the directory 'LO_tiles' of the route and replace it with
		the 'LO_tiles'-directory from 'newRoute'.
	- if option '-s' is specified: Delete the directory 'Shapes' of the route and replace it with
		the 'Shapes'-directory from 'newRoute'.
	- if option '-s' is specified: Delete the directorytree 'Textures' of the route and replace it with
		the 'Textures'-directorytree (directory + all subdirectories) from 'newRoute'.

21) Prepare a route-defintion for import into ZUSI-Trainsimulator.
  Using function 'zusi', route-data may be provided in a special form. Internal data of the route is written
  to files using standarized xml-format. In order to get correct files, route-definition should not contain
  errors. So, log-file should be checked, before using the provided data.

  The call of this function looks as follows:
	C>java TSUtil [{-e|-w}] [-k] [-l[<logfle>]] [-m<id>] [-p<p>:<path>] [-q<n>:<fref>] zusi <dir>
  with:
	"dir" contains (fully defined) path to route-definition
	Concerning the global options, compare to 'Introduction'

  e.g. ProTrain 1: "java TSUtil -lC:\Logdat.log zusi C:\TRSim\routes\ProTrain_Rheintal"

  Action(s) to use the results of the function:
	- Files out of directory 'newRoute' may be used for german simulator 'ZuSi'.

22) Shift dynamic definitions of local 'tsection.dat' to current position
  Function 'shftdyn' is used to shift the range of dynamic track-definitions to the correct position.
  This position is clearly defined by the current global 'tsection.dat'. This function modifies the
  'populated' world-files as well as the track- and road-database. The result is stored in a new directory
  which is named '\newroute'. The structure of subdirectories is retained and copied. A new local
  'tsection.dat'-file is also build and stored in this directory. So, it is no longer necessary to do
  a TDB-rebuild.

  The position of this range of dynamic definitions is given by the arguments 'sha' (shapes) and
  'sca' (sections). If these values are ommitted a default-value is assumed. However, the actual values
  must equal the start-indices, which can be found in local 'tsection.dat'. The length of this range is
  also given by this file. This range can - in contrast to function 'cvrt' - overlap with the current global
  'tsection.dat'.

  In order to assign all specified arguments correctly, an exact sequence of values is needed. So, it may
  be necessary to specify a placeholder '+', if the real value is ommitted.

  ATTENTION: Even if '-w'-Option is active, not ALL missing 'Dyntrack'-objects may be created. There may be a lack
		of informations in the trackdatabase, which inhibits the creation of single objects.

  The call of this function looks as follows:
	C>java TSUtil [{-e|-w}] [-k] [-l[<logfle>]] [-m<id>] [-p<p>:<path>] [-q<n>:<fref>] shftdyn
		[{-c|-u}] [-w] <dir> [{<sha>|+} [<sca>]]
  with:
	"dir" contains (fully defined) path to route-definition
	"sha" specifies the ID-Bias, where dynamic paths can be found. If this value is not present,
		a default-value of '263' is assumed. This default-value is also used, if the placeholder
		'+' is specified. This may be necessary, if other following values will be given.
	"sca" specifies the ID-Bias, where dynamic sections can be found. If this value is not present,
		a default-value of '376' is assumed.
	Option '-w' is used to enable automatic creation of missing 'DynTrack'-objects. If this option
		is active, a missing 'DynTrack'-object of a world-file is created using informations of the
		trackdatabase. So, all paths/sections are shifted even though NO (valid) 'DynTrack'-Object
		may exist (due to error(s)). After execution of this function, all created 'DynTrack'-objects
		should be edited with the RE in order to recalculate the new values derived from tdb-file. 
	If option '-c' is used, all world files are written in the compressed format [CB].
		Normally, world-files are written in the same format as they were read. This option
		may be cleared with the '-u' -option.
	If option '-u' is used, all world files are written in the expanded format[UT]. Normally,
		world-files are written in the same format as they were read. This option may be
		cleared with the '-c' -option.
	Concerning the global options, compare to 'Introduction'

  e.g. ProTrain 1: "java TSUtil -lC:\Logdat.log shftdyn C:\TRSim\routes\ProTrain_Rheintal"

  Action(s) to use the results of the function:
	- Delete the directory 'world' of the route and replace it with the 'world'-directory
		from 'newRoute'.
	- Move all files from the 'newRoute'-directory to the route-directory and replace them.

23) Show/print internal ID-values of known TSUil-classes
  Function "version" is used to display or log the identifications of all Java-Classes used by TSUtil.
  Therefore it is possible to verify if the current installation is up-to-date.
  
  The call of this function looks as follows:
	C>java TSUtil [{-e|-w}] [-k] [-l[<logfle>]] [-m<id>] [-p<p>:<path>] [-q<n>:<fref>] version
  with:
	"logfle" is (optional) the name of the log-file, which will get error- and other messages
	Concerning the global options, compare to 'Introduction'

  e.g. : "java TSUtil -lC:\Logdat.log version"

  Action(s) to use the results of the function:
	This funcion does NOT create any new file (except LOG).

24) Compress/Decompress/Reduce/Expand of file(s)/filegroups (S,T,W)
  Function 'fmgr' is used to convert file(s) or group of files of different types of data (S,T,W) to
  target-fileformat (CB,UB,UT), which can be also specified.
  Source- and target-directory are included in function-call, so that this function is independent from any route.
  Source- and target-directory can specify the same directory. Then all selected files are overwritten without
  inquiry. (The real destination is a temporary file, which is later copied to the selected destination-directory.) 

  Option '-m' specifies a charactermask, which is used to select file(s) from within source-directory. This mask
  is interpreted as a 'regular expression' and therefore all properties of such an expression are available to
  select files. It is NOT a file-mask, as MS uses in several commands. (e.g. copy)
  More information about 'regular expressions' can be found in Annex B of this document. There you will also
  find a (not complete) list of placeholder, which can be used in a 'regular expression'.
  If option '-m' (and option '-n') is NOT used, current selection-charactermask is loaded from Configurationfile
  ('TSErrMsg...') and depends on type of datafile. Normally ALL appropriate files are selected.
    (Shape('FleMgrMS'): '.+\.s'; Tile('FleMgrMT'): '.+\.t'; World('FleMgrMW'): '.+\.w')
  Using option '-n' a file-mask may be specified. This mask uses 'windows'-style to build a file-selection-mask.
  Because it is converted to a regular expression, ONLY '?' and '*' are supported as wildcard-character.

  This function uses NO external tool and is based on the conversion-algorithm of Martyn Griffin.
  It automaticly detects the current file-format of each file and takes the appropriate actions. e.g.: If the file
  already uses the target-format, the file is only copied to the destination directory. 

  ATTENTION: While reading, all files are converted record by record to 'UT'-format before, while writing, they
	 are again converted to the specified target-format.

  You only can process one type of file with one call to the 'fmgr'-function.

  The call of this function looks as follows:
	C>java TSUtil [{-e|-w}] [-k] [-l[<logfle>]] [-m<id>] [-p<p>:<path>] [-q<n>:<fref>] fmgr
		{-c|-e|-r} {-s|-t|-w} [{-m<msk>|-n<fmsk>}] [-o] <dir1> <dir2>
  with:
	"dir1" contains (fully defined) path to source-directory of files
	"dir2" contains (fully defined) path to target-directory of files
	"msk" specifies a 'selection-pattern' (regular expression) for file-selection. Only one of the options
		'-m' or '-n' should be used. If one of these options is specified more than once, the LAST one
		is active. If neither option is used, aLL files, which do are from correct filetype (due to
		options '-s','-t' or '-w'), are processed.
	"fmsk" specifies a 'selection-pattern' in 'windows'-style for file-selection. Only one of the options
		'-n' or '-m' should be used. If one of these options is specified more than once, the LAST one
		is active. If neither option is used, aLL files, which do are from correct filetype (due to
		options '-s','-t' or '-w'), are processed.
		ATTENTION: Beside character '?' and '*' no OTHER wildcards are supported within selection-mask.
	If Option '-c' (compressed) is specified, target-fileformat is set to 'compressed binary' (CB). This
		Option is NOT allowed, if 'Tiles' are selected (Option -t is also used)
	If Option '-e' (expanded) is specified, target-fileformat is set to 'uncompressed text' (UT).
	If Option '-r' (reduced) is specified, target-fileformat is set to 'uncompressed binary' (UB).
	Option '-s' selects type of files to process. Only 'Shape-Files' are converted. All other type of files
		are rejected.
	Option '-t' selects type of files to process. Only 'Tiles' are converted. All other type of files
		are rejected.
	Option '-w' selects type of files to process. Only 'World-Files' are converted. All other type of files
		are rejected.
	If Option '-o' is active, missing subdirectories of target-directory are automatically created. If not, call
		to file-function terminates with an error, if such a condition is found.
	Concerning the global options, compare to 'Introduction'

  e.g. ProTrain 1: "java TSUtil -lC:\Logdat.log fmgr -e -w -o C:\TRSim\routes\ProTrain_Rheintal\world
                        C:\temp\world"

  Action(s) to use the results of the function:
	All files are created in the correct directory. NO additional action is needed.

25) Replacement/Modification of the signaldefinitions of a route
  This function ("chgsig") may be used to replace or modify signaldefinitions within a route. Changes are
  controlled by a special command-file, which has to be created. This file must be placed together with the
  target-signalfiles (sigcfg.dat,sigscr.dat) in a additional directory within the route-definition.
  This command-file contains a set of modification-commands for each signal, which is used within the route.
  The syntax of these commands are decribed in Annex D.
  The result of this modification is written to the '/newroute'-directory. The new signal-files are also copied
  to this directory, so that the current signalfiles are replaced with the new ones.
  This function may also be used to delete signals or rename signal-shape-definitions (compare to Annex D).

  ATTENTION: After Activation of the changes, the TSUtil-function 'rendb', together with its options '-w','-r' and
	'-a', should be applied to the route. This is neccessary, because 'chgsig' will NOT delete all (now) unused
	TrItem-definitions of the old signal-objects.
  Remark: After activation of the changes, the 'ichk'-function should be used to check, if the integrity of
	the route has be successfully maintained.

  The call of this function looks as follows:
	C>java TSUtil [{-e|-w}] [-k] [-l[<logfle>]] [-m<id>] [-p<p>:<path>] [-q<n>:<fref>] chgsig [-c<n>]
		[-s<file>] [-r] <fldr> <dir>
  with:
	"dir" contains (fully defined) path to route-definition
	"fldr" is a (simple) director-name which contains the following files:
		+ Signal-definitionfile of the target-system ('sigcfg.dat')
		+ Signal-scriptdefinitions of the target-system (e.g. 'sigscr.dat')
			(The name of the signalscript-definitionfile is defined within the 'sigcfg.dat'-file.)
		+ Controlfile of modifications (Default-Name: 'chgSig.dat')
		This folder is used as a subfolder relative to the route-directory.
	If option '-c' is specified, all shape-files, which are referenced during the conversion, are copied to
		the shape-directory of the route. Therefore <n> has to select a source-directory, which is
		fully named within the global option '-q'(refer to global option). ALL signal-/signalobject-shapes,
		which are newly referenced due to the conversion-instructions, and their *.sd-files are copied from
		the specified source-directory to the shape-directory of the route. If a equally named files already
		exits, it is overwritten.
		A *.ref-entry of such a object is also inserted into the *.ref-file of the route, if a appropriate
		definition is provided within the controlfile (refer to Annex D).
	Option '-r' initiates the removal af all signalshape-files, which are no longer used, from the shape-directory
		of the route. The appropriate *.sd-files are also removed. However, this feature is only functional,
		if the results of the whole 'chgsig'-function are directly written into the original directories
		of the route. Additional informations to do this, may be requested from the author.
		If a removed object contains a *.ref-entry, this entry is removed from the *.ref-file, too.
	Using option '-s' the default-name of the modification-controlfile may be overwritten with an explicit name.
	Concerning the global options, compare to 'Introduction'

  e.g. ProTrain 1: "java TSUtil -lC:\Logdat.log chgsig -sSigcvrt.txt $SigCvrt
			C:\TRSim\routes\ProTrain_Rheintal"

  Action(s) to use the results of the function:
	- Delete the directory 'world' of the route and replace it with the 'world'-directory
		from 'newRoute'.
	- Move all files from the 'newRoute'-directory to the route-directory and replace them.
	- Run 'rendb'-function using options '-w', '-r' and '-a'

26) Count and log signal-shapes of a route
  This function "srchsig" is used to log the positions of ALL signal-shapes within a route.
  The route is analysed and for each signal-shape, which is defined within the signal-configuration of the
  route, a log-file is created within the 'newroute'-folder. This log-file contains an entry for every
  signalobjekt of this type, describing the current position.
  The file-names of these log-files look like this:
	'<shape>.<xxxx>.txt'					with
		<shape> is the name of the signal-shape without suffix.
		<xxxx> shows how many lines are contained in this file. This also shows how many signals of
			this type are found within the whole route.
  Using this function, an 'integrity-check' is done, too.
  NO changes are made within the Route-definition!  
  
  The call of this function looks as follows:
	C>java TSUtil [{-e|-w}] [-k] [-l[<logfle>]] [-m<id>] [-p<p>:<path>] [-q<n>:<fref>] srchsig <dir>
  with:
	"dir" contains (fully defined) path to route-definition
	Concerning the global options, compare to 'Introduction'

  e.g. ProTrain 1: "java TSUtil -lC:\Logdat.log srchsig C:\TRSim\routes\ProTrain_Rheintal"

  Action(s) to use the results of the function:
	This funcion ONLY creates log-files, which are NOT inserted into a route.

27) Shift tracks, roads and route-objects ignoring quad-borders
  This function "mveobj" shifts (all) objects of a route to another position an leaves the terrain unchanged. The
  objects may me shifted an arbitrary value in all three dimensions ("dx","dh","dz"). However, objects cannot be
  shifted out of the allover valid range of coordinates.
  The value, which is used to shift the objects, is messured/specified in Meter but NO whole-number is requested.
  The shift-accuracy is limited through TS and represents ca. 1/10000 m (position-values normally contain 5 decimal
  places).
  If the target of a shift-operation points to a tile, which is NOT defined, this tile may be generated using
  default-values. However, tile-creation must be enabled using the local option '-g'. The height value of the
  terrain, which is generated in this case, is deviated from the shift-value of height ("dh"). If option '-g'
  is not active, an error is generated and the object is not moved.

  The set of shifted objects of the route may be restricted to track- and track-connected-objects (also called
  'interactive objects') using a local option. If shifting is additionally restricted NOT to shift road-objects,
  it is essential that the relation between roads and tracks is still correct and valid. However, this
  restriction must not be used, if the route contains 'LevelCr'-objects, because these objects are based on a
  fix relation between tracks and roads. Attention! This is not checked from TSUtil.   

  The call of this function looks as follows:
	C>java TSUtil [{-e|-w}] [-k] [-l[<logfle>]] [-m<id>] [-p<p>:<path>] [-q<n>:<fref>] mveobj
		[-g] [{-t|-T}[[<om>]:<s>] [-r]] [-v] [-w] <dir> <dx> <dh> <dz>
  with:
	"dir" contains (fully defined) path to route-definition
	"dx" is the difference value(float), which is to be added to all X-positionvalues (East(+)/West(-)).
		This value may be greater than 2048 or less than -2048.
	"dh" is the difference value(float), which is to be added to all height-values. (Y-position)
	"dz" is the difference value(float), which is to be added to all Z-positionvalues (North(+)/South(-)).
		This value may be greater than 2048 or less than -2048.
	If an object is shifted out of its current tile and the target-tile is NOT defined, an error is created
		and the object ist NOT moved. If - on the other side - the option '-g' is specified, a
		target-tile is created using default-values and the object is shifted into this quad.
	   Remark: The default terrain-definition of such a tile can be found in the ErrMsg-file (Key='TSTF*000')
	If option '-t'/'-T' is specified, ONLY Track-, Road- and connected interactive objects like platformmarker,
		signals, gantries, crossings, etc are shifted.

		Sometimes gantry-objects are defined as 'static' within a route. In order to be recognized as
		a 'track-connected' object, the gantry-definition must be used. (Use 'Gantry' within Ref-file)
		In order to include explicitely selected objects, the '-t/'-T'-option may be followed by an objectmask
		"om" and a selectpattern "s". The objectmask "om" contains exactly 4 hexadecimal digits and is used to
		select the type of objects, which should be included. Refer to X-mask within annex A for a decription of
		the correlation between mask and object-type. If an object should be included due to object-type the
		filename of this object must additionally match the selectpattern "s". If '-t' is used, the filename
		must start with the "s"-string to match this specification, otherwise - if '-T' is specified - "s"
		contains a 'regular expression' (refer to Annex B), which must match the whole filename. Comparison is
		NOT case-sensitive in both cases.
		If an object do NOT contains a filename (like Platform), the selectpattern is not used and the object is
		included.
		The objectmask "om" may be omitted, if ONLY 'static objects' should be additionally selected. The
		default-value of the mask in this case is '0008'.
		Option '-t'/'-T' may be specified more than once.
		Example: '-T0008:Pltf.*\.s' (or '-T:Pltf.*\.s') - Include static objects whose filename starts with
			'Pltf' and is later followed by '.s'. 
	if option '-r' is specified road-objects are NOT shifted. This option is ignored, if option '-t'/'-T' is not
		specified.
	   Attention: DO NOT specify '-r'-option, if the route contains 'LevelCr'-objects.
	If option '-v' is specified, correction of positionvalues from soundobjects is suppressed. Normally, this
		function adjusts soundobjects due to their real positions. If this involves a new quad, which is
		NOT defined, the position values are corrected instead so that the object remains in the current
		quad. If this option is specified this correction is suppressed, so that the position of the objects
		will remain unchanged in this case. Therefore these objects may create errors. 
	If the shifting of objects fails because of errors, function 'mveobj' is terminated and NO outputdata is
		written. However, if option '-w' is specified, outputdata (world-files,...) will be created in every
		case. This may cause writing of incorrect data to the 'newroute'-directory. So these files should
		be checked after activation. (e.g.'function 'ichk')
	Concerning the global options, compare to 'Introduction'

  e.g. ProTrain 1: "java TSUtil -lC:\Logdat.log mveobj -g C:\TRSim\routes\ProTrain_Rheintal"

  Action(s) to use the results of the function:
	- Delete the directory 'world' of the route and replace it with the 'world'-directory
		from 'newRoute'.
	- Delete the directory 'paths' of the route and replace it with the 'paths'-directory
		from 'newRoute'.
	- Copy the directory 'tiles' from 'newRoute' to directory 'tiles' of the route. Accept
		overwrite, if requested.
	- If directory 'TD' was created within 'newRoute'-directory, delete the directory 'TD'
		of the route and replace it with the 'TD'-directory from 'newRoute'.
	- Move all files from the 'newRoute'-directory to the route-directory and replace them.
		Hint: This function creates a new version of the '*.trk'-file of the route. However, sometimes
			this new version is not needed and so the file needs not to be copied.

28) Split and merge of world-files
  Sometimes world-files grew to a size, which prevents route-editor from saving them correctly. Then, route-editor
  terminates and the world-files are not written. This function 'world' helps to solve this problem. It can split a
  world-file and move all static objects to an other, additional world-file. It also can merge such additional
  world-files to the original one.
  This function supplies the 'Split'-action and the 'Merge'-action. The first one creates additional world-files
  by moving static objects from the original world-file to the additional one. Both files are written to the
  directory 'newRoute/world' using world-file-format. However, the filenames of the additional world-files are
  extended with the specified suffix.
  If merge-action is used, the original world-files (from 'world'-directory) are merged with the additional
  world-files, which are loceted in the 'newRoute/world'-directory. The result is stored to 'newRoute/world' as
  the new 'original world-file'.

  The call of this function looks as follows:
	C>java TSUtil [{-e|-w}] [-k] [-l[<logfle>]] [-m<id>] [-p<p>:<path>] [-q<n>:<fref>] world
		{-m<s1>|-s<s1>} [{-c|-u}] [-h<sl>] [-q<dir>] <dir>
  with:
	"dir" contains (fully defined) path to route-definition
	If option '-c' is used, all world files are written in the compressed format [CB].
		Normally, world-files are written in the same format as they were read. This option
		may be cleared with the '-u' -option. This option does NOT apply to the additional
		world-files. These are writen using [UT]-format in any case.
	Using option '-h', it is possible to restrict the set of static objects, which are moved to the additional
		world-file. This option specifies a 'StaticDetailLevel', which is compared to all static objects. If
		it matches the object is NOT moved. The specified 'StaticDetailLevel' can be in the range 3 to 9 or 0.
		This option may be specified more than once. If merge-action is selected, this option is ignored. 
	If option '-m' is specified, the 'Merge'-action is selected. "s1" specifies the filename-suffix, which must
		be added to the filename of the original world-file in order to get the filename of the 'additinal
		world-file'.
		Option '-m' may be specified more than once, if more than two world-files should be merged together.
		However, the same filename-suffix should NOT be specified more than once, in order to avoid multiple
		merging of the same additional world-file (although it is possible).
		Option '-m' cannot be specified, if option '-s' is already active. 
	If merge-action is selected, all additional world-files are read from the directory 'newRoute/world'. The
		option '-q' may be used to change this source-directory (Quell-Verzeichnis). If this option is
		specified, the given file-path, which should follow this option, is used to locate the additional
		world-files to be merged.
		This option is ignored, if split-action is selected.
	If option '-s' is specified, the 'Split'-action is selected. "s1" specifies the filename-suffix, which must
		be added to the filename of the original world-file in order to get the filename of the 'additinal
		world-file', which must be created.
		Option '-s' cannot be specified, if option '-m' is already active. 
		Attention: In order NOT to transfer a pylon, these objects must be marked as 'Gantry' within a
			world-file. They should NOT be defined as a static object.
			(This may be implemented by using keyword 'Gantry' instead of 'Static' within the
			 *.ref-file of the route.)
	If option '-u' is used, all world files are written in the expanded format[UT]. Normally,
		world-files are written in the same format as they were read. This option may be
		cleared with the '-c' -option. Additional world-files are written using the [UT]-format
		in any case.
	Concerning the global options, compare to 'Introduction'

  e.g. ProTrain 1: "java TSUtil -lC:\Logdat.log world -sv2 C:\TRSim\routes\ProTrain_Rheintal"

  Action(s) to use the results of the function:
	- All world-files in the 'newRoute/world'-directory should be copied to the directory 'world'
		of the route and replace the original ones.
	- Save all additional world-files from the 'newRoute/world'-directory for later use. (Action: Split)

29) Copy and modification of file(s)/filegroups (S,T,W)
  Function 'fcpy' is used to copy and/or convert file(s) or group of files of different types of data (S,T,W) to
  target-fileformat (CB,UB,UT), which can be also specified. During this process file-data may be modified.
  Source- and target-directory are included in function-call, so that this function is independent from any route.
  Source- and target-directory can specify the same directory. Then all selected files are overwritten without
  inquiry. (The real destination is a temporary file, which is later copied to the selected destination-directory.) 

  Option '-f' specifies a charactermask, which is used to select file(s) from within source-directory. This mask
  is interpreted as a 'regular expression' and therefore all properties of such an expression are available to
  select files. It is NOT a file-mask, as MS uses in several commands. (e.g. copy)
  More information about 'regular expressions' can be found in Annex B of this document. There you will also
  find a (not complete) list of placeholder, which can be used in a 'regular expression'.
  If option '-f' (and option '-n') is NOT used, current selection-charactermask is loaded from Configurationfile
  ('TSErrMsg...') and depends on type of datafile. Normally ALL appropriate files are selected.
    (Shape('FleMgrMS'): '.+\.s'; Tile('FleMgrMT'): '.+\.t'; World('FleMgrMW'): '.+\.w')
  Using option '-n' a file-mask may be specified. This mask uses 'windows'-style to build a file-selection-mask.
  Because it is converted to a regular expression, ONLY '?' and '*' are supported as wildcard-character.

  This function uses NO external tool and is based on the conversion-algorithm of Martyn Griffin.
  It automaticly detects the current file-format of each file and copies the file using the correct
  target-file-format. While copying, the contends are modified if needed. Due to this procedure, it is possible,
  not to change the current file-format. If this is requested, target-file-format (option c,e,r) should not be
  specified.

  ATTENTION: While reading, all files are converted record by record to 'UT'-format. Then, the record is modified
	(if needed) and written to the target-file using the specified target-file-format.

  You only can process one type of file with one call to the 'fcpy'-function.

  The call of this function looks as follows:
	C>java TSUtil [{-e|-w}] [-k] [-l[<logfle>]] [-m<id>] [-p<p>:<path>] [-q<n>:<fref>] fcpy
		[-b] {-a|-s|-t|-u|-w} [-@<ifle>] [{-c|-e|-r}] [{-f<msk>|-n<fmsk>}] [-{m|M}<s1>:<s2>] [-o] [-p]
		[-x] [-z<mpt>] <dir1> <dir2>
  with:
	"dir1" contains (fully defined) path to source-directory of files
	"dir2" contains (fully defined) path to target-directory of files
	"msk" specifies a 'selection-pattern' (regular expression) for file-selection. Only one of the options
		'-f' or '-n' should be used. If one of these options is specified more than once, the LAST one
		is active. If neither option is used, aLL files of correct filetype (due to options '-s','-t'
		or '-w'), are processed.
	"fmsk" specifies a 'selection-pattern' in 'windows'-style for file-selection. Only one of the options
		'-n' or '-f' should be used. If one of these options is specified more than once, the LAST one
		is active. If neither option is used, aLL files of correct filetype (due to options '-s','-t'
		or '-w'), are processed.
		ATTENTION: Beside character '?' and '*', no OTHER wildcards are supported within selection-mask.
	"mpt" specifies a modifcation pattern to change the name of the selected files. Each filename of a
		selected file is - if option '-z' is specified - changed into the target-filnename using this
		expression. This change uses methods of processing 'regular expression's. So, a capture-group,
		which is defined within the selection-expression ("msk"), is considered.
		Remark: Although "fmsk"-pattern are converted into a "msk"-pattern, capture-groups are not
			possible within such a pattern.
	"ifle" describes filename (and path) of a textfile, which contains additional local options of this
		commandline. All these additional options within this file become part of the commandline to
		activate the function.
		The local options in this optionfile follow the same format as the other local options (e.g: '-'
		is required with any option) and can be separated into more than one physical line.
	Option '-a' selects type of file to handle. Only 'Ascii-Text-Files' are processed. All other type of
		files are rejected and may generate read-errors.
	Option '-b' selects an alternative mode to copy the file. (Block-Mode) I f this option is active, the whole
		file is read into memory to be modified. Then the file is written to the target. So, modifications
		can be handled, which concern to more than one line. However, due to the fact, that much more memory
		is needed to use this mode, block-mode should be avoided.
	If Option '-c' (compressed) is specified, target-fileformat is set to 'compressed binary' (CB). This
		Option is NOT allowed, if 'Tiles' are selected (Option -t is also used)
		This option is also ignored, if a 'Text-File'-type (Ascii/Unicode) is selected.
	If Option '-e' (expanded) is specified, target-fileformat is set to 'uncompressed text' (UT).
		This option is ignored, if a 'Text-File'-type (Ascii/Unicode) is selected.
	Option '-m'/'-M' may be used to modify the records, which are copied from source to destination. Line by line
		all copied files are checked, if the record matches the specifications of the string specified
		as "s1". If '-m' is used, the record must contain the "s1"-string to match this specification.
		In this case, this part of the record is replaced with the second string ("s2"). If '-M' is used,
		"s1" contains a 'regular expression' (refer to Annex B), which must match the beginning of the
		record in order to modify it. Then, the record is changed using the second string ("s2").
		During this modification, backward-references to the original data-line are resolved(capture-group).
		Both comparison are normally NOT case-sensitive. However, if option '-p' is additionally specified,
		mode of comparison changes and becomes case-sensitive.
                Each '-m'/'-M'-Option is applid to every record using the sequence of specification. So, it is
		important to consider this sequence.
		If block-mode is active, each modification is applied once to the whole file. However, all matches
		within the file are processed.  

		Example: '-m"SectionIdx ( 150 )":"SectionIdx ( 4294967280 )"' - While copying every record is
			searched if it contains the string 'SectionIdx ( 150 )'. If it is found, it is replaced
			with "SectionIdx ( 4294967280 )". Otherwise the record is copied unchanged.
			Attention: In order to recognize such an option correctly within the commandline of the
				TSUtil-invocation, it must be specified as:
				"-m\"SectionIdx ( 150 )\":\"SectionIdx ( 4294967280 )\""
		Example: '-M"^(.*)SectionIdx \( 150":"$1SectionIdx ( 4294967280"' - This is the above example,
			specified as a 'regular expression'.
	If Option '-o' is active, missing subdirectories of target-directory are automatically created. If not, call
		to file-function terminates with an error, if such a condition is found.
	If Option '-p' (proper/precise) is specified, comparisons, which are used with option '-m'/'-M', become
		case-sensitive. Normally, these comparisons do not consider the case of the characters.
	If Option '-r' (reduced) is specified, target-fileformat is set to 'uncompressed binary' (UB).
		This option is ignored, if a 'Text-File'-type (Ascii/Unicode) is selected.
	Option '-s' selects type of files to process. Only 'Shape-Files' are converted. All other type of files
		are rejected.
	Option '-t' selects type of files to process. Only 'Tiles' are converted. All other type of files
		are rejected.
	Option '-u' selects type of files to handle. Only 'Unicode-Text-Files' are processed. All other type of
		files are rejected and may generate read-errors.
	Option '-w' selects type of files to process. Only 'World-Files' are converted. All other type of files
		are rejected.
	Option '-x' ONLY has an impact on the copy-function, if option '-a' or '-u' is ALSO specified. If this
		option is additionally specified, option '-a' or '-u' only specifies the TARGET-format of the
		copied file, while the source-format must match the format, which is NOT specified. So, the file
		will be converted from 'ascii' to 'unicode' (or vice versa) while it is copied.
	Concerning the global options, compare to 'Introduction'

  e.g. ProTrain 1: "java TSUtil -lC:\Logdat.log fcpy -e -w -o C:\TRSim\routes\ProTrain_Rheintal\world
                        C:\temp\world"

  Action(s) to use the results of the function:
	All files are created in the correct directory. NO additional action is needed.

30) Check of a signalconfiguration independently from a route
  Using function ("testsig") the integrity of a Signal-Definition can be checked. This is independently from a
  concrete route. Signal-files 'sigcfg.dat' and 'sigscr.dat' are tested, if they contain any error. The interconnexion
  between both files is checked, too.
  NO changes are made!
  
  The call of this function looks as follows:
	C>java TSUtil [{-e|-w}] [-k] [-l[<logfle>]] [-m<id>] [-p<p>:<path>] [-q<n>:<fref>] testsig <dir>
  with:
	"dir" contains the (fully defined) path to the signaldefinition
	Concerning the global options, compare to 'Introduction'

  e.g. ProTrain 1: "java TSUtil -lC:\Logdat.log testsig C:\TRSim\routes\ProTrain_Rheintal"

  Action(s) to use the results of the function:
	This funcion does NOT create any new file (except LOG).




FICTIOUS EXAMPLE (Function 'cvrt'):
In the following example it is presumed, that Trainsimulator is installed in directory "C:\TrSim".
There is also a route-definition called "Usa3", which has to be adapted at a new 'tsection.dat' in
order to implement extensions. The global file 'tsection.dat', which is still valid for this route-
definition, can be found in the directory "C:\TrSim\global". A new global 'tsection.dat' is provided
in the directory "C:\TrSim\new". This file contains extended definitions, which are to be used in
the route-definition.  

Further it is to be accepted, that the execution of commands do NOT produce errors. The examination
of the log-file is not shown, too.

a) Create a Backup of the Route

b) Open a DOS-Window
	Presumption: The new Window opens to directory "C:\"

c) Copy and secure the actual,working 'tsection.dat'
	C>md C:\TrSim\old
	C>copy C:\TrSim\global\tsection.dat C:\TrSim\old

d) Activation of NEW 'tsection.dat' (please overwrite)
	C>copy C:\TrSim\new\tsection.dat C:\TrSim\global

e) Delete target-directory, if present
	C>deltree C:\TrSim\Routes\Usa3\newRoute

f) Conversion of Route-Definition
	C>java TSUtil -lTSUtil.log cvrt -bC:/TrSim/old/tsection.dat -c C:/TrSim/Routes/Usa3

g) Delete original directories/files from route-definition
	C>deltree C:\TrSim\Routes\Usa3\world

h) Activation of newly created files (please overwrite)
	C>xcopy C:\TrSim\Routes\Usa3\newRoute\*.* C:\TrSim\Routes\Usa3 /s

i) Optional delete of files after copy
	C>deltree C:\TrSim\Routes\Usa3\newRoute

j) Close window again
	C>exit


FICTIOUS EXAMPLE (Function 'move'):
In the following example it is presumed, that Trainsimulator is installed in directory "C:\TrSim".
There is also a route-definition called "Usa3", which has to be shifted to Europe. So, the route
is to be shifted 5120 tiles east(X-direction). The position according to Z-direction should NOT
be modified.

Further it is to be accepted, that the execution of commands do NOT produce errors. The examination
of the log-file is not shown, too.


a) Create a Backup of the Route

b) Open a DOS-Window
	Presumption: The new Window opens to directory "C:\"

c) Delete target-directory, if present
	C>deltree C:\TrSim\Routes\Usa3\newRoute

d) Shift Route-Definition to Europe
	C>java TSUtil -lTSUtil.log move C:/TrSim/Routes/Usa3 5120 0

e) Delete of original directories/files from route-definition
	C>deltree C:\TrSim\Routes\Usa3\TD
	C>deltree C:\TrSim\Routes\Usa3\world
	C>deltree C:\TrSim\Routes\Usa3\Tiles
	C>deltree C:\TrSim\Routes\Usa3\LO_Tiles		(if present)
	C>deltree C:\TrSim\Routes\Usa3\Activities
	C>deltree C:\TrSim\Routes\Usa3\Paths
	C>deltree C:\TrSim\Routes\Usa3\Services
	C>deltree C:\TrSim\Routes\Usa3\Traffic

f) Activation of newly created files (please overwrite)
	C>xcopy C:\TrSim\Routes\Usa3\newRoute\*.* C:\TrSim\Routes\Usa3 /s

g) Optional delete of files after copy
	C>deltree C:\TrSim\Routes\Usa3\newRoute

h) Reduce/Compress all world-files again (optional, you can also use 'Route-Riter')
	C>java TSUtil -lTSUtil.log cmp -w -c C:/TrSim/Routes/Usa3

i) Activation of newly created files (please overwrite)
	C>xcopy C:\TrSim\Routes\Usa3\newRoute\World\*.* C:\TrSim\Routes\Usa3\World

j) Optional delete of files after copy
	C>deltree C:\TrSim\Routes\Usa3\newRoute

k) Close window again
	C>exit


HISTORIE:
30.07.2003 - V2.0 Release for use
01.08.2003 - V2.0 Extended Check of plausibility
05.08.2003 - V2.0 Minor error-corrections and optimizations (Logging)
17.08.2003 - V2.1 New function 'shift'
25.08.2003 - V2.1 Support of 'identical section - definitions'
05.09.2003 - V2.1 Correction of errors(upper/lower case)
22.09.2003 - V2.2 Implementation of several new options and function 'cmpw'
30.10.2003 - V2.3 New function 'tsconv'
19.01.2004 - V2.3 Support of blank in Route-Names, error-corrections
21.01.2004 - V2.3 additional options, optimizations
23.01.2004 - V2.4 New function 'ichk'
00.00.0000 - V2.5 New function 'rendb'
16.02.2004 - V2.6 Redesign of execution (read - check - (write))
07.04.2004 - V3.0 New fully referenced data-modell, check of tile-Definitions
			check of quad-tree, new function 'move', new function 'chkup'
13.04.2004 - V3.0 Error-correction, exact version-identification
11.05.2004 - V3.0 Additional arguments (cvrt,...), intern: local 'tsection.dat' changed
18.05.2004 - V3.0 Error-corrections and optimizations
21.05.2004 - V3.0 Implementation of error-correction in 'rendb' - function
27.05.2004 - V3.0 New function 'adjh' (not available for download)
01.07.2004 - V3.0 Error-corrections and extended check within function 'ichk'
15.07.2004 - V3.0 First, not fully translated, english version
09.08.2004 - V3.0 Error-corrections, Second english version (not fully translated, too)
12.08.2004 - V3.0 Error-corrections, Third english version (Translation almost completed)
19.08.2004 - V3.0 Error-corrections, Fully translated english version
13.09.2004 - V3.0 Error-corrections, Support of multiple signal-script-files
31.10.2004 - V3.0 Error-corrections, Extended check of local 'tsection.dat'
15.11.2004 - V3.0 Error-corrections (not available for download)
20.11.2004 - V3.0 New function 'cmp', new function 'unc', minor error-corrections,
			new global option, changes in documentation
26.11.2004 - V3.0 New function 'filt', enhanced Error-Messages
05.12.2004 - V3.0 Function 'filt'->'filter', Error-corrections, 'ichk' checks Activities
07.12.2004 - V3.0 Error-corrections
28.12.2004 - V3.0 Error-corrections, implementation of new file-Interface to some functions
			(version is NOT available for download)
16.01.2005 - V3.1 Error-corrections, new function 'merge', advanced file-interfaces
27.01.2005 - V3.1 Error-corrections
06.02.2005 - V3.2 Error-corrections, support of tiles with edge-length>1, new function 'clrdb'
			extended documentation
10.02.2005 - V3.2 Error-corrections
12.02.2005 - V3.2 Error-corrections
17.02.2005 - V3.2 Error-corrections
22.02.2005 - V3.2 Error-corrections, extended support of local options
22.03.2005 - V3.2 Error-corrections, extended 'Merge'-funktion (Signaldefinition)
31.03.2005 - V3.2 Error-corrections
29.04.2005 - V3.2 Error-corrections
27.05.2005 - V3.2 Error-corrections, new "Correction-mode" for world-definitions
22.06.2005 - V3.2 Error-corrections, optimizations within various class-definitions
28.07.2005 - V3.2 Error-corrections, new function 'shftdyn', optimizations
26.08.2005 - V3.2 Error-corrections, enhancement of function 'shftdyn'
10.09.2005 - V3.2 Error-corrections
15.09.2005 - V3.2 Error-corrections, new options for function 'rendb', new function 'version'
02.11.2005 - V3.2 Error-corrections, new support of some undocumented keywords
22.11.2005 - V3.2 Error-corrections
06.12.2005 - V3.2 Error-corrections, new function 'fmgr', internal optimisations
31.12.2005 - V3.2 Error-corrections; fixing for enhancement to version 3.3
			(version is NOT available for download)
04.09.2006 - V3.3.00 Error-corrections; support of 'Hidewire' or 'Dynatrax' - modifications
			creation of static representations of trackobjects;
			optimization of internal procedures; changed activation of LOG-file; 
			extended check of 'path'-, 'service'- and 'traffic'-files;
			new function 'zusi'; enhanced fault-tolerance;
19.09.2006 - V3.3.01 Error-corrections within documentation and messages
29.01.2007 - V3.3.04 Error-corrections; enhancement within identification of 'Hidewire'-Objects (-z);
			internal redesign of java-objects for easy implementation of new functions and
			performance; additional extension of filenames with an accesspath;
28.03.2007 - V3.3.05 Error-corrections; internal standardizations(Queue); Enhancement of file-manager(fmgr);
			Fault-tolerance for File-IDs of files;
11.04.2007 - V3.3.06 Error-corrections (specially: I/O-buffering for TS-files)
13.07.2007 - V3.3.06 Error-corrections
29.11.2007 - V3.3.07 Error-corrections; implementation of 'java checked operations';
			handling of 'change-protection'  
10.01.2008 - V3.3.08 Error-corrections; new function 'chgsig'
04.04.2008 - V3.3.09 Error-corrections; new function 'srchsig'
01.06.2008 - V3.3.10 Error-corrections; fixing for enhancement to version 3.4
			(version is NOT available for download)
01.02.2009 - V3.4.00 Error-corrections; major internal enhancement of class-structure and methods;
			new function 'mveobj'; obsolete functions are now marked in documentation; Additional
			options and implementation of an optionfile; Revision of the 'path'-conception of
			shape-modifications; Activities are completely read (ichk)
24.02.2009 - V3.4.01 Error-corrections; new program-interface 'TSUtilDlg'; reprogramming of several methods
			to increase performance and clarity
10.03.2009 - V3.4.02 Error-corrections; new option 'a'/'A' of function 'cvrt'; reprogramming of several methods
			to increase performance
13.08.2009 - V3.4.03 Error-corrections; new function 'world'; new function 'fcpy'; reprogramming of several methods
			to increase performance; detailed check of activities
16.09.2009 - V3.4.04 Error-corrections; reprogramming of several methods to increase performance; command-procedures
12.10.2009 - V3.4.05 Error-corrections; reprogramming of several methods to increase performance; enhancement of
			memory-management for input/output
10.03.2010 - V3.4.06 Error-corrections; reprogramming of several methods to increase performance; complete check
			and processing of activities
21.05.2010 - V3.4.07 Error-corrections; additional options ('cvrt','chgsig'); extended processing of the *.ref-file
10.06.2010 - V3.4.08 Error-corrections (specially within decompress); additional options ('fcpy'); extended cacabilities
			of processing and copying files
24.11.2010 - V3.4.09 Error-corrections; additional options ('merge','cvrt'); enhancement of function 'chgSig'; new function
			'testSig'
09.12.2010 - V3.4.09 Error-corrections; Additional checks within signalsystem
15.03.2008 - V3.4.10 Error-corrections; Version-check of TSUtil; fixing for enhancement to version 3.5
			(version is NOT available for download)
19.04.2010 - V3.5.00 Error-corrections; Optimisations with compression/decompression of files
16.06.2010 - V3.6.00 Error-corrections; Correction of essential errors with compression/decompression of files;
			Remove of restrictions within signal-processing
18.06.2010 - V3.6.01 Error-corrections; Correction of errors with compression/decompression of shape-files;
			Reestablish of compatability to versions prior to 3.5.00 .
01.07.2010 - V3.6.02 Error-corrections; Deletion of 'newRoute'-folder, if it is still present; Enhancement of filter-function .
01.10.2010 - V3.6.03 Error-corrections; Correction of escape-handling (\) within quoted strings; Conversion between 'unicode'
			and 'ascii' when using function 'fcpy'; Modification/extension of the conversion-commands within
			signalhandling of function 'chgSig'; Distance-check of junctions within function 'ichk'; Adaption
			to 64-Bit operating-systems.





ATTENTION:

- This Software was provided and tested on my own PC. I'm not and i cannot be held responsible for
	damages to Hard- and Software, which may occur.
- Development of this program proceeds. This includes the correction of errors, which normally cannot
	be avoided. So, the latest version of this program should be downloaded from:
	'carloshr.privat.t-online.de'  or (alias) 'www.carloshr.homepage.t-online.de'


Credits:

Many thanks to 'Don Quichotte' for his unresting test of new functions. Many thanks also for helpful suggestions
  of new TSUtil-functions and improvement of existing functions.
I also like to thank Mike Simpson for integrating this software into Route-Riter and for his great work on testing
  the TSUtil-functions.
Another acknowledgment is for Jeffrey Kraus-Yao, who helps to ensure/rise the quality of TSUtil by testing new
  versions and reporting detailed informations about (possible) problems. 


CopyRight:
----------

This utility is Freeware and my be spread and copied as long as the contents of the ZIP-/Installation-file is not
changed. All other changes require the consent of the author.
If this software is used to create, modifiy or check payware-routes, the usage of this utiltiy must be mentioned
in the credits/instruction-file of this route. Otherwise the usage of TSUtil is NOT permitted. 

Contact:
	carlosHR@t-online.de


======================================================================================================================

A)Annex: Properties of 'Correction-Mode'
	 -------------------------------

ATTENTION: This description is pimarily designed for experts, who will know and understand all features of TSUtil
	and who also understand the fundamentals of electronic data-processing.

If 'correction-mode' is active and if they are missed, some definition-lines are automaticly added to an
object-definition using default-values. These default-values are either created following a fix rule or read from
the property-file.
The following definitions are used:

Object-type !	Keyword		   !	Y   !	Key	  !	Rule
------------------------------------------------------------------------------------------------------------ 
TrackObj	Elevation		3	TSUidX03	-
TrackObj	VDbId			25	-		fix value '4294967294'
TrackObj	StaticDetailLevel	26	-		current level is inserted
DynTrack	Elevation		3	TSUidX13	-
DynTrack	VDbId			25	-		fix value '4294967295'
DynTrack	StaticDetailLevel	26	-		current level is inserted
Signal		VDbId			25	-		fix value '4294967295'
Signal		StaticDetailLevel	26	-		current level is inserted
Static		StaticDetailLevel	26	-		current level is inserted
Forest		ScaleRange		2	TSUidX42	-
Forest		Area			3	TSUidX43	-
Forest		Population		4	TSUidX44	-
Forest		TreeSize		5	TSUidX45	-
Forest		VDbId			25	-		fix value '4294967295'
Forest		StaticDetailLevel	26	-		current level is inserted
Platform	VDbId			25	-		fix value '4294967295'
Siding		VDbId			25	-		fix value '4294967295'
Gantry		VDbId			25	-		fix value '4294967295'
Speedpost	Speed_Text_Size		3	TSUidX83	-
Speedpost	VDbId			25	-		fix value '4294967295'
CarSpawner	CarFrequency		1	TSUidX91	-
CarSpawner	CarAvSpeed		2	TSUidX92	-
CarSpawner	VDbId			25	-		fix value '4294967295'
LevelCr 	Crashprobability	2	TSUidXA2	-
LevelCr 	LevelCrTiming		4	TSUidXA4	-
LevelCr		VDbId			25	-		fix value '4294967295'
Hazard		VDbId			25	-		fix value '4294967295'
Transfer	VDbId			25	-		fix value '4294967295'
Transfer	StaticDetailLevel	26	-		current level is inserted
CollideObject	VDbId			25	-		fix value '4294967295'
Telepole	VDbId			25	-		fix value '4294967295'
Pickup		VDbId			25	-		fix value '4294967295'

(Remark: Y refers to bit-number of Y-mask (see below))


If the upper table specifies a key, this key is used to read the default-value from the property-file
(TSErrMsg???.properties) The read data is - surrrounded by additionally blanks - used as the argument of the
new definition-line.
Normally, fix values are defined in the property-file using these keys. On the other side, user can
modify the file and change the values. Then, he can also use some placeholders, which are dynamically replaced,
when writing the (new) definition-line to the output-file:
- ID '%0' will be replaced by the current file-name of the object ("" if not available)
- ID '%1' will be replaced by the current UiD-value
- ID '%2' will be replaced by the current Y-value (compare to table)


Additionally 'online-configuration' of TSUtil can control if a default-definition is added to output.
'Online-configuration' uses hidden global options to dynamically control the behaviour of TSUtil. So, the
option '$D' is used to decide, if a default-definition is added.  
Option '$D' looks like this:
	-$Dxxxx:yyyyyyyy	(Attention: 'D', not 'd')
Both 'xxxx' and 'yyyyyyyy' define a  hexadecimal mask, which exactly holds 4 respectively 8 hex-digits.
All bits of these masks are numbered from right to left, starting with '0'. So, X-mask contains 16 (15..0) and
Y-mask 32 (31..0) bits.

The bits of X-Mask are assigned to the following object-types:
 0 - TrackObj
 1 - DynTrack
 2 - Signal
 3 - Static
 4 - Forest
 5 - Platform
 6 - Siding
 7 - Gantry
 8 - Speedpost
 9 - CarSpawner
10 - LevelCr
11 - Hazard
12 - Transfer
13 - CollideObject
14 - Telepole
15 - Pickup

Exapmples: 0003 - TrackObj,DynTrack; 0008 - Static; 00F0 - Gantry,Siding,Platform,Forest

In order to apply Y-mask to an object-type-definition, the assigned bit has to be set. So, 'FFFF' can be used to
apply Y-mask to all object-types, while '0000' will show NO impact to any definition.

The bits of Y-mask are assigned as follows:
0..15 - depends on object-type.
16 - TrItemId
17 - CollideFlags
18 - Collidefunction
19 - FileName
20 - StaticFlags
21 - Position
22 - QDirection
23 - Matrix3x3
24 - MaxVisDistance
25 - VDbId
26 - StaticdetailLevel
27 - SignalSubObj
28 - SignalUnits
29 - NoDirLight
30 -
31 -

All assignments can be seen in the upper table, too. (Y-Bit)
Y-mask specifies, which definition-line should NOT be created. In order to suppress creation of a definition-line
of a special type, the corresponding bit has to be set to '0' (reset). Therefore all UNUSED bits of Y-mask should
be set to '1'.

Examples:
 -$DFFFF:FBFFFFFF - A definition-line 'StaticdetailLevel' is not created for ALL object-types.
 -$D0001:F9FFFFFF - Definition-lines 'StaticdetailLevel' and 'VDbId' are NOT created for TrackObj-definitions.
 -$DFFFF:00000000 - NO definition-lines are created which contain default-definitions.
			(All other properties of 'correction-mode' are still active.)


B)Annex: Definition of 'regular expressions'
	 -----------------------------------

A 'regular expression' is used to check if a given characterstring(sample) matches this expression. So it is
possible to select a subset of strings from a set of strings (e.g. filenames).

A 'regular expression' consists of characters WITH and WITHOUT 'special meaning'. A character WITHOUT
'special meaning' represents the character itself. Characters without 'special meaning' have to occur in a
string, which should be checked, (sample) in the same sequence. Then this expression matches the given string.
Sometimes, no attention is paid to case of characters, but this depends on the compare-method. All
'regular expressions', which are used in TSUtil, do NOT pay attention to case of characters. 

The impact of the most important characters WITH 'special meaning' is now described. It differs from character
to character or from charactergroup to charactergroup. 

Char	Meaning
 .	This character is a placeholder, which matches ANY single character.
	  It has NO 'special meaning' within a characterlist. (as defined below)
 \	If another character with 'special meaning' follows this character, the 'special meaning' of this
	  following character is suppressed and it is used as the character itself. In the other case a
	  charactergroup (characterclass) is defined, which itself has a'special meaning'. Some of these groups
	  are listed here.
	  If \ is followed by a character, which DO NOT define a charactergroup, this expression is erroneous.
	  The following character may be  \ , which defines " \ WITHOUT 'special meaning' ".
 ?	The PREVIOUS character must be used ONCE or NOT AT ALL.
 *	The PREVIOUS character must be used ZERO or MORE TIMES.
 +	The PREVIOUS character must be used ONE or MORE TIMES.
 {n}	The PREVIOUS character must be used EXACTLY n TIMES (n must be a number).
 {n,}	The PREVIOUS character must be used AT LEAST n TIMES (n must be a number).
 {n,m}	The PREVIOUS character must be used AT LEAST n but NOT MORE than m TIMES (n,m must be numbers).
 (	Start of a capture-group - No character must be present to match.
 )	End of a capture-group - All characters of the sample between '(' and ')' belong to the group.
 [	Start of a characterlist
 ]	End of a characterlist e.g.: [0123] - This defines digit 0 to 3: ONE of these digits must occur
	  This character only has a 'special meaning', if a characterlist is active. (after [ )
 -	(1) Specifies a range of characters within a characterlist e.g.: [A-Z] - All letters betweeen A and Z
	(2) NO 'special meaning' outside a characterlist.
 ^	(1) Negates the meaning of the characters within a characterlist. e.g. [^04] - All characters but NOT 0 and 4
	(2) Start of a characterstring. (next specification refers to the FIRST character of the sample)
 $	(1) End of a characterstring. (previous specification refers to the LAST character of the sample)
	(2) NO 'special meaning' inside a characterlist.
	(3) If used within a replacement-string, $ is followed by a number and refers to a 'capture-group'.
 |	The previous OR the following character has to occur in the string to be checked.
 \d	Any digit. (= [0-9])
 \D	Any character, which do NOT form a digit. (= [^0-9])
 \w	Any characer used to build a word (digits and letters). (= [a-zA-Z0-9])
 \W	Any character, which is NOT used to build a word. (= [^\w])
 \t	The tab-character
 \n	The 'newline'-character
 \r	The 'carriage-return'-character
 \f	The 'form-feed'-character
 \s	Any whitespace-character (blank, newline, formfeed, ...)
 \S	Any character, which is NOT a whitespace-character
 \xhh	The character with the hexadecimal value 'hh'
 \uhhhh	The unicode-character with the hexadecimal value 'hhhh'

These are only part of the characters, which have a 'special meaning'. In order to get a complete list you should
refer to literture.

Examples of 'regular expressions':
 '...\.\d' - three characters follwed by a dot and a digit
 '.{8}\.[01]{3}' - exactly eight characters folowed by a dot and exactly three digits 0 or 1
 '.{8}[.][01]{3}' - same meaning as last expression ('Dot' has no 'special meaning' inside a charcterlist)
 '.+\*.' - one to n characters followed by a asterisk and another character.
 '.+\(x\)' - one to n characters (any character) followed by '(x)'.


C)Annex: Short description of Meta-Language
	 ----------------------------------

The Meta-Language, which is used in this documentation to specify commands, is as follows: 

  - Placeholder, that means 'names' which represent a string or a number or ... (e.g. filename), are enclosed with
	angle brackets. e.g.: <xx> - xx is a placeholder-variable
  - Optional elements, which can be placeholder,... too, are surrounded with square brakets.
	e.g.:	[H] - the letter H is optional
		[<name>] - the placeholder 'name' is optional
  - A selective element is a list of elements of which ONE element is requested. Such a list is surrounded with
	curly brackets and the single elements are divided by '|'.
	e.g..: {A|B|C} - letter A or letter B or letter C is requested/possible.
  - All other elements/characters are written in the same form as they are requested. But someone should be aware
	of the case of the letters. This ALSO applies to 'blank'-characters.
  - Optional and selective elements may be nested. However selective elements may be optional but not vice versa.
	(e.g. because: {[X]|Y|Z} = [{X|Y|Z}] but {X[E]|Y|Z} is possible)

Example:  The Meta-Text
	"Txt <name> [{I|O}] [ext]"
 with "'name' is placeholder for 'C:\boot.txt'" expands as follows(exactly):
	"Txt C:\boot.txt  "
	"Txt C:\boot.txt I "
	"Txt C:\boot.txt O "
	"Txt C:\boot.txt  ext"
	"Txt C:\boot.txt I ext"
	"Txt C:\boot.txt O ext"
It is not a task of Meta-Languages to define, which of these lines should be selected. This depends on the context of
 the definition.


D)Annex: Syntax-description of the convert-instructionset to modify signals of a route 
	 -----------------------------------------------------------------------------

In order to understand the convert-commands, you must know, how signals are internally defined:
All signals, which are not a 'Signal_Head', are only marked within the optionmask, which is defined with keyword
'SignalSubObj()'. The corresponding optionbit is permanently set or - if it is a optional subobject - if the
subobject is selected.
The optionbits are numbered from right to left (starting with 0) and this number corresponds to the subobject-number.
Every 'Signal_Head'-definition is representated by a 'SignalUnit'-definition with is exclusively connected to a
'SignalItem' from within track-database by a tritem-number.

A controlfile for signal-modifications contains three type of sections:
	- commands for converting a SINGLE signal(-shape) (convert-instructionset)
	- definitions of errormessages and warnings
	- definitions of a *.ref-entryset (optional)
All type of sections may be intermixed within the controlfile. However, sets (instructionset/entryset) MUST NOT be
splitted.
The file may contain comment-lines, which are marked with '#' as first (nonblank) character. It's also possible
to mark the rest of a definitionline as a comment by using character '#'.

First Sectiontype:
The 'commands for converting a single signal(-shape)' have to be repeated for every signal-shape of the source
signal-definitions. However, not every Signalshape need to be used. If a shape is NOT used within a route, it
may be ommitted.

Every line of a convert-instructionset may start with any number of spaces so that it may be simply readable.
Also, every definition value of a line is separated with at least one space, too. However, defining a message requests,
that exactly one space separates the number from the text.

A convert-instructionset is defined as follows:
 1.line: <name of source-shape> [<name of target-shape>]
 2.line: <convert-command>
 3.line: <convert-command>
 ...
 n.line: <convert-command>

Remark: If the name of the shape do not change, the second name of the target-shape may be ommitted.

For the first line of such an instructionset, the following rules apply:
	- ALL names must be surrounded with quotes, if they contain characters like blanks, ...
	- If the convert-instructionset ONLY consists of a single line (1.line) and contains no convert-commands,
	ALL signals, which use the defined source-shape, are renamed to the target-shape-name. The definition
	itself is NOT changed.
	- The second name (target-shape) may be specified using angle brackets('<...>'). Then, these brackets
	are removed and the name is used to convert the signal-object into a 'Static' one. The specified name
	must be a valid shape-name.
	- If the second name of the line equals the delete-marker '<$>'($-sign surrounded by angle brackets),
	all signals of the source-shape are deleted from the route.
	- If the name of the source-shape is specified within angle brackets('<...>'), the name refers to a
	static object instead of a signal-object. Then, NO convert-commands must follow. Such a static object
	may be renamed or deleted due to the second argument (target-shape), which may specify a new name or
	the delete-marker '<$>'.
Notice:	All changes to the signals are logged including the origional position. 


A convert-command looks like this:
 <command> <argument> <argument> ... <argument>

The following convert-command are supported:
 '/a' - obsolete, the comand is converted to '/n' or '/c'
 '/b' - check optionmask and suppress execution of the following convert-command(s) if appropriate
 '/c' - creates a Signaltype(Signal_Head)-Definition within the target-definition-set using a specified template from
	the source-definition of the signal
 '/d' - conditional delete of the whole signalobject
 '/o' - change optionmask of the signaldefinition
 '/n' - creates a Signaltype(Signal_Head)-definition within the target-definition-set using any valid
	source-definition as a template.
 '/B' - like '/b' but the condition has to be read inverted
 '/C' - like '/c' but an optional source-connection to a switch should be maintained
	(normally, such a connection is cleared when the definition is copied)
 '/D' - like '/d' but the condition has to be read inverted
 '/O' - like '/o' but the condition has to be read inverted

The requested arguments - and so the final impact of the convert-instructionset - depend on the current convert-command.
The following definiton is used:
 /a <znr> <snr> [<name>]
	Attention: This convert-command is obsolete and is converted into '/n' or '/c' depending on whether '<snr>'
		contains a negative value or not.
	'znr' specifies the subobject-number of the target-definition, which should be created.
	'snr' specifies the subobject-number of the source-definition, which is the model of the definition.
		This convert-command is then changed to type '/c'.
		If '<snr>' is negative, the convert-command is chanded to type '/n' and <snr> is translated into
		a error-number (<nr> = 100 - <snr>).
	If 'name' is specified, the name of the signaltype-definition is replaced with this name. Normally, the
		definition of the signaltype is retained from the source, but if this name is specified, it is
		replaced. In every case, a signaltype-definition, which uses the current name MUST exist within the
		new sigcfg-file. If not, an error is created.
 /b <nr> <xxxxxxxx> <yyyyyyyy>
	'xxxxxxxx' specifies a hexadezimal mask (8-digits), which is used to mask the options of the source-
		definition temporary.
	'yyyyyyyy' specifies a hexadezimal mask, which is compared to the result of the masking. If both values
		are NOT equal the following action is taken.
		If this mask is specified as '00000000' the result of the above masking is compared to zero and
		if it equals the following action is taken. 
	'nr' specifies the number of convert-commands, which have to be skipped. If this value equals '0' the
		convertion-sequence of this signal is terminated.
		This means: The following convert-command is ONLY executed, if the specified condition is 'TRUE'.
	Remark: Using a condition, which never evaluates to true, a unconditional jump (forward) is created.
 /c <znr> <snr> [<name>]
	'znr' specifies the subobject-number of the target-definition, which should be created.
	'snr' specifies the subobject-number of the source-definition, which is the model of the definition.
		The subobject of the source-definition is not / no longer modified, and can be used more than once.
	If 'name' is specified, the name of the signaltype-definition is replaced with this name. Normally, the
		definition of the signaltype is retained from the source, but if this name is specified, it is
		replaced. In every case, a signaltype-definition, which uses the current name MUST exist within the
		new sigcfg-file. If not, an error is created.
 /d <nr> <xxxxxxxx> <yyyyyyyy>
	'xxxxxxxx' specifies a hexadezimal mask (8-digits), which is used to mask the options of the source-
		definition temporarily.
	'yyyyyyyy' specifies a hexadezimal mask, which is compared to the result of the masking. If both values
		are equal the following action is taken.
		If this mask is specified as '00000000' the result of the above masking is compared to zero and
		if is NOT equal the following action is taken. 
	'nr' specifies a message-number. If this number does not equals '0' and the above comparison is positive, this
		message is logged.
	If the above comparison is positive, the whole signalobject is deleted and the conversion-sequence is
		terminated.
 /n <znr> <nr> [<name>]
	'znr' specifies the subobject-number of the target-definition, which should be created. The source-definition
		is searched for a valid entry (signalhead-definition), which can be used as a template.
	'nr' specifies a message-number. If no appropriate template can be found and this number does not equals '0'
		this message is logged.
	If 'name' is specified, the name of the signaltype-definition is replaced with this name. Normally, the
		definition of the signaltype is retained from the source, but if this name is specified, it is
		replaced. In every case, a signaltype-definition, which uses the current name MUST exist within the
		new sigcfg-file. If not, an error is created.
 /o <nr> <xxxxxxxx> <yyyyyyyy> <zzzzzzzz>
	'xxxxxxxx' specifies a hexadezimal mask (8-digits), which is used to mask the options of the source-
		definition temporarily.
	'yyyyyyyy' specifies a hexadezimal mask, which is compared to the result of the masking. If both values
		are equal the following action is taken.
		If this mask is specified as '00000000' the result of the above masking is compared to zero and
		if is NOT equal the following action is taken. 
	'zzzzzzzz' specifies a hexadezimal mask of options. This mask is inserted (OR'ed) into the options of the
		target-definition, if the above comparison is positive.
		If this mask is specified as '00000000', the target-options are not modified.
	'nr' specifies a message-number. If this number does not equals '0' and the above comparison is positive, this
		message is logged.

The following restrictions of the above arguments have to be met:
	<znr> must be zero or positive and less than the maximum number of subobjects used in the target-definition.
	<snr> must be zero or positive (if not stated otherwise) and less than the maximum number of subobjects used
		in the source-definition.
	<nr> must be zero or positive.
	<xxxxxxxx> must contain EXACTLY 8 digits (0..9, a,b,c,d,e,f,A,B,C,D,E,F)
	<yyyyyyyy> must contain EXACTLY 8 digits (0..9, a,b,c,d,e,f,A,B,C,D,E,F)
	<zzzzzzzz> must contain EXACTLY 8 digits (0..9, a,b,c,d,e,f,A,B,C,D,E,F)


Second Sectiontype:
The definition of error- or warning-messages uses the following syntax:
 !<xx> <text>

"xx" is the number of the message. It may be between 00 and 99 and should be specified using two digits.
Divided by exactly one blank, the definiton of the message("text") follows. This text DO NOT supports comment-indicators.
Such an indicator is interpreted as "plain text".
This text may also contain parameters, which are replaced with concrete values, while the message is logged. The following
parameters are valid:
 %0 - Shape-Name of the source-definition
 %1 - Position of the signal within the world-file
 %2 - Current optionmask of the target-definition
 %3 - Current optionmask of the source-definition
 %4 - Optionmask of the current convert-command (<xxxxxxxx>)
 %5 - Number of the error-message of the current convert-command

There are also fixed message-definitions, which use number 100 to 199 and which can be logged, too. These messages
are defined within the 'TSErrMsg_...'-file using keys 'chgSg*xx' (xx is between 00 and 99). Refer to this file
(these files), if you need more information about these messages.
Attention: Not ALL message-numbers are used!

Third Sectiontype:
The third sectiontype is used to specify modification, which are applied to the *.ref-file of the route. This sectiontype
ist optional and not needed in any case. However, if it is specified it uses the following syntax:
 1.line: % <class-name of the source-shapes>
 2.line: %% <filename of the shape> <attribute-definition> <description of the shape>
 3.line: %% <filename of the shape> <attribute-definition> <description of the shape>
 ...
 n.line: %% <filename of the shape> <attribute-definition> <description of the shape>

Every line may contain a unspecified number of blanks. However, each definition-value must be separated, using a minimum
of ONE blank. The specfied filename of the shape must be surrounded with quotes, if it contains characters like Blanks,
Slashes, etc. This also applies to the description of the shape.
The attribute-definition consists of exactly 8 hexadecimal digits.(0..9, a,b,c,d,e,f,A,B,C,D,E,F) The value itself is the
"logically OR'ed" result of the following atomal attribute-definitions:
	00010008	Shadow(None)
	00020008	Shadow(Round)
	00040008	Shadow(Rect)
	00080008	Shadow(Treeline)
	00100008	Shadow(Dynamic)
	01000010	Align(None)
	10000080	PickupType(_FUEL_DIESEL_)
	20000080	PickupType(_FUEL_WATER_)
	40000080	PickupType(_FUEL_COAL_)
	00000100	StoreMatrix()
	00000200	NoDirLight()
	00000400	Tunnelentrance()
	00000800	AnimShape()
Example: 01040A18 - Shadow(Rect), Align(None), AnimShape(), NoDirLight()
	(10=A, 11=B, 12=C, 13=D, 14=E, 15=F)
Attention: If more than one attribute of the same group is specified, the (numerically ) lower value is ignored.
	(e.g. 00030008 - Shadow(None) and Shadow(Round) ==> 00020008 - Shadow(Round))
Remark: The overall attribute-value is masked using hexadecimal value '711F0F98'. So, no other values than the above mentioned
	are recognized.

Every line of the above definition forms a *.ref-entry, grouped to a *.ref-entryset (due to class).
Such a *.ref entry is added to the *.ref-file, if - and only if - the signal-/object-shape is installed(copied) into the route.
In order to activate this action, additional option(s) may be needed to be specified, when the function is called.

Example:
 % Signaltafeln
 %% KN1-NE1.s	01000010 "NE1 Trapeztafel"		# Align(None) only
 %% KN1-NE2.s	01000010 "Vorsignaltafel"
 %% KN1-NE4.s	01000010 "NE4 Rautentafel" 



Example of a convert-instructionset using one signal from PT1:

Source-definition (Shape)			Target-definition (Shape)
SignalShape (					SignalShape (
	"DB4_HP3.s"					"DB4_HP3.s"
	"DB Hauptsignal Epoche 4-5"			"DB Hauptsignal Epoche 4-5 "
	SignalSubObjs ( 7				SignalSubObjs ( 20
		SignalSubObj ( 0 "Head1" " "			SignalSubObj ( 0 "" "Ausfahrfunktion"
			SigSubType ( SIGNAL_HEAD )			SigSubType ( USER2 )
			SigSubJnLinkIf ( 1 4 )				SignalFlags ( OPTIONAL )
			SigSubSType ( "DB4HP3" )		)
		)						SignalSubObj ( 1 "" "Alternative Geschw. / Rangieren"
		SignalSubObj ( 1 "" "max. 40/100 km/h"			SigSubType ( USER3 )
			SigSubType ( USER1 )				SignalFlags ( OPTIONAL )
			SignalFlags ( OPTIONAL )		)
		)						SignalSubObj ( 2 "" "max. 40/60 km/h"
		SignalSubObj ( 2 "" "max. 60/100 km/h"			SigSubType ( Number_Plate )
			SigSubType ( USER2 )				SignalFlags ( OPTIONAL )
			SignalFlags ( OPTIONAL )		)
		)						SignalSubObj ( 3 "" "max. 70/90 km/h"
		SignalSubObj ( 3 "" "max. 80 km/h"			SigSubType ( Gradient_Plate )
			SigSubType ( USER3 )				SignalFlags ( OPTIONAL )
			SignalFlags ( OPTIONAL )		)
		)						SignalSubObj ( 4 "" "Davorstehendes Vorsignal"
		SignalSubObj ( 4 "" "Verzweigung"			SigSubType ( USER1 )
			SigSubType ( USER4 )				SignalFlags ( OPTIONAL )
			SignalFlags ( OPTIONAL )		)
		)						SignalSubObj ( 5 "Head1" " "
		SignalSubObj ( 5 "" "Ausfahrfunktion"			SigSubType ( SIGNAL_HEAD )
			SigSubType ( Gradient_Plate )			SigSubSType ( "DB4HP3" )
			SignalFlags ( OPTIONAL )		)
		)						SignalSubObj ( 6 "" " "
		SignalSubObj ( 6 "" "Gegenrichtung aktiv"		SigSubType ( SIGNAL_HEAD )
			SigSubType ( SIGNAL_HEAD )			SigSubSType ( "SigCtl_1" )
			SignalFlags ( OPTIONAL BACK_FACING )	)
			SigSubSType ( "DB4HP3X" )		SignalSubObj ( 7 "" " "
		)							SigSubType ( SIGNAL_HEAD )
	)								SigSubSType ( "SigCtl_2" )
)								)
								SignalSubObj ( 8 "" " "
									SigSubType ( SIGNAL_HEAD )
									SigSubSType ( "SigCtl_3" )
								)
								SignalSubObj ( 9 "" " "
									SigSubType ( SIGNAL_HEAD )
									SigSubSType ( "Set_D" )
								)
								SignalSubObj ( 10 "" " "
									SigSubType ( SIGNAL_HEAD )
									SigSubSType ( "Set_R" )
								)
								SignalSubObj ( 11 "" " "
									SigSubType ( SIGNAL_HEAD )
									SigSubSType ( "HP_S" )
								)
								SignalSubObj ( 12 "" " "
									SigSubType ( SIGNAL_HEAD )
									SigSubSType ( "HP_I" )
								)
								SignalSubObj ( 13 "" "Blockfreigabe"
									SigSubType ( USER2 )
									SignalFlags ( OPTIONAL BACK_FACING )
								)
								SignalSubObj ( 14 "" "ALLE oder KEINEN"
									SigSubType ( SIGNAL_HEAD )
									SigSubSType ( "SigCtl_0X" )
									SignalFlags ( OPTIONAL BACK_FACING )
								)
								SignalSubObj ( 15 "" "ALLE oder KEINEN"
									SigSubType ( SIGNAL_HEAD )
									SigSubSType ( "SigCtl_1X" )
									SignalFlags ( OPTIONAL BACK_FACING )
								)
								SignalSubObj ( 16 "" "ALLE oder KEINEN"
									SigSubType ( SIGNAL_HEAD )
									SigSubSType ( "Set_D" )
									SignalFlags ( OPTIONAL BACK_FACING )
								)
								SignalSubObj ( 17 "" "ALLE oder KEINEN"
									SigSubType ( SIGNAL_HEAD )
									SigSubSType ( "Set_R" )
									SignalFlags ( OPTIONAL BACK_FACING )
								)
								SignalSubObj ( 18 "" "ALLE oder KEINEN"
									SigSubType ( SIGNAL_HEAD )
									SigSubSType ( "HP_S" )
									SignalFlags ( OPTIONAL BACK_FACING )
								)
								SignalSubObj ( 19 "" "ALLE oder KEINEN"
									SigSubType ( SIGNAL_HEAD )
									SigSubSType ( "HP_I" )
									SignalFlags ( OPTIONAL BACK_FACING )
								)
							)
						)
Convert-instructionset:

 DB4_HP3.s				# DB Main-signal Epoche 4-5
 /o  0  00000020 00000000 00000001	# connected signals - set corresponding bit
 /B  4 00000010 00000000	# Branch requested? -- speeds are only DEFAULT if 'no branch'
 /o  0  00000006 00000002 00000004	# 40 without branch
 /o  0  00000006 00000004 00000006	# 60 without branch
 /o  0  00000006 00000006 0000000A	# 100 without branch (->90)
 /o  0  0000000E 00000008 00000008	# 80 without branch (->70)
 /o 111 00000010 00000000 00000000	# Branch requested -- Manual action needed -> Message
 /o 01  0000000E 00000000 00000000	# 'Speed fixed' is active --- Message 
 /c  5  0
 /c  6  0 SigCtl_1
 /c  7  0 SigCtl_2
 /c  8  0 SigCtl_3
 /c  9  0 Set_D
 /c 10  0 Set_R
 /c 11  0 HP_S
 /c 12  0 HP_I
 /b  0 00000040 00000000	# Back-facing used? - no -> End
# Optionbit 13(00002000) is NEVER set within this conversion.
 /c 14  6 SigCtl_0X
 /c 15  6 SigCtl_1X
 /c 16  6 Set_D
 /c 17  6 Set_R
 /c 18  6 HP_S
 /c 19  6 HP_I
# End of instructions
!01 !     Signal('%0'-%1): Signal defines 'Speed fixed'! Activation needed. (%2)
# Attention: Second '!' is part of the message.


All lines of the above 'Convert-instructionset' are listed here again. However, aditional comments, which describe the
'convert-commands' in detail are added. These comments are marked in the first column using character '+':

 DB4_HP3.s				# DB Main-signal Epoche 4-5
+ This line shows, that the signaldefinitions of the shapes 'DB4HP3' should be converted. All signals within the route, which
+ are of type 'DB4HP3' should be converted using this instructionset. No second name follows this shape-name. So, the name
+ of the target-signaldefinition should also be 'DB4HP3'.
+ A convert-instructionset must assure, that ALL active subobjects ot the target-signaldefiniton are generated. So, a number of
+ convert-commands follow this leading line to create the various subobjects.

 /o  0  00000020 00000000 00000001	# connected signals - set corresponding bit
+ If the optional subobject '5' (Ausfahrfunktion,Gradient_Plate) of a signaldefinition (source) is selected, the sixth bit
+ (B'0010.0000' = X'20') is set within the optionmask of the signaldefinition. If this optionvalue is masked with the first
+ mask of the specification (logical AND) the result do not equals zero. This result is checked against 'unequal to 0',
+ because the second mask-value of the line (00000000) requests it. The condition is true and so the third mask-value of the
+ line is OR'ed into the optionmask of the target-signaldefinition, which sets the last bit of this optionmask. This has the
+ same impact as if subobject '0' (Ausfahrfunktion,USER2) is activated within the target-definition.

 /B  4 00000010 00000000	# Branch requested -- speeds are only DEFAULT if 'no branch'
+ This line checks if subobject '4' (B'0001.0000' = X'10') is activated/selected. In this case, all speedrestrictions of
+ the source-signal are ONLY valid, if the 'selected route' connection is 'on path'. Because this property is NOT supported
+ within the target-signaldefinition, speedrestrictions can ONLY be transferred to the target-definition, if NO branch is
+ active. Then, the speedrestricions(source) are unconditional.
+ (Remark: This property should be described within the documentation of the source-signalsystem. However, it must be
+	included in the definiton of the convert-instructionset.)
* If subobject '4' is selected, the  result of masking the optionvalue with the specified mask (logical AND) is unequal to
+ to 0. Therefore the condition of this line is 'true' (Comparison-mask=='0000000' ==> check 'unequal to 0'). However, due
+ to the usage of command '/B' this condition has to be inverted and becomes 'false'. This means, that the next line(s) is/are
+ NOT executed. The following 4 lines, which are processing speedrestrictions, are skipped.
+ If the 'conditional branch' is not active and subobject '4' is NOT selected, line-condition is 'false', inverted to 'true'
+ and processing continues using the next conversion-line. (Speedrestrictions are valid in every case and will be transferred
+ now)

 /o  0  00000006 00000002 00000004	# 40 without branch
+ This command should transfer the speed-restriction of 40 kmh to the target, if this is selected.
+ Using the convert-command of this line subobject '1' (B'0000.0010' = X'02') and '2' (B'0000.0100' = X'04') are checked.
+ If subobject '1 IS selected within the optionmask of the source-signaldefinition and subobject '2' is NOT selected,
+ masking provides a value of '00000002' and the line-condition is 'true'. So, value '00000004 is inserted (OR'ed) into the
+ optionmask of the target-signaldefinition, which has the same impact as if subobject '2' (max. 40/60 km/h,Number_Plate)
+ is selected/activated.

 /o  0  00000006 00000004 00000006	# 60 without branch
+ This command should transfer the speed-restriction of 60 kmh to the target, if this is selected.
+ Using the convert-command of this line subobject '1' (B'0000.0010' = X'02') and '2' (B'0000.0100' = X'04') are checked, too.
+ Only if subobject '1 is NOT selected within the optionmask of the source-signaldefinition and subobject '2' IS selected,
+ masking provides a value of '00000004' and the line-condition is 'true'. Then, value '00000006 is inserted (OR'ed) into
+ the optionmask of the target-signaldefinition, which has the same impact as if subobject '2' (max. 40/60 km/h,Number_Plate)
+ AND subobject '1' (Alternative Geschw. / Rangieren,USER3) are selected/activated.

 /o  0  00000006 00000006 0000000A	# 100 without branch (->90)
+ This command should transfer the speed-restriction of 100 kmh to the target, if this is selected.
+ Using the convert-command of this line subobject '1' (B'0000.0010' = X'02') and '2' (B'0000.0100' = X'04') are checked
+ again. Only if both subobjects ARE selected within the optionmask of the source-signaldefinition, masking provides a value
+ of '00000006' and the line-condition is 'true'. Value '0000000A is inserted (OR'ed) into the optionmask of the target-
+ signaldefinition in this case, which has the same impact as if subobject '3' (max. 70/90 km/h,Gradient_Plate)
+ AND subobject '1' (Alternative Geschw. / Rangieren,USER3) are selected/activated.

 /o  0  0000000E 00000008 00000008	# 80 without branch (->70)
+ This command should transfer the speed-restriction of 80 kmh to the target, if this is selected.
+ Using the convert-command of this line subobject '1' (B'0000.0010' = X'02'), '2' (B'0000.0100' = X'04') and
+ '3' (B'0000.1000' = X'08') are checked. If solo subobject '3' IS selected within the optionmask of the source-
+ signaldefinition, masking provides a value of '00000008' and the line-condition is 'true'. Value '00000008 is inserted
+ (OR'ed) into the optionmask of the target-signaldefinition, which has the same impact as if subobject '3'
+ (max. 70/90 km/h,Gradient_Plate) is selected/activated.

 /o 111 00000010 00000000 00000000	# Branch requested -- Manual action needed -> Message
+ This command should report that a 'no longer supported' signaloption is used from this object.
+ This line checks if subobject '4' (B'0001.0000' = X'10') is activated/selected within the optionmask of the
+ source-signaldefinition. In this case, masking provides a value, which is 'unequal to 0' and the line-condition is 'true'.
+ Due to the fact, that the third maskvalue within the convert-comand euqals zero, no modification of the target-optionmask
+ takes place. However, the system-message 111 is printed. This message is NOT defined within this convert-instructionset,
+ but can be found as message 11 ('chgSg*11') within the ErrMsg-file. 

 /o 01  0000000E 00000000 00000000	# 'Speed fixed' is active --- Message
+ Using the convert-command of this line subobject '1' (B'0000.0010' = X'02'), '2' (B'0000.0100' = X'04') and
+ '3' (B'0000.1000' = X'08') are checked. If masking provides a value 'unequal to 0', any speedrestriction is activated/
+ selected within the optionmask of the source-signaldefinition. Then, message '01', which is defined below. is printed and
+ shows to user, that additional actions have to be taken.
 
 /c  5  0
+ Subobjects of type SIGNAL_HEAD are represented by a 'Signalitem' within the track-database. So, this convert-command
+ creates a new signalitem for the target-subobject '5' using the signalitem of 'old' subobject '0' as a template. Position,
+ direction and other values are copied from this template. Even the name of the script is copied in this case.

 /c  6  0 SigCtl_1
+ This convert-command creates a new signalitem for target-subobject '6' again using the signalitem of 'old' subobject '0'
+ as a template. Position, direction and other values are copied from this template. However, the new name of the
+ Signaltype-Definition (= name of the script) is set to 'SigCtl_1'.

 /c  7  0 SigCtl_2
+ This convert-command adds another new signalitem for target-subobject '7' again using the signalitem of 'old' subobject
+ '0' as a template. So, the new signalitem contains the same values (position, direction,...) as the template.
+ However, the name of the Signaltype-Definition (= name of the script) is set to 'SigCtl_2'.

 /c  8  0 SigCtl_3
+ Refer to last description.

 /c  9  0 Set_D
+ Refer to last description.

 /c 10  0 Set_R
+ Refer to last description.

 /c 11  0 HP_S
+ Refer to last description.

 /c 12  0 HP_I
+ Refer to last description.

 /b  0 00000040 00000000	# Back-facing used? - no -> End
+ This convert-command checks if the new signal-definition should contain 'back-facing' signaloptions. If not, creation of
+ the new signal is complete and can be terminated.
+ This line checks if subobject '6' (B'0100.0000' = X'40') is activated/selected within the optionmask of the
+ source-signaldefinition. In this case, the old signal-definition contains 'back-facing options, which must be transferred
+ to the new signal. Then, masking provides a value, which is 'unequal to 0', the line-condition is 'true' (Comparison-mask==
+ '0000000' ==> check 'unequal to 0') and the next line of the convert-commands is processed. If there are no requests to
+ create 'back-facing' subobjects and subobject '6' is NOT selected, the line-condition is 'false' and processing of the
+ convert-commands is terminated. The number '0' after the command '/b' marks this feature. Then, this target-signaldefinition
+ contains NO active subobjects where attribute 'BACK_FACING' is set.

# Optionbit 13(00002000) is NEVER set within this conversion.
+ This is only a comment, which states, that subobject '13' will never be activated/selected using this instructionset.

 /c 14  6 SigCtl_0X
+ This convert-command adds a new signalitem for target-subobject '14'.  Signalitem of 'old' subobject '6' is used as the
+ template, because attribut 'BACK_FACING' is set there. So this attribute is included within the values, which are copied
+ to build the new signalitem of subobject '14'. The new name of the Signaltype-Definition (= name of the script) is set to
+ 'SigCtl_0X'.

 /c 15  6 SigCtl_1X
+ This convert-command adds a new signalitem for target-subobject '15' again using the signalitem of 'old' subobject '6' as
+ a template. Position, direction and other values like 'BACK_FACING' are copied from this template. The new name of the
+ Signaltype-Definition (= name of the script) is set to 'SigCtl_1X'.

 /c 16  6 Set_D
+ This convert-command adds another new signalitem for target-subobject '16' again using the signalitem of 'old' subobject
+ '6' as a template. So, the new signalitem contains the same values (position, direction, attributes...) as the
+ template. The name of the Signaltype-Definition (= name of the script) is changed to 'Set_D'.

 /c 17  6 Set_R
+ Refer to last description.

 /c 18  6 HP_S
+ Refer to last description.

 /c 19  6 HP_I
+ Refer to last description.

# End of instructions

!01 !     Signal('%0'-%1): Signal defines 'Speed fixed'! Activation needed. (%2)
+ Application-defined messages, which must be printed are defined here. This is message number '01'. It contains some placeholder,
+ which are replaced with concrete values, while the message is printed. So '%0' is replaced by the shape-name of the concerned
+ signal (source) and instead of '%1' the position of the source-signal within the world-file is printed.
+ The message starts directly before (the second) character '!' and lasts until end of line is reached.

Additional remark regarding above comments:	B'0000.0000' is binary value. 8 Bits build a byte
						X'00' is hexadecimal value. 2 characters (0-9,a-f) build a byte 


